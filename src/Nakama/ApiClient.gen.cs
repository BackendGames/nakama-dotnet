
/* Code generated by openapi-gen/main.go. DO NOT EDIT. */

namespace Nakama
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;

    /// <summary>
    /// A group to create.
    /// </summary>
    public interface ICreateGroupsRequestNewGroup
    {

        /// <summary>
        /// A URL for an avatar image.
        /// </summary>
        string AvatarUrl { get; }

        /// <summary>
        /// A description for the group.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// The language expected to be a tag which follows the BCP-47 spec.
        /// </summary>
        string LangTag { get; }

        /// <summary>
        /// Additional information stored as a JSON object.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// A unique name for the group.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Mark a group as open or not where only admins can accept members.
        /// </summary>
        bool Open { get; }
    }

    /// <inheritdoc />
    internal class CreateGroupsRequestNewGroup : ICreateGroupsRequestNewGroup
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("avatar_url")]
        public string AvatarUrl { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("description")]
        public string Description { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("lang_tag")]
        public string LangTag { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("metadata")]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("name")]
        public string Name { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("open")]
        public bool Open { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "AvatarUrl: {", AvatarUrl, "}, ");
            output += string.Concat(output, "Description: {", Description, "}, ");
            output += string.Concat(output, "LangTag: {", LangTag, "}, ");
            output += string.Concat(output, "Metadata: {", Metadata, "}, ");
            output += string.Concat(output, "Name: {", Name, "}, ");
            output += string.Concat(output, "Open: {", Open, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Record values to write.
    /// </summary>
    public interface IWriteLeaderboardRecordRequestLeaderboardRecordWrite
    {

        /// <summary>
        /// Optional record metadata.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// The score value to submit.
        /// </summary>
        string Score { get; }

        /// <summary>
        /// An optional secondary value.
        /// </summary>
        string Subscore { get; }
    }

    /// <inheritdoc />
    internal class WriteLeaderboardRecordRequestLeaderboardRecordWrite : IWriteLeaderboardRecordRequestLeaderboardRecordWrite
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("metadata")]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("score")]
        public string Score { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("subscore")]
        public string Subscore { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Metadata: {", Metadata, "}, ");
            output += string.Concat(output, "Score: {", Score, "}, ");
            output += string.Concat(output, "Subscore: {", Subscore, "}, ");
            return output;
        }
    }

    /// <summary>
    /// A user with additional account details. Always the current user.
    /// </summary>
    public interface IApiAccount
    {

        /// <summary>
        /// The custom id in the user's account.
        /// </summary>
        string CustomId { get; }

        /// <summary>
        /// The devices which belong to the user's account.
        /// </summary>
        List<IApiAccountDevice> Devices { get; }

        /// <summary>
        /// The email address of the user.
        /// </summary>
        string Email { get; }

        /// <summary>
        /// The user object.
        /// </summary>
        IApiUser User { get; }

        /// <summary>
        /// The UNIX time when the user's email was verified.
        /// </summary>
        string VerifyTime { get; }

        /// <summary>
        /// The user's wallet data.
        /// </summary>
        string Wallet { get; }
    }

    /// <inheritdoc />
    internal class ApiAccount : IApiAccount
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("custom_id")]
        public string CustomId { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("devices")]
        public List<IApiAccountDevice> Devices { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("email")]
        public string Email { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("user")]
        public IApiUser User { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("verify_time")]
        public string VerifyTime { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("wallet")]
        public string Wallet { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "CustomId: {", CustomId, "}, ");
            output += string.Concat(output, "Devices: {", Devices, "}, ");
            output += string.Concat(output, "Email: {", Email, "}, ");
            output += string.Concat(output, "User: {", User, "}, ");
            output += string.Concat(output, "VerifyTime: {", VerifyTime, "}, ");
            output += string.Concat(output, "Wallet: {", Wallet, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Send a custom ID to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountCustom
    {

        /// <summary>
        /// A custom identifier.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountCustom : IApiAccountCustom
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("id")]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Id: {", Id, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Send a device to the server. Used with authenticate/link/unlink and user.
    /// </summary>
    public interface IApiAccountDevice
    {

        /// <summary>
        /// A device identifier. Should be obtained by a platform-specific device API.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountDevice : IApiAccountDevice
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("id")]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Id: {", Id, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Send an email with password to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountEmail
    {

        /// <summary>
        /// A valid RFC-5322 email address.
        /// </summary>
        string Email { get; }

        /// <summary>
        /// A password for the user account.
        /// </summary>
        string Password { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountEmail : IApiAccountEmail
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("email")]
        public string Email { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("password")]
        public string Password { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Email: {", Email, "}, ");
            output += string.Concat(output, "Password: {", Password, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Send a Facebook token to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountFacebook
    {

        /// <summary>
        /// The OAuth token received from Facebook to access their profile API.
        /// </summary>
        string Token { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountFacebook : IApiAccountFacebook
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("token")]
        public string Token { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Token: {", Token, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Send Apple's Game Center account credentials to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountGameCenter
    {

        /// <summary>
        /// Bundle ID (generated by GameCenter).
        /// </summary>
        string BundleId { get; }

        /// <summary>
        /// Player ID (generated by GameCenter).
        /// </summary>
        string PlayerId { get; }

        /// <summary>
        /// The URL for the public encryption key.
        /// </summary>
        string PublicKeyUrl { get; }

        /// <summary>
        /// A random "NSString" used to compute the hash and keep it randomized.
        /// </summary>
        string Salt { get; }

        /// <summary>
        /// The verification signature data generated.
        /// </summary>
        string Signature { get; }

        /// <summary>
        /// Time since UNIX epoch when the signature was created.
        /// </summary>
        string TimestampSeconds { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountGameCenter : IApiAccountGameCenter
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("bundle_id")]
        public string BundleId { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("player_id")]
        public string PlayerId { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("public_key_url")]
        public string PublicKeyUrl { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("salt")]
        public string Salt { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("signature")]
        public string Signature { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("timestamp_seconds")]
        public string TimestampSeconds { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "BundleId: {", BundleId, "}, ");
            output += string.Concat(output, "PlayerId: {", PlayerId, "}, ");
            output += string.Concat(output, "PublicKeyUrl: {", PublicKeyUrl, "}, ");
            output += string.Concat(output, "Salt: {", Salt, "}, ");
            output += string.Concat(output, "Signature: {", Signature, "}, ");
            output += string.Concat(output, "TimestampSeconds: {", TimestampSeconds, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Send a Google token to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountGoogle
    {

        /// <summary>
        /// The OAuth token received from Google to access their profile API.
        /// </summary>
        string Token { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountGoogle : IApiAccountGoogle
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("token")]
        public string Token { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Token: {", Token, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Send a Steam token to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountSteam
    {

        /// <summary>
        /// The account token received from Steam to access their profile API.
        /// </summary>
        string Token { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountSteam : IApiAccountSteam
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("token")]
        public string Token { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Token: {", Token, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Create one or more groups with the current user as owner.
    /// </summary>
    public interface IApiCreateGroupsRequest
    {

        /// <summary>
        /// The Group objects to create.
        /// </summary>
        List<ICreateGroupsRequestNewGroup> Groups { get; }
    }

    /// <inheritdoc />
    internal class ApiCreateGroupsRequest : IApiCreateGroupsRequest
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("groups")]
        public List<ICreateGroupsRequestNewGroup> Groups { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Groups: {", Groups, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Storage objects to delete.
    /// </summary>
    public interface IApiDeleteStorageObjectId
    {

        /// <summary>
        /// The collection which stores the object.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// The key of the object within the collection.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// The version hash of the object.
        /// </summary>
        string Version { get; }
    }

    /// <inheritdoc />
    internal class ApiDeleteStorageObjectId : IApiDeleteStorageObjectId
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("collection")]
        public string Collection { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("key")]
        public string Key { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("version")]
        public string Version { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Collection: {", Collection, "}, ");
            output += string.Concat(output, "Key: {", Key, "}, ");
            output += string.Concat(output, "Version: {", Version, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Batch delete storage objects.
    /// </summary>
    public interface IApiDeleteStorageObjectsRequest
    {

        /// <summary>
        /// Batch of storage objects.
        /// </summary>
        List<IApiDeleteStorageObjectId> ObjectIds { get; }
    }

    /// <inheritdoc />
    internal class ApiDeleteStorageObjectsRequest : IApiDeleteStorageObjectsRequest
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("object_ids")]
        public List<IApiDeleteStorageObjectId> ObjectIds { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "ObjectIds: {", ObjectIds, "}, ");
            return output;
        }
    }

    /// <summary>
    /// A friend of a user.
    /// </summary>
    public interface IApiFriend
    {

        /// <summary>
        /// The friend status.
        /// </summary>
        int State { get; }

        /// <summary>
        /// The user object.
        /// </summary>
        IApiUser User { get; }
    }

    /// <inheritdoc />
    internal class ApiFriend : IApiFriend
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("state")]
        public int State { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("user")]
        public IApiUser User { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "State: {", State, "}, ");
            output += string.Concat(output, "User: {", User, "}, ");
            return output;
        }
    }

    /// <summary>
    /// A collection of zero or more friends of the user.
    /// </summary>
    public interface IApiFriends
    {

        /// <summary>
        /// The Friend objects.
        /// </summary>
        List<IApiFriend> Friends { get; }
    }

    /// <inheritdoc />
    internal class ApiFriends : IApiFriends
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("friends")]
        public List<IApiFriend> Friends { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Friends: {", Friends, "}, ");
            return output;
        }
    }

    /// <summary>
    /// A group in the server.
    /// </summary>
    public interface IApiGroup
    {

        /// <summary>
        /// A URL for an avatar image.
        /// </summary>
        string AvatarUrl { get; }

        /// <summary>
        /// The current count of all members in the group.
        /// </summary>
        int Count { get; }

        /// <summary>
        /// The UNIX time when the group was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The id of the user who created the group.
        /// </summary>
        string CreatorId { get; }

        /// <summary>
        /// A description for the group.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// The id of a group.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The language expected to be a tag which follows the BCP-47 spec.
        /// </summary>
        string LangTag { get; }

        /// <summary>
        /// Additional information stored as a JSON object.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// The unique name of the group.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Anyone can join open groups, otherwise only admins can accept members.
        /// </summary>
        bool Open { get; }

        /// <summary>
        /// The UNIX time when the group was last updated.
        /// </summary>
        string UpdateTime { get; }
    }

    /// <inheritdoc />
    internal class ApiGroup : IApiGroup
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("avatar_url")]
        public string AvatarUrl { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("count")]
        public int Count { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("create_time")]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("creator_id")]
        public string CreatorId { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("description")]
        public string Description { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("id")]
        public string Id { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("lang_tag")]
        public string LangTag { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("metadata")]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("name")]
        public string Name { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("open")]
        public bool Open { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("update_time")]
        public string UpdateTime { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "AvatarUrl: {", AvatarUrl, "}, ");
            output += string.Concat(output, "Count: {", Count, "}, ");
            output += string.Concat(output, "CreateTime: {", CreateTime, "}, ");
            output += string.Concat(output, "CreatorId: {", CreatorId, "}, ");
            output += string.Concat(output, "Description: {", Description, "}, ");
            output += string.Concat(output, "Id: {", Id, "}, ");
            output += string.Concat(output, "LangTag: {", LangTag, "}, ");
            output += string.Concat(output, "Metadata: {", Metadata, "}, ");
            output += string.Concat(output, "Name: {", Name, "}, ");
            output += string.Concat(output, "Open: {", Open, "}, ");
            output += string.Concat(output, "UpdateTime: {", UpdateTime, "}, ");
            return output;
        }
    }

    /// <summary>
    /// A collection of zero or more groups.
    /// </summary>
    public interface IApiGroups
    {

        /// <summary>
        /// The Group objects.
        /// </summary>
        List<IApiGroup> Groups { get; }
    }

    /// <inheritdoc />
    internal class ApiGroups : IApiGroups
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("groups")]
        public List<IApiGroup> Groups { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Groups: {", Groups, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Represents a complete leaderboard record with all scores and associated metadata.
    /// </summary>
    public interface IApiLeaderboardRecord
    {

        /// <summary>
        /// The UNIX time when the leaderboard record was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The UNIX time when the leaderboard record expires.
        /// </summary>
        string ExpiryTime { get; }

        /// <summary>
        /// The ID of the leaderboard this score belongs to.
        /// </summary>
        string LeaderboardId { get; }

        /// <summary>
        /// Metadata.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// The number of submissions to this score record.
        /// </summary>
        int NumScore { get; }

        /// <summary>
        /// The ID of the score owner, usually a user or group.
        /// </summary>
        string OwnerId { get; }

        /// <summary>
        /// The rank of this record.
        /// </summary>
        string Rank { get; }

        /// <summary>
        /// The score value.
        /// </summary>
        string Score { get; }

        /// <summary>
        /// An optional subscore value.
        /// </summary>
        string Subscore { get; }

        /// <summary>
        /// The UNIX time when the leaderboard record was updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The username of the score owner, if the owner is a user.
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    internal class ApiLeaderboardRecord : IApiLeaderboardRecord
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("create_time")]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("expiry_time")]
        public string ExpiryTime { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("leaderboard_id")]
        public string LeaderboardId { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("metadata")]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("num_score")]
        public int NumScore { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("owner_id")]
        public string OwnerId { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("rank")]
        public string Rank { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("score")]
        public string Score { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("subscore")]
        public string Subscore { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("update_time")]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("username")]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "CreateTime: {", CreateTime, "}, ");
            output += string.Concat(output, "ExpiryTime: {", ExpiryTime, "}, ");
            output += string.Concat(output, "LeaderboardId: {", LeaderboardId, "}, ");
            output += string.Concat(output, "Metadata: {", Metadata, "}, ");
            output += string.Concat(output, "NumScore: {", NumScore, "}, ");
            output += string.Concat(output, "OwnerId: {", OwnerId, "}, ");
            output += string.Concat(output, "Rank: {", Rank, "}, ");
            output += string.Concat(output, "Score: {", Score, "}, ");
            output += string.Concat(output, "Subscore: {", Subscore, "}, ");
            output += string.Concat(output, "UpdateTime: {", UpdateTime, "}, ");
            output += string.Concat(output, "Username: {", Username, "}, ");
            return output;
        }
    }

    /// <summary>
    /// A set of leaderboard records, may be part of a leaderboard records page or a batch of individual records.
    /// </summary>
    public interface IApiLeaderboardRecordList
    {

        /// <summary>
        /// The cursor to send when retireving the next page, if any.
        /// </summary>
        string NextCursor { get; }

        /// <summary>
        /// A batched set of leaderobard records belonging to specified owners.
        /// </summary>
        List<IApiLeaderboardRecord> OwnerRecords { get; }

        /// <summary>
        /// The cursor to send when retrieving the previous page, if any.
        /// </summary>
        string PrevCursor { get; }

        /// <summary>
        /// A list of leaderboard records.
        /// </summary>
        List<IApiLeaderboardRecord> Records { get; }
    }

    /// <inheritdoc />
    internal class ApiLeaderboardRecordList : IApiLeaderboardRecordList
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("next_cursor")]
        public string NextCursor { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("owner_records")]
        public List<IApiLeaderboardRecord> OwnerRecords { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("prev_cursor")]
        public string PrevCursor { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("records")]
        public List<IApiLeaderboardRecord> Records { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "NextCursor: {", NextCursor, "}, ");
            output += string.Concat(output, "OwnerRecords: {", OwnerRecords, "}, ");
            output += string.Concat(output, "PrevCursor: {", PrevCursor, "}, ");
            output += string.Concat(output, "Records: {", Records, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Represents a realtime match.
    /// </summary>
    public interface IApiMatch
    {

        /// <summary>
        /// True if it's an server-managed authoritative match, false otherwise.
        /// </summary>
        bool Authoritative { get; }

        /// <summary>
        /// Match label, if any.
        /// </summary>
        string Label { get; }

        /// <summary>
        /// The ID of the match, can be used to join.
        /// </summary>
        string MatchId { get; }

        /// <summary>
        /// Current number of users in the match.
        /// </summary>
        int Size { get; }
    }

    /// <inheritdoc />
    internal class ApiMatch : IApiMatch
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("authoritative")]
        public bool Authoritative { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("label")]
        public string Label { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("match_id")]
        public string MatchId { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("size")]
        public int Size { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Authoritative: {", Authoritative, "}, ");
            output += string.Concat(output, "Label: {", Label, "}, ");
            output += string.Concat(output, "MatchId: {", MatchId, "}, ");
            output += string.Concat(output, "Size: {", Size, "}, ");
            return output;
        }
    }

    /// <summary>
    /// A list of realtime matches.
    /// </summary>
    public interface IApiMatchList
    {

        /// <summary>
        /// A number of matches corresponding to a list operation.
        /// </summary>
        List<IApiMatch> Matches { get; }
    }

    /// <inheritdoc />
    internal class ApiMatchList : IApiMatchList
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("matches")]
        public List<IApiMatch> Matches { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Matches: {", Matches, "}, ");
            return output;
        }
    }

    /// <summary>
    /// A notification in the server.
    /// </summary>
    public interface IApiNotification
    {

        /// <summary>
        /// Category code for this notification.
        /// </summary>
        int Code { get; }

        /// <summary>
        /// Content of the notification in JSON.
        /// </summary>
        string Content { get; }

        /// <summary>
        /// The UNIX time when the notification was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// ID of the Notification.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// True if this notification was persisted to the database.
        /// </summary>
        bool Persistent { get; }

        /// <summary>
        /// ID of the sender, if a user. Otherwise 'null'.
        /// </summary>
        string SenderId { get; }

        /// <summary>
        /// Subject of the notification.
        /// </summary>
        string Subject { get; }
    }

    /// <inheritdoc />
    internal class ApiNotification : IApiNotification
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("code")]
        public int Code { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("content")]
        public string Content { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("create_time")]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("id")]
        public string Id { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("persistent")]
        public bool Persistent { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("sender_id")]
        public string SenderId { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("subject")]
        public string Subject { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Code: {", Code, "}, ");
            output += string.Concat(output, "Content: {", Content, "}, ");
            output += string.Concat(output, "CreateTime: {", CreateTime, "}, ");
            output += string.Concat(output, "Id: {", Id, "}, ");
            output += string.Concat(output, "Persistent: {", Persistent, "}, ");
            output += string.Concat(output, "SenderId: {", SenderId, "}, ");
            output += string.Concat(output, "Subject: {", Subject, "}, ");
            return output;
        }
    }

    /// <summary>
    /// A collection of zero or more notifications.
    /// </summary>
    public interface IApiNotificationList
    {

        /// <summary>
        /// Use this cursor to paginate notifications. Cache this to catch up to new notifications.
        /// </summary>
        string CacheableCursor { get; }

        /// <summary>
        /// Collection of notifications.
        /// </summary>
        List<IApiNotification> Notifications { get; }
    }

    /// <inheritdoc />
    internal class ApiNotificationList : IApiNotificationList
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("cacheable_cursor")]
        public string CacheableCursor { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("notifications")]
        public List<IApiNotification> Notifications { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "CacheableCursor: {", CacheableCursor, "}, ");
            output += string.Concat(output, "Notifications: {", Notifications, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Storage objects to get.
    /// </summary>
    public interface IApiReadStorageObjectId
    {

        /// <summary>
        /// The collection which stores the object.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// The key of the object within the collection.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// The user owner of the object.
        /// </summary>
        string UserId { get; }
    }

    /// <inheritdoc />
    internal class ApiReadStorageObjectId : IApiReadStorageObjectId
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("collection")]
        public string Collection { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("key")]
        public string Key { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("user_id")]
        public string UserId { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Collection: {", Collection, "}, ");
            output += string.Concat(output, "Key: {", Key, "}, ");
            output += string.Concat(output, "UserId: {", UserId, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Batch get storage objects.
    /// </summary>
    public interface IApiReadStorageObjectsRequest
    {

        /// <summary>
        /// Batch of storage objects.
        /// </summary>
        List<IApiReadStorageObjectId> ObjectIds { get; }
    }

    /// <inheritdoc />
    internal class ApiReadStorageObjectsRequest : IApiReadStorageObjectsRequest
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("object_ids")]
        public List<IApiReadStorageObjectId> ObjectIds { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "ObjectIds: {", ObjectIds, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Execute an Lua function on the server.
    /// </summary>
    public interface IApiRpc
    {

        /// <summary>
        /// The authentication key used when executed as a non-client HTTP request.
        /// </summary>
        string HttpKey { get; }

        /// <summary>
        /// The identifier of the function.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The payload of the function which must be a JSON object.
        /// </summary>
        string Payload { get; }
    }

    /// <inheritdoc />
    internal class ApiRpc : IApiRpc
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("http_key")]
        public string HttpKey { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("id")]
        public string Id { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("payload")]
        public string Payload { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "HttpKey: {", HttpKey, "}, ");
            output += string.Concat(output, "Id: {", Id, "}, ");
            output += string.Concat(output, "Payload: {", Payload, "}, ");
            return output;
        }
    }

    /// <summary>
    /// A user's session used to authenticate messages.
    /// </summary>
    public interface IApiSession
    {

        /// <summary>
        /// True if the corresponding account was just created, false otherwise.
        /// </summary>
        bool Created { get; }

        /// <summary>
        /// Authentication credentials.
        /// </summary>
        string Token { get; }

        /// <summary>
        /// rUDP specific authentication credentials.
        /// </summary>
        string UdpToken { get; }
    }

    /// <inheritdoc />
    internal class ApiSession : IApiSession
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("created")]
        public bool Created { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("token")]
        public string Token { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("udp_token")]
        public string UdpToken { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Created: {", Created, "}, ");
            output += string.Concat(output, "Token: {", Token, "}, ");
            output += string.Concat(output, "UdpToken: {", UdpToken, "}, ");
            return output;
        }
    }

    /// <summary>
    /// An object within the storage engine.
    /// </summary>
    public interface IApiStorageObject
    {

        /// <summary>
        /// The collection which stores the object.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// The UNIX time when the object was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The key of the object within the collection.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// The read access permissions for the object.
        /// </summary>
        int PermissionRead { get; }

        /// <summary>
        /// The write access permissions for the object.
        /// </summary>
        int PermissionWrite { get; }

        /// <summary>
        /// The UNIX time when the object was last updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The user owner of the object.
        /// </summary>
        string UserId { get; }

        /// <summary>
        /// The value of the object.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// The version hash of the object.
        /// </summary>
        string Version { get; }
    }

    /// <inheritdoc />
    internal class ApiStorageObject : IApiStorageObject
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("collection")]
        public string Collection { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("create_time")]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("key")]
        public string Key { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("permission_read")]
        public int PermissionRead { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("permission_write")]
        public int PermissionWrite { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("update_time")]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("user_id")]
        public string UserId { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("value")]
        public string Value { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("version")]
        public string Version { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Collection: {", Collection, "}, ");
            output += string.Concat(output, "CreateTime: {", CreateTime, "}, ");
            output += string.Concat(output, "Key: {", Key, "}, ");
            output += string.Concat(output, "PermissionRead: {", PermissionRead, "}, ");
            output += string.Concat(output, "PermissionWrite: {", PermissionWrite, "}, ");
            output += string.Concat(output, "UpdateTime: {", UpdateTime, "}, ");
            output += string.Concat(output, "UserId: {", UserId, "}, ");
            output += string.Concat(output, "Value: {", Value, "}, ");
            output += string.Concat(output, "Version: {", Version, "}, ");
            return output;
        }
    }

    /// <summary>
    /// A storage acknowledgement.
    /// </summary>
    public interface IApiStorageObjectAck
    {

        /// <summary>
        /// The collection which stores the object.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// The key of the object within the collection.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// The owner of the object.
        /// </summary>
        string UserId { get; }

        /// <summary>
        /// The version hash of the object.
        /// </summary>
        string Version { get; }
    }

    /// <inheritdoc />
    internal class ApiStorageObjectAck : IApiStorageObjectAck
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("collection")]
        public string Collection { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("key")]
        public string Key { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("user_id")]
        public string UserId { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("version")]
        public string Version { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Collection: {", Collection, "}, ");
            output += string.Concat(output, "Key: {", Key, "}, ");
            output += string.Concat(output, "UserId: {", UserId, "}, ");
            output += string.Concat(output, "Version: {", Version, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Batch of acknowledgements for the storage object write.
    /// </summary>
    public interface IApiStorageObjectAcks
    {

        /// <summary>
        /// Batch of storage write acknowledgements.
        /// </summary>
        List<IApiStorageObjectAck> Acks { get; }
    }

    /// <inheritdoc />
    internal class ApiStorageObjectAcks : IApiStorageObjectAcks
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("acks")]
        public List<IApiStorageObjectAck> Acks { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Acks: {", Acks, "}, ");
            return output;
        }
    }

    /// <summary>
    /// List of storage objects.
    /// </summary>
    public interface IApiStorageObjectList
    {

        /// <summary>
        /// The cursor associated with the query a page of results.
        /// </summary>
        string Cursor { get; }

        /// <summary>
        /// The list of storage objects.
        /// </summary>
        List<IApiStorageObject> Objects { get; }
    }

    /// <inheritdoc />
    internal class ApiStorageObjectList : IApiStorageObjectList
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("cursor")]
        public string Cursor { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("objects")]
        public List<IApiStorageObject> Objects { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Cursor: {", Cursor, "}, ");
            output += string.Concat(output, "Objects: {", Objects, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Batch of storage objects.
    /// </summary>
    public interface IApiStorageObjects
    {

        /// <summary>
        /// The batch of storage objects.
        /// </summary>
        List<IApiStorageObject> Objects { get; }
    }

    /// <inheritdoc />
    internal class ApiStorageObjects : IApiStorageObjects
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("objects")]
        public List<IApiStorageObject> Objects { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Objects: {", Objects, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Update a user's account details.
    /// </summary>
    public interface IApiUpdateAccountRequest
    {

        /// <summary>
        /// A URL for an avatar image.
        /// </summary>
        string AvatarUrl { get; }

        /// <summary>
        /// The display name of the user.
        /// </summary>
        string DisplayName { get; }

        /// <summary>
        /// The language expected to be a tag which follows the BCP-47 spec.
        /// </summary>
        string LangTag { get; }

        /// <summary>
        /// The location set by the user.
        /// </summary>
        string Location { get; }

        /// <summary>
        /// The timezone set by the user.
        /// </summary>
        string Timezone { get; }

        /// <summary>
        /// The username of the user's account.
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    internal class ApiUpdateAccountRequest : IApiUpdateAccountRequest
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("avatar_url")]
        public string AvatarUrl { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("display_name")]
        public string DisplayName { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("lang_tag")]
        public string LangTag { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("location")]
        public string Location { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("timezone")]
        public string Timezone { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("username")]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "AvatarUrl: {", AvatarUrl, "}, ");
            output += string.Concat(output, "DisplayName: {", DisplayName, "}, ");
            output += string.Concat(output, "LangTag: {", LangTag, "}, ");
            output += string.Concat(output, "Location: {", Location, "}, ");
            output += string.Concat(output, "Timezone: {", Timezone, "}, ");
            output += string.Concat(output, "Username: {", Username, "}, ");
            return output;
        }
    }

    /// <summary>
    /// A user in the server.
    /// </summary>
    public interface IApiUser
    {

        /// <summary>
        /// A URL for an avatar image.
        /// </summary>
        string AvatarUrl { get; }

        /// <summary>
        /// The UNIX time when the user was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The display name of the user.
        /// </summary>
        string DisplayName { get; }

        /// <summary>
        /// Number of related edges to this user.
        /// </summary>
        int EdgeCount { get; }

        /// <summary>
        /// The Facebook id in the user's account.
        /// </summary>
        string FacebookId { get; }

        /// <summary>
        /// The Apple Game Center in of the user's account.
        /// </summary>
        string GamecenterId { get; }

        /// <summary>
        /// The Google id in the user's account.
        /// </summary>
        string GoogleId { get; }

        /// <summary>
        /// The id of the user's account.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The language expected to be a tag which follows the BCP-47 spec.
        /// </summary>
        string LangTag { get; }

        /// <summary>
        /// The location set by the user.
        /// </summary>
        string Location { get; }

        /// <summary>
        /// Additional information stored as a JSON object.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// Indicates whether the user is currently online.
        /// </summary>
        bool Online { get; }

        /// <summary>
        /// The Steam id in the user's account.
        /// </summary>
        string SteamId { get; }

        /// <summary>
        /// The timezone set by the user.
        /// </summary>
        string Timezone { get; }

        /// <summary>
        /// The UNIX time when the user was last updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The username of the user's account.
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    internal class ApiUser : IApiUser
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("avatar_url")]
        public string AvatarUrl { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("create_time")]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("display_name")]
        public string DisplayName { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("edge_count")]
        public int EdgeCount { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("facebook_id")]
        public string FacebookId { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("gamecenter_id")]
        public string GamecenterId { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("google_id")]
        public string GoogleId { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("id")]
        public string Id { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("lang_tag")]
        public string LangTag { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("location")]
        public string Location { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("metadata")]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("online")]
        public bool Online { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("steam_id")]
        public string SteamId { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("timezone")]
        public string Timezone { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("update_time")]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("username")]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "AvatarUrl: {", AvatarUrl, "}, ");
            output += string.Concat(output, "CreateTime: {", CreateTime, "}, ");
            output += string.Concat(output, "DisplayName: {", DisplayName, "}, ");
            output += string.Concat(output, "EdgeCount: {", EdgeCount, "}, ");
            output += string.Concat(output, "FacebookId: {", FacebookId, "}, ");
            output += string.Concat(output, "GamecenterId: {", GamecenterId, "}, ");
            output += string.Concat(output, "GoogleId: {", GoogleId, "}, ");
            output += string.Concat(output, "Id: {", Id, "}, ");
            output += string.Concat(output, "LangTag: {", LangTag, "}, ");
            output += string.Concat(output, "Location: {", Location, "}, ");
            output += string.Concat(output, "Metadata: {", Metadata, "}, ");
            output += string.Concat(output, "Online: {", Online, "}, ");
            output += string.Concat(output, "SteamId: {", SteamId, "}, ");
            output += string.Concat(output, "Timezone: {", Timezone, "}, ");
            output += string.Concat(output, "UpdateTime: {", UpdateTime, "}, ");
            output += string.Concat(output, "Username: {", Username, "}, ");
            return output;
        }
    }

    /// <summary>
    /// A collection of zero or more users.
    /// </summary>
    public interface IApiUsers
    {

        /// <summary>
        /// The User objects.
        /// </summary>
        List<IApiUser> Users { get; }
    }

    /// <inheritdoc />
    internal class ApiUsers : IApiUsers
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("users")]
        public List<IApiUser> Users { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Users: {", Users, "}, ");
            return output;
        }
    }

    /// <summary>
    /// The object to store.
    /// </summary>
    public interface IApiWriteStorageObject
    {

        /// <summary>
        /// The collection to store the object.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// The key for the object within the collection.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// The read access permissions for the object.
        /// </summary>
        int PermissionRead { get; }

        /// <summary>
        /// The write access permissions for the object.
        /// </summary>
        int PermissionWrite { get; }

        /// <summary>
        /// The value of the object.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// The version hash of the object to check. Possible values are: ["", "*", "#hash#"].
        /// </summary>
        string Version { get; }
    }

    /// <inheritdoc />
    internal class ApiWriteStorageObject : IApiWriteStorageObject
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("collection")]
        public string Collection { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("key")]
        public string Key { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("permission_read")]
        public int PermissionRead { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("permission_write")]
        public int PermissionWrite { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("value")]
        public string Value { get; set; }

        /// <inheritdoc />
        [TinyJson.JsonProperty("version")]
        public string Version { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Collection: {", Collection, "}, ");
            output += string.Concat(output, "Key: {", Key, "}, ");
            output += string.Concat(output, "PermissionRead: {", PermissionRead, "}, ");
            output += string.Concat(output, "PermissionWrite: {", PermissionWrite, "}, ");
            output += string.Concat(output, "Value: {", Value, "}, ");
            output += string.Concat(output, "Version: {", Version, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Write objects to the storage engine.
    /// </summary>
    public interface IApiWriteStorageObjectsRequest
    {

        /// <summary>
        /// The objects to store on the server.
        /// </summary>
        List<IApiWriteStorageObject> Objects { get; }
    }

    /// <inheritdoc />
    internal class ApiWriteStorageObjectsRequest : IApiWriteStorageObjectsRequest
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("objects")]
        public List<IApiWriteStorageObject> Objects { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Objects: {", Objects, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Wrapper message for `bool`.  The JSON representation for `BoolValue` is JSON `true` and `false`.
    /// </summary>
    public interface IProtobufBoolValue
    {

        /// <summary>
        /// The bool value.
        /// </summary>
        bool Value { get; }
    }

    /// <inheritdoc />
    internal class ProtobufBoolValue : IProtobufBoolValue
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("value")]
        public bool Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Value: {", Value, "}, ");
            return output;
        }
    }

    /// <summary>
    /// service Foo {       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);     }  The JSON representation for `Empty` is empty JSON object `{}`.
    /// </summary>
    public interface IProtobufEmpty
    {
    }

    /// <inheritdoc />
    internal class ProtobufEmpty : IProtobufEmpty
    {

        public override string ToString()
        {
            var output = "";
            return output;
        }
    }

    /// <summary>
    /// Wrapper message for `int32`.  The JSON representation for `Int32Value` is JSON number.
    /// </summary>
    public interface IProtobufInt32Value
    {

        /// <summary>
        /// The int32 value.
        /// </summary>
        int Value { get; }
    }

    /// <inheritdoc />
    internal class ProtobufInt32Value : IProtobufInt32Value
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("value")]
        public int Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Value: {", Value, "}, ");
            return output;
        }
    }

    /// <summary>
    /// Wrapper message for `string`.  The JSON representation for `StringValue` is JSON string.
    /// </summary>
    public interface IProtobufStringValue
    {

        /// <summary>
        /// The string value.
        /// </summary>
        string Value { get; }
    }

    /// <inheritdoc />
    internal class ProtobufStringValue : IProtobufStringValue
    {

        /// <inheritdoc />
        [TinyJson.JsonProperty("value")]
        public string Value { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Value: {", Value, "}, ");
            return output;
        }
    }
/*
    /// <summary>
    /// The low level client for the Nakama API.
    /// </summary>
    internal class ApiClient
    {

        /// <summary>
        /// A healthcheck which load balancers can use to check the service.
        /// </summary>
        public Task<> HealthcheckAsync()
        {
        }

        /// <summary>
        /// Fetch the current user's account.
        /// </summary>
        public Task<> GetAccountAsync()
        {
        }

        /// <summary>
        /// Update fields in the current user's account.
        /// </summary>
        public Task<> UpdateAccountAsync()
        {
        }

        /// <summary>
        /// Authenticate a user with a custom id against the server.
        /// </summary>
        public Task<> AuthenticateCustomAsync()
        {
        }

        /// <summary>
        /// Authenticate a user with a device id against the server.
        /// </summary>
        public Task<> AuthenticateDeviceAsync()
        {
        }

        /// <summary>
        /// Authenticate a user with an email+password against the server.
        /// </summary>
        public Task<> AuthenticateEmailAsync()
        {
        }

        /// <summary>
        /// Authenticate a user with a Facebook OAuth token against the server.
        /// </summary>
        public Task<> AuthenticateFacebookAsync()
        {
        }

        /// <summary>
        /// Authenticate a user with Apple's GameCenter against the server.
        /// </summary>
        public Task<> AuthenticateGameCenterAsync()
        {
        }

        /// <summary>
        /// Authenticate a user with Google against the server.
        /// </summary>
        public Task<> AuthenticateGoogleAsync()
        {
        }

        /// <summary>
        /// Authenticate a user with Steam against the server.
        /// </summary>
        public Task<> AuthenticateSteamAsync()
        {
        }

        /// <summary>
        /// Add a custom ID to the social profiles on the current user's account.
        /// </summary>
        public Task<> LinkCustomAsync()
        {
        }

        /// <summary>
        /// Add a device ID to the social profiles on the current user's account.
        /// </summary>
        public Task<> LinkDeviceAsync()
        {
        }

        /// <summary>
        /// Add an email+password to the social profiles on the current user's account.
        /// </summary>
        public Task<> LinkEmailAsync()
        {
        }

        /// <summary>
        /// Add Facebook to the social profiles on the current user's account.
        /// </summary>
        public Task<> LinkFacebookAsync()
        {
        }

        /// <summary>
        /// Add Apple's GameCenter to the social profiles on the current user's account.
        /// </summary>
        public Task<> LinkGameCenterAsync()
        {
        }

        /// <summary>
        /// Add Google to the social profiles on the current user's account.
        /// </summary>
        public Task<> LinkGoogleAsync()
        {
        }

        /// <summary>
        /// Add Steam to the social profiles on the current user's account.
        /// </summary>
        public Task<> LinkSteamAsync()
        {
        }

        /// <summary>
        /// Remove the custom ID from the social profiles on the current user's account.
        /// </summary>
        public Task<> UnlinkCustomAsync()
        {
        }

        /// <summary>
        /// Remove the device ID from the social profiles on the current user's account.
        /// </summary>
        public Task<> UnlinkDeviceAsync()
        {
        }

        /// <summary>
        /// Remove the email+password from the social profiles on the current user's account.
        /// </summary>
        public Task<> UnlinkEmailAsync()
        {
        }

        /// <summary>
        /// Remove Facebook from the social profiles on the current user's account.
        /// </summary>
        public Task<> UnlinkFacebookAsync()
        {
        }

        /// <summary>
        /// Remove Apple's GameCenter from the social profiles on the current user's account.
        /// </summary>
        public Task<> UnlinkGameCenterAsync()
        {
        }

        /// <summary>
        /// Remove Google from the social profiles on the current user's account.
        /// </summary>
        public Task<> UnlinkGoogleAsync()
        {
        }

        /// <summary>
        /// Remove Steam from the social profiles on the current user's account.
        /// </summary>
        public Task<> UnlinkSteamAsync()
        {
        }

        /// <summary>
        /// Delete one or more users by ID or username.
        /// </summary>
        public Task<> DeleteFriendsAsync()
        {
        }

        /// <summary>
        /// List all friends for the current user.
        /// </summary>
        public Task<> ListFriendsAsync()
        {
        }

        /// <summary>
        /// Add friends by ID or username to a user's account.
        /// </summary>
        public Task<> AddFriendsAsync()
        {
        }

        /// <summary>
        /// Block one or more users by ID or username.
        /// </summary>
        public Task<> BlockFriendsAsync()
        {
        }

        /// <summary>
        /// Import Facebook friends and add them to a user's account.
        /// </summary>
        public Task<> ImportFacebookFriendsAsync()
        {
        }

        /// <summary>
        /// Create one or more new groups with the current user as the owner.
        /// </summary>
        public Task<> CreateGroupAsync()
        {
        }

        /// <summary>
        /// Delete a leaderboard record.
        /// </summary>
        public Task<> DeleteLeaderboardRecordAsync()
        {
        }

        /// <summary>
        /// List leaderboard records
        /// </summary>
        public Task<> ListLeaderboardRecordsAsync()
        {
        }

        /// <summary>
        /// Write a record to a leaderboard.
        /// </summary>
        public Task<> WriteLeaderboardRecordAsync()
        {
        }

        /// <summary>
        /// Fetch list of running matches.
        /// </summary>
        public Task<> ListMatchesAsync()
        {
        }

        /// <summary>
        /// Delete one or more users by ID or username.
        /// </summary>
        public Task<> DeleteNotificationsAsync()
        {
        }

        /// <summary>
        /// Fetch list of notifications.
        /// </summary>
        public Task<> ListNotificationsAsync()
        {
        }

        /// <summary>
        /// Execute a Lua function on the server.
        /// </summary>
        public Task<> RpcFunc2Async()
        {
        }

        /// <summary>
        /// Execute a Lua function on the server.
        /// </summary>
        public Task<> RpcFuncAsync()
        {
        }

        /// <summary>
        /// Get storage objects.
        /// </summary>
        public Task<> ReadStorageObjectsAsync()
        {
        }

        /// <summary>
        /// Write objects into the storage engine.
        /// </summary>
        public Task<> WriteStorageObjectsAsync()
        {
        }

        /// <summary>
        /// Delete one or more objects by ID or username.
        /// </summary>
        public Task<> DeleteStorageObjectsAsync()
        {
        }

        /// <summary>
        /// List publicly readable storage objects in a given collection.
        /// </summary>
        public Task<> ListStorageObjectsAsync()
        {
        }

        /// <summary>
        /// List publicly readable storage objects in a given collection.
        /// </summary>
        public Task<> ListStorageObjects2Async()
        {
        }

        /// <summary>
        /// Fetch zero or more users by ID and/or username.
        /// </summary>
        public Task<> GetUsersAsync()
        {
        }
    }
*/
}
