// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: github.com/heroiclabs/nakama-common/api/api.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nakama {

  /// <summary>Holder for reflection information generated from github.com/heroiclabs/nakama-common/api/api.proto</summary>
  public static partial class ApiReflection {

    #region Descriptor
    /// <summary>File descriptor for github.com/heroiclabs/nakama-common/api/api.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ApiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjFnaXRodWIuY29tL2hlcm9pY2xhYnMvbmFrYW1hLWNvbW1vbi9hcGkvYXBp",
            "LnByb3RvEgpuYWthbWEuYXBpGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1w",
            "LnByb3RvGh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8i6gEKB0Fj",
            "Y291bnQSHgoEdXNlchgBIAEoCzIQLm5ha2FtYS5hcGkuVXNlchIOCgZ3YWxs",
            "ZXQYAiABKAkSDQoFZW1haWwYAyABKAkSKgoHZGV2aWNlcxgEIAMoCzIZLm5h",
            "a2FtYS5hcGkuQWNjb3VudERldmljZRIRCgljdXN0b21faWQYBSABKAkSLwoL",
            "dmVyaWZ5X3RpbWUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "EjAKDGRpc2FibGVfdGltZRgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXAifAoMQWNjb3VudEFwcGxlEg0KBXRva2VuGAEgASgJEjAKBHZhcnMY",
            "AiADKAsyIi5uYWthbWEuYXBpLkFjY291bnRBcHBsZS5WYXJzRW50cnkaKwoJ",
            "VmFyc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiewoN",
            "QWNjb3VudEN1c3RvbRIKCgJpZBgBIAEoCRIxCgR2YXJzGAIgAygLMiMubmFr",
            "YW1hLmFwaS5BY2NvdW50Q3VzdG9tLlZhcnNFbnRyeRorCglWYXJzRW50cnkS",
            "CwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASJ7Cg1BY2NvdW50RGV2",
            "aWNlEgoKAmlkGAEgASgJEjEKBHZhcnMYAiADKAsyIy5uYWthbWEuYXBpLkFj",
            "Y291bnREZXZpY2UuVmFyc0VudHJ5GisKCVZhcnNFbnRyeRILCgNrZXkYASAB",
            "KAkSDQoFdmFsdWUYAiABKAk6AjgBIo4BCgxBY2NvdW50RW1haWwSDQoFZW1h",
            "aWwYASABKAkSEAoIcGFzc3dvcmQYAiABKAkSMAoEdmFycxgDIAMoCzIiLm5h",
            "a2FtYS5hcGkuQWNjb3VudEVtYWlsLlZhcnNFbnRyeRorCglWYXJzRW50cnkS",
            "CwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASKCAQoPQWNjb3VudEZh",
            "Y2Vib29rEg0KBXRva2VuGAEgASgJEjMKBHZhcnMYAiADKAsyJS5uYWthbWEu",
            "YXBpLkFjY291bnRGYWNlYm9vay5WYXJzRW50cnkaKwoJVmFyc0VudHJ5EgsK",
            "A2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEipQEKGkFjY291bnRGYWNl",
            "Ym9va0luc3RhbnRHYW1lEhoKEnNpZ25lZF9wbGF5ZXJfaW5mbxgBIAEoCRI+",
            "CgR2YXJzGAIgAygLMjAubmFrYW1hLmFwaS5BY2NvdW50RmFjZWJvb2tJbnN0",
            "YW50R2FtZS5WYXJzRW50cnkaKwoJVmFyc0VudHJ5EgsKA2tleRgBIAEoCRIN",
            "CgV2YWx1ZRgCIAEoCToCOAEi8QEKEUFjY291bnRHYW1lQ2VudGVyEhEKCXBs",
            "YXllcl9pZBgBIAEoCRIRCglidW5kbGVfaWQYAiABKAkSGQoRdGltZXN0YW1w",
            "X3NlY29uZHMYAyABKAMSDAoEc2FsdBgEIAEoCRIRCglzaWduYXR1cmUYBSAB",
            "KAkSFgoOcHVibGljX2tleV91cmwYBiABKAkSNQoEdmFycxgHIAMoCzInLm5h",
            "a2FtYS5hcGkuQWNjb3VudEdhbWVDZW50ZXIuVmFyc0VudHJ5GisKCVZhcnNF",
            "bnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIn4KDUFjY291",
            "bnRHb29nbGUSDQoFdG9rZW4YASABKAkSMQoEdmFycxgCIAMoCzIjLm5ha2Ft",
            "YS5hcGkuQWNjb3VudEdvb2dsZS5WYXJzRW50cnkaKwoJVmFyc0VudHJ5EgsK",
            "A2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEifAoMQWNjb3VudFN0ZWFt",
            "Eg0KBXRva2VuGAEgASgJEjAKBHZhcnMYAiADKAsyIi5uYWthbWEuYXBpLkFj",
            "Y291bnRTdGVhbS5WYXJzRW50cnkaKwoJVmFyc0VudHJ5EgsKA2tleRgBIAEo",
            "CRINCgV2YWx1ZRgCIAEoCToCOAEiMwoRQWRkRnJpZW5kc1JlcXVlc3QSCwoD",
            "aWRzGAEgAygJEhEKCXVzZXJuYW1lcxgCIAMoCSI6ChRBZGRHcm91cFVzZXJz",
            "UmVxdWVzdBIQCghncm91cF9pZBgBIAEoCRIQCgh1c2VyX2lkcxgCIAMoCSKD",
            "AQoYQXV0aGVudGljYXRlQXBwbGVSZXF1ZXN0EikKB2FjY291bnQYASABKAsy",
            "GC5uYWthbWEuYXBpLkFjY291bnRBcHBsZRIqCgZjcmVhdGUYAiABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuQm9vbFZhbHVlEhAKCHVzZXJuYW1lGAMgASgJIoUB",
            "ChlBdXRoZW50aWNhdGVDdXN0b21SZXF1ZXN0EioKB2FjY291bnQYASABKAsy",
            "GS5uYWthbWEuYXBpLkFjY291bnRDdXN0b20SKgoGY3JlYXRlGAIgASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRIQCgh1c2VybmFtZRgDIAEoCSKF",
            "AQoZQXV0aGVudGljYXRlRGV2aWNlUmVxdWVzdBIqCgdhY2NvdW50GAEgASgL",
            "MhkubmFrYW1hLmFwaS5BY2NvdW50RGV2aWNlEioKBmNyZWF0ZRgCIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSEAoIdXNlcm5hbWUYAyABKAki",
            "gwEKGEF1dGhlbnRpY2F0ZUVtYWlsUmVxdWVzdBIpCgdhY2NvdW50GAEgASgL",
            "MhgubmFrYW1hLmFwaS5BY2NvdW50RW1haWwSKgoGY3JlYXRlGAIgASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRIQCgh1c2VybmFtZRgDIAEoCSKz",
            "AQobQXV0aGVudGljYXRlRmFjZWJvb2tSZXF1ZXN0EiwKB2FjY291bnQYASAB",
            "KAsyGy5uYWthbWEuYXBpLkFjY291bnRGYWNlYm9vaxIqCgZjcmVhdGUYAiAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEhAKCHVzZXJuYW1lGAMg",
            "ASgJEigKBHN5bmMYBCABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVl",
            "Ip8BCiZBdXRoZW50aWNhdGVGYWNlYm9va0luc3RhbnRHYW1lUmVxdWVzdBI3",
            "CgdhY2NvdW50GAEgASgLMiYubmFrYW1hLmFwaS5BY2NvdW50RmFjZWJvb2tJ",
            "bnN0YW50R2FtZRIqCgZjcmVhdGUYAiABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "Qm9vbFZhbHVlEhAKCHVzZXJuYW1lGAMgASgJIo0BCh1BdXRoZW50aWNhdGVH",
            "YW1lQ2VudGVyUmVxdWVzdBIuCgdhY2NvdW50GAEgASgLMh0ubmFrYW1hLmFw",
            "aS5BY2NvdW50R2FtZUNlbnRlchIqCgZjcmVhdGUYAiABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuQm9vbFZhbHVlEhAKCHVzZXJuYW1lGAMgASgJIoUBChlBdXRo",
            "ZW50aWNhdGVHb29nbGVSZXF1ZXN0EioKB2FjY291bnQYASABKAsyGS5uYWth",
            "bWEuYXBpLkFjY291bnRHb29nbGUSKgoGY3JlYXRlGAIgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLkJvb2xWYWx1ZRIQCgh1c2VybmFtZRgDIAEoCSKDAQoYQXV0",
            "aGVudGljYXRlU3RlYW1SZXF1ZXN0EikKB2FjY291bnQYASABKAsyGC5uYWth",
            "bWEuYXBpLkFjY291bnRTdGVhbRIqCgZjcmVhdGUYAiABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuQm9vbFZhbHVlEhAKCHVzZXJuYW1lGAMgASgJIjoKFEJhbkdy",
            "b3VwVXNlcnNSZXF1ZXN0EhAKCGdyb3VwX2lkGAEgASgJEhAKCHVzZXJfaWRz",
            "GAIgAygJIjUKE0Jsb2NrRnJpZW5kc1JlcXVlc3QSCwoDaWRzGAEgAygJEhEK",
            "CXVzZXJuYW1lcxgCIAMoCSL6AgoOQ2hhbm5lbE1lc3NhZ2USEgoKY2hhbm5l",
            "bF9pZBgBIAEoCRISCgptZXNzYWdlX2lkGAIgASgJEikKBGNvZGUYAyABKAsy",
            "Gy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRIRCglzZW5kZXJfaWQYBCAB",
            "KAkSEAoIdXNlcm5hbWUYBSABKAkSDwoHY29udGVudBgGIAEoCRIvCgtjcmVh",
            "dGVfdGltZRgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLwoL",
            "dXBkYXRlX3RpbWUYCCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "Ei4KCnBlcnNpc3RlbnQYCSABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZh",
            "bHVlEhEKCXJvb21fbmFtZRgKIAEoCRIQCghncm91cF9pZBgLIAEoCRITCgt1",
            "c2VyX2lkX29uZRgMIAEoCRITCgt1c2VyX2lkX3R3bxgNIAEoCSJsChJDaGFu",
            "bmVsTWVzc2FnZUxpc3QSLAoIbWVzc2FnZXMYASADKAsyGi5uYWthbWEuYXBp",
            "LkNoYW5uZWxNZXNzYWdlEhMKC25leHRfY3Vyc29yGAIgASgJEhMKC3ByZXZf",
            "Y3Vyc29yGAMgASgJIn4KEkNyZWF0ZUdyb3VwUmVxdWVzdBIMCgRuYW1lGAEg",
            "ASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJEhAKCGxhbmdfdGFnGAMgASgJEhIK",
            "CmF2YXRhcl91cmwYBCABKAkSDAoEb3BlbhgFIAEoCBIRCgltYXhfY291bnQY",
            "BiABKAUiNgoURGVsZXRlRnJpZW5kc1JlcXVlc3QSCwoDaWRzGAEgAygJEhEK",
            "CXVzZXJuYW1lcxgCIAMoCSImChJEZWxldGVHcm91cFJlcXVlc3QSEAoIZ3Jv",
            "dXBfaWQYASABKAkiOAoeRGVsZXRlTGVhZGVyYm9hcmRSZWNvcmRSZXF1ZXN0",
            "EhYKDmxlYWRlcmJvYXJkX2lkGAEgASgJIikKGkRlbGV0ZU5vdGlmaWNhdGlv",
            "bnNSZXF1ZXN0EgsKA2lkcxgBIAMoCSJJChVEZWxldGVTdG9yYWdlT2JqZWN0",
            "SWQSEgoKY29sbGVjdGlvbhgBIAEoCRILCgNrZXkYAiABKAkSDwoHdmVyc2lv",
            "bhgDIAEoCSJUChtEZWxldGVTdG9yYWdlT2JqZWN0c1JlcXVlc3QSNQoKb2Jq",
            "ZWN0X2lkcxgBIAMoCzIhLm5ha2FtYS5hcGkuRGVsZXRlU3RvcmFnZU9iamVj",
            "dElkIsABCgVFdmVudBIMCgRuYW1lGAEgASgJEjUKCnByb3BlcnRpZXMYAiAD",
            "KAsyIS5uYWthbWEuYXBpLkV2ZW50LlByb3BlcnRpZXNFbnRyeRItCgl0aW1l",
            "c3RhbXAYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhAKCGV4",
            "dGVybmFsGAQgASgIGjEKD1Byb3BlcnRpZXNFbnRyeRILCgNrZXkYASABKAkS",
            "DQoFdmFsdWUYAiABKAk6AjgBIs0BCgZGcmllbmQSHgoEdXNlchgBIAEoCzIQ",
            "Lm5ha2FtYS5hcGkuVXNlchIqCgVzdGF0ZRgCIAEoCzIbLmdvb2dsZS5wcm90",
            "b2J1Zi5JbnQzMlZhbHVlEi8KC3VwZGF0ZV90aW1lGAMgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcCJGCgVTdGF0ZRIKCgZGUklFTkQQABIPCgtJ",
            "TlZJVEVfU0VOVBABEhMKD0lOVklURV9SRUNFSVZFRBACEgsKB0JMT0NLRUQQ",
            "AyJBCgpGcmllbmRMaXN0EiMKB2ZyaWVuZHMYASADKAsyEi5uYWthbWEuYXBp",
            "LkZyaWVuZBIOCgZjdXJzb3IYAiABKAkiRwoPR2V0VXNlcnNSZXF1ZXN0EgsK",
            "A2lkcxgBIAMoCRIRCgl1c2VybmFtZXMYAiADKAkSFAoMZmFjZWJvb2tfaWRz",
            "GAMgAygJIrUCCgVHcm91cBIKCgJpZBgBIAEoCRISCgpjcmVhdG9yX2lkGAIg",
            "ASgJEgwKBG5hbWUYAyABKAkSEwoLZGVzY3JpcHRpb24YBCABKAkSEAoIbGFu",
            "Z190YWcYBSABKAkSEAoIbWV0YWRhdGEYBiABKAkSEgoKYXZhdGFyX3VybBgH",
            "IAEoCRIoCgRvcGVuGAggASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1",
            "ZRISCgplZGdlX2NvdW50GAkgASgFEhEKCW1heF9jb3VudBgKIAEoBRIvCgtj",
            "cmVhdGVfdGltZRgLIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "LwoLdXBkYXRlX3RpbWUYDCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0",
            "YW1wIj4KCUdyb3VwTGlzdBIhCgZncm91cHMYASADKAsyES5uYWthbWEuYXBp",
            "Lkdyb3VwEg4KBmN1cnNvchgCIAEoCSL1AQoNR3JvdXBVc2VyTGlzdBI4Cgtn",
            "cm91cF91c2VycxgBIAMoCzIjLm5ha2FtYS5hcGkuR3JvdXBVc2VyTGlzdC5H",
            "cm91cFVzZXISDgoGY3Vyc29yGAIgASgJGpkBCglHcm91cFVzZXISHgoEdXNl",
            "chgBIAEoCzIQLm5ha2FtYS5hcGkuVXNlchIqCgVzdGF0ZRgCIAEoCzIbLmdv",
            "b2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlIkAKBVN0YXRlEg4KClNVUEVSQURN",
            "SU4QABIJCgVBRE1JThABEgoKBk1FTUJFUhACEhAKDEpPSU5fUkVRVUVTVBAD",
            "IncKHEltcG9ydEZhY2Vib29rRnJpZW5kc1JlcXVlc3QSLAoHYWNjb3VudBgB",
            "IAEoCzIbLm5ha2FtYS5hcGkuQWNjb3VudEZhY2Vib29rEikKBXJlc2V0GAIg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZSIkChBKb2luR3JvdXBS",
            "ZXF1ZXN0EhAKCGdyb3VwX2lkGAEgASgJIi4KFUpvaW5Ub3VybmFtZW50UmVx",
            "dWVzdBIVCg10b3VybmFtZW50X2lkGAEgASgJIjsKFUtpY2tHcm91cFVzZXJz",
            "UmVxdWVzdBIQCghncm91cF9pZBgBIAEoCRIQCgh1c2VyX2lkcxgCIAMoCSLr",
            "AgoRTGVhZGVyYm9hcmRSZWNvcmQSFgoObGVhZGVyYm9hcmRfaWQYASABKAkS",
            "EAoIb3duZXJfaWQYAiABKAkSLgoIdXNlcm5hbWUYAyABKAsyHC5nb29nbGUu",
            "cHJvdG9idWYuU3RyaW5nVmFsdWUSDQoFc2NvcmUYBCABKAMSEAoIc3Vic2Nv",
            "cmUYBSABKAMSEQoJbnVtX3Njb3JlGAYgASgFEhAKCG1ldGFkYXRhGAcgASgJ",
            "Ei8KC2NyZWF0ZV90aW1lGAggASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBIvCgt1cGRhdGVfdGltZRgJIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASLwoLZXhwaXJ5X3RpbWUYCiABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuVGltZXN0YW1wEgwKBHJhbmsYCyABKAMSFQoNbWF4X251bV9zY29yZRgM",
            "IAEoDSKnAQoVTGVhZGVyYm9hcmRSZWNvcmRMaXN0Ei4KB3JlY29yZHMYASAD",
            "KAsyHS5uYWthbWEuYXBpLkxlYWRlcmJvYXJkUmVjb3JkEjQKDW93bmVyX3Jl",
            "Y29yZHMYAiADKAsyHS5uYWthbWEuYXBpLkxlYWRlcmJvYXJkUmVjb3JkEhMK",
            "C25leHRfY3Vyc29yGAMgASgJEhMKC3ByZXZfY3Vyc29yGAQgASgJIiUKEUxl",
            "YXZlR3JvdXBSZXF1ZXN0EhAKCGdyb3VwX2lkGAEgASgJIm0KE0xpbmtGYWNl",
            "Ym9va1JlcXVlc3QSLAoHYWNjb3VudBgBIAEoCzIbLm5ha2FtYS5hcGkuQWNj",
            "b3VudEZhY2Vib29rEigKBHN5bmMYBCABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "Qm9vbFZhbHVlIpkBChpMaXN0Q2hhbm5lbE1lc3NhZ2VzUmVxdWVzdBISCgpj",
            "aGFubmVsX2lkGAEgASgJEioKBWxpbWl0GAIgASgLMhsuZ29vZ2xlLnByb3Rv",
            "YnVmLkludDMyVmFsdWUSKwoHZm9yd2FyZBgDIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5Cb29sVmFsdWUSDgoGY3Vyc29yGAQgASgJInwKEkxpc3RGcmllbmRz",
            "UmVxdWVzdBIqCgVsaW1pdBgBIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQz",
            "MlZhbHVlEioKBXN0YXRlGAIgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMy",
            "VmFsdWUSDgoGY3Vyc29yGAMgASgJIl0KEUxpc3RHcm91cHNSZXF1ZXN0EgwK",
            "BG5hbWUYASABKAkSDgoGY3Vyc29yGAIgASgJEioKBWxpbWl0GAMgASgLMhsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUikQEKFUxpc3RHcm91cFVzZXJz",
            "UmVxdWVzdBIQCghncm91cF9pZBgBIAEoCRIqCgVsaW1pdBgCIAEoCzIbLmdv",
            "b2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlEioKBXN0YXRlGAMgASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDMyVmFsdWUSDgoGY3Vyc29yGAQgASgJIq4BCihM",
            "aXN0TGVhZGVyYm9hcmRSZWNvcmRzQXJvdW5kT3duZXJSZXF1ZXN0EhYKDmxl",
            "YWRlcmJvYXJkX2lkGAEgASgJEisKBWxpbWl0GAIgASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLlVJbnQzMlZhbHVlEhAKCG93bmVyX2lkGAMgASgJEisKBmV4cGly",
            "eRgEIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlIrMBCh1MaXN0",
            "TGVhZGVyYm9hcmRSZWNvcmRzUmVxdWVzdBIWCg5sZWFkZXJib2FyZF9pZBgB",
            "IAEoCRIRCglvd25lcl9pZHMYAiADKAkSKgoFbGltaXQYAyABKAsyGy5nb29n",
            "bGUucHJvdG9idWYuSW50MzJWYWx1ZRIOCgZjdXJzb3IYBCABKAkSKwoGZXhw",
            "aXJ5GAUgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUiqwIKEkxp",
            "c3RNYXRjaGVzUmVxdWVzdBIqCgVsaW1pdBgBIAEoCzIbLmdvb2dsZS5wcm90",
            "b2J1Zi5JbnQzMlZhbHVlEjEKDWF1dGhvcml0YXRpdmUYAiABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuQm9vbFZhbHVlEisKBWxhYmVsGAMgASgLMhwuZ29vZ2xl",
            "LnByb3RvYnVmLlN0cmluZ1ZhbHVlEi0KCG1pbl9zaXplGAQgASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDMyVmFsdWUSLQoIbWF4X3NpemUYBSABKAsyGy5n",
            "b29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRIrCgVxdWVyeRgGIAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZSJgChhMaXN0Tm90aWZpY2F0aW9u",
            "c1JlcXVlc3QSKgoFbGltaXQYASABKAsyGy5nb29nbGUucHJvdG9idWYuSW50",
            "MzJWYWx1ZRIYChBjYWNoZWFibGVfY3Vyc29yGAIgASgJInwKGUxpc3RTdG9y",
            "YWdlT2JqZWN0c1JlcXVlc3QSDwoHdXNlcl9pZBgBIAEoCRISCgpjb2xsZWN0",
            "aW9uGAIgASgJEioKBWxpbWl0GAMgASgLMhsuZ29vZ2xlLnByb3RvYnVmLklu",
            "dDMyVmFsdWUSDgoGY3Vyc29yGAQgASgJIqwBCidMaXN0VG91cm5hbWVudFJl",
            "Y29yZHNBcm91bmRPd25lclJlcXVlc3QSFQoNdG91cm5hbWVudF9pZBgBIAEo",
            "CRIrCgVsaW1pdBgCIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5VSW50MzJWYWx1",
            "ZRIQCghvd25lcl9pZBgDIAEoCRIrCgZleHBpcnkYBCABKAsyGy5nb29nbGUu",
            "cHJvdG9idWYuSW50NjRWYWx1ZSKxAQocTGlzdFRvdXJuYW1lbnRSZWNvcmRz",
            "UmVxdWVzdBIVCg10b3VybmFtZW50X2lkGAEgASgJEhEKCW93bmVyX2lkcxgC",
            "IAMoCRIqCgVsaW1pdBgDIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZh",
            "bHVlEg4KBmN1cnNvchgEIAEoCRIrCgZleHBpcnkYBSABKAsyGy5nb29nbGUu",
            "cHJvdG9idWYuSW50NjRWYWx1ZSKgAgoWTGlzdFRvdXJuYW1lbnRzUmVxdWVz",
            "dBI0Cg5jYXRlZ29yeV9zdGFydBgBIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5V",
            "SW50MzJWYWx1ZRIyCgxjYXRlZ29yeV9lbmQYAiABKAsyHC5nb29nbGUucHJv",
            "dG9idWYuVUludDMyVmFsdWUSMAoKc3RhcnRfdGltZRgDIAEoCzIcLmdvb2ds",
            "ZS5wcm90b2J1Zi5VSW50MzJWYWx1ZRIuCghlbmRfdGltZRgEIAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5VSW50MzJWYWx1ZRIqCgVsaW1pdBgGIAEoCzIbLmdv",
            "b2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlEg4KBmN1cnNvchgIIAEoCSKQAQoV",
            "TGlzdFVzZXJHcm91cHNSZXF1ZXN0Eg8KB3VzZXJfaWQYASABKAkSKgoFbGlt",
            "aXQYAiABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRIqCgVzdGF0",
            "ZRgDIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlEg4KBmN1cnNv",
            "chgEIAEoCSJrCgVNYXRjaBIQCghtYXRjaF9pZBgBIAEoCRIVCg1hdXRob3Jp",
            "dGF0aXZlGAIgASgIEisKBWxhYmVsGAMgASgLMhwuZ29vZ2xlLnByb3RvYnVm",
            "LlN0cmluZ1ZhbHVlEgwKBHNpemUYBCABKAUiLwoJTWF0Y2hMaXN0EiIKB21h",
            "dGNoZXMYASADKAsyES5uYWthbWEuYXBpLk1hdGNoIqIBCgxOb3RpZmljYXRp",
            "b24SCgoCaWQYASABKAkSDwoHc3ViamVjdBgCIAEoCRIPCgdjb250ZW50GAMg",
            "ASgJEgwKBGNvZGUYBCABKAUSEQoJc2VuZGVyX2lkGAUgASgJEi8KC2NyZWF0",
            "ZV90aW1lGAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBISCgpw",
            "ZXJzaXN0ZW50GAcgASgIIl0KEE5vdGlmaWNhdGlvbkxpc3QSLwoNbm90aWZp",
            "Y2F0aW9ucxgBIAMoCzIYLm5ha2FtYS5hcGkuTm90aWZpY2F0aW9uEhgKEGNh",
            "Y2hlYWJsZV9jdXJzb3IYAiABKAkiPgoYUHJvbW90ZUdyb3VwVXNlcnNSZXF1",
            "ZXN0EhAKCGdyb3VwX2lkGAEgASgJEhAKCHVzZXJfaWRzGAIgAygJIkcKE1Jl",
            "YWRTdG9yYWdlT2JqZWN0SWQSEgoKY29sbGVjdGlvbhgBIAEoCRILCgNrZXkY",
            "AiABKAkSDwoHdXNlcl9pZBgDIAEoCSJQChlSZWFkU3RvcmFnZU9iamVjdHNS",
            "ZXF1ZXN0EjMKCm9iamVjdF9pZHMYASADKAsyHy5uYWthbWEuYXBpLlJlYWRT",
            "dG9yYWdlT2JqZWN0SWQiNAoDUnBjEgoKAmlkGAEgASgJEg8KB3BheWxvYWQY",
            "AiABKAkSEAoIaHR0cF9rZXkYAyABKAkiKQoHU2Vzc2lvbhIPCgdjcmVhdGVk",
            "GAEgASgIEg0KBXRva2VuGAIgASgJIvYBCg1TdG9yYWdlT2JqZWN0EhIKCmNv",
            "bGxlY3Rpb24YASABKAkSCwoDa2V5GAIgASgJEg8KB3VzZXJfaWQYAyABKAkS",
            "DQoFdmFsdWUYBCABKAkSDwoHdmVyc2lvbhgFIAEoCRIXCg9wZXJtaXNzaW9u",
            "X3JlYWQYBiABKAUSGAoQcGVybWlzc2lvbl93cml0ZRgHIAEoBRIvCgtjcmVh",
            "dGVfdGltZRgIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLwoL",
            "dXBkYXRlX3RpbWUYCSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "IlUKEFN0b3JhZ2VPYmplY3RBY2sSEgoKY29sbGVjdGlvbhgBIAEoCRILCgNr",
            "ZXkYAiABKAkSDwoHdmVyc2lvbhgDIAEoCRIPCgd1c2VyX2lkGAQgASgJIj8K",
            "EVN0b3JhZ2VPYmplY3RBY2tzEioKBGFja3MYASADKAsyHC5uYWthbWEuYXBp",
            "LlN0b3JhZ2VPYmplY3RBY2siPAoOU3RvcmFnZU9iamVjdHMSKgoHb2JqZWN0",
            "cxgBIAMoCzIZLm5ha2FtYS5hcGkuU3RvcmFnZU9iamVjdCJPChFTdG9yYWdl",
            "T2JqZWN0TGlzdBIqCgdvYmplY3RzGAEgAygLMhkubmFrYW1hLmFwaS5TdG9y",
            "YWdlT2JqZWN0Eg4KBmN1cnNvchgCIAEoCSKdAwoKVG91cm5hbWVudBIKCgJp",
            "ZBgBIAEoCRINCgV0aXRsZRgCIAEoCRITCgtkZXNjcmlwdGlvbhgDIAEoCRIQ",
            "CghjYXRlZ29yeRgEIAEoDRISCgpzb3J0X29yZGVyGAUgASgNEgwKBHNpemUY",
            "BiABKA0SEAoIbWF4X3NpemUYByABKA0SFQoNbWF4X251bV9zY29yZRgIIAEo",
            "DRIRCgljYW5fZW50ZXIYCSABKAgSEgoKZW5kX2FjdGl2ZRgKIAEoDRISCgpu",
            "ZXh0X3Jlc2V0GAsgASgNEhAKCG1ldGFkYXRhGAwgASgJEi8KC2NyZWF0ZV90",
            "aW1lGA0gASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIuCgpzdGFy",
            "dF90aW1lGA4gASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIsCghl",
            "bmRfdGltZRgPIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASEAoI",
            "ZHVyYXRpb24YECABKA0SFAoMc3RhcnRfYWN0aXZlGBEgASgNIk0KDlRvdXJu",
            "YW1lbnRMaXN0EisKC3RvdXJuYW1lbnRzGAEgAygLMhYubmFrYW1hLmFwaS5U",
            "b3VybmFtZW50Eg4KBmN1cnNvchgCIAEoCSKmAQoUVG91cm5hbWVudFJlY29y",
            "ZExpc3QSLgoHcmVjb3JkcxgBIAMoCzIdLm5ha2FtYS5hcGkuTGVhZGVyYm9h",
            "cmRSZWNvcmQSNAoNb3duZXJfcmVjb3JkcxgCIAMoCzIdLm5ha2FtYS5hcGku",
            "TGVhZGVyYm9hcmRSZWNvcmQSEwoLbmV4dF9jdXJzb3IYAyABKAkSEwoLcHJl",
            "dl9jdXJzb3IYBCABKAkivAIKFFVwZGF0ZUFjY291bnRSZXF1ZXN0Ei4KCHVz",
            "ZXJuYW1lGAEgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEjIK",
            "DGRpc3BsYXlfbmFtZRgCIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdW",
            "YWx1ZRIwCgphdmF0YXJfdXJsGAMgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0",
            "cmluZ1ZhbHVlEi4KCGxhbmdfdGFnGAQgASgLMhwuZ29vZ2xlLnByb3RvYnVm",
            "LlN0cmluZ1ZhbHVlEi4KCGxvY2F0aW9uGAUgASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLlN0cmluZ1ZhbHVlEi4KCHRpbWV6b25lGAYgASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLlN0cmluZ1ZhbHVlIpECChJVcGRhdGVHcm91cFJlcXVlc3QSEAoI",
            "Z3JvdXBfaWQYASABKAkSKgoEbmFtZRgCIAEoCzIcLmdvb2dsZS5wcm90b2J1",
            "Zi5TdHJpbmdWYWx1ZRIxCgtkZXNjcmlwdGlvbhgDIAEoCzIcLmdvb2dsZS5w",
            "cm90b2J1Zi5TdHJpbmdWYWx1ZRIuCghsYW5nX3RhZxgEIAEoCzIcLmdvb2ds",
            "ZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIwCgphdmF0YXJfdXJsGAUgASgLMhwu",
            "Z29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEigKBG9wZW4YBiABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuQm9vbFZhbHVlIqEDCgRVc2VyEgoKAmlkGAEgASgJ",
            "EhAKCHVzZXJuYW1lGAIgASgJEhQKDGRpc3BsYXlfbmFtZRgDIAEoCRISCgph",
            "dmF0YXJfdXJsGAQgASgJEhAKCGxhbmdfdGFnGAUgASgJEhAKCGxvY2F0aW9u",
            "GAYgASgJEhAKCHRpbWV6b25lGAcgASgJEhAKCG1ldGFkYXRhGAggASgJEhMK",
            "C2ZhY2Vib29rX2lkGAkgASgJEhEKCWdvb2dsZV9pZBgKIAEoCRIVCg1nYW1l",
            "Y2VudGVyX2lkGAsgASgJEhAKCHN0ZWFtX2lkGAwgASgJEg4KBm9ubGluZRgN",
            "IAEoCBISCgplZGdlX2NvdW50GA4gASgFEi8KC2NyZWF0ZV90aW1lGA8gASgL",
            "MhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIvCgt1cGRhdGVfdGltZRgQ",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASIAoYZmFjZWJvb2tf",
            "aW5zdGFudF9nYW1lX2lkGBEgASgJEhAKCGFwcGxlX2lkGBIgASgJIvcBCg1V",
            "c2VyR3JvdXBMaXN0EjgKC3VzZXJfZ3JvdXBzGAEgAygLMiMubmFrYW1hLmFw",
            "aS5Vc2VyR3JvdXBMaXN0LlVzZXJHcm91cBIOCgZjdXJzb3IYAiABKAkamwEK",
            "CVVzZXJHcm91cBIgCgVncm91cBgBIAEoCzIRLm5ha2FtYS5hcGkuR3JvdXAS",
            "KgoFc3RhdGUYAiABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZSJA",
            "CgVTdGF0ZRIOCgpTVVBFUkFETUlOEAASCQoFQURNSU4QARIKCgZNRU1CRVIQ",
            "AhIQCgxKT0lOX1JFUVVFU1QQAyIoCgVVc2VycxIfCgV1c2VycxgBIAMoCzIQ",
            "Lm5ha2FtYS5hcGkuVXNlciLWAQodV3JpdGVMZWFkZXJib2FyZFJlY29yZFJl",
            "cXVlc3QSFgoObGVhZGVyYm9hcmRfaWQYASABKAkSUAoGcmVjb3JkGAIgASgL",
            "MkAubmFrYW1hLmFwaS5Xcml0ZUxlYWRlcmJvYXJkUmVjb3JkUmVxdWVzdC5M",
            "ZWFkZXJib2FyZFJlY29yZFdyaXRlGksKFkxlYWRlcmJvYXJkUmVjb3JkV3Jp",
            "dGUSDQoFc2NvcmUYASABKAMSEAoIc3Vic2NvcmUYAiABKAMSEAoIbWV0YWRh",
            "dGEYAyABKAkiwgEKEldyaXRlU3RvcmFnZU9iamVjdBISCgpjb2xsZWN0aW9u",
            "GAEgASgJEgsKA2tleRgCIAEoCRINCgV2YWx1ZRgDIAEoCRIPCgd2ZXJzaW9u",
            "GAQgASgJEjQKD3Blcm1pc3Npb25fcmVhZBgFIAEoCzIbLmdvb2dsZS5wcm90",
            "b2J1Zi5JbnQzMlZhbHVlEjUKEHBlcm1pc3Npb25fd3JpdGUYBiABKAsyGy5n",
            "b29nbGUucHJvdG9idWYuSW50MzJWYWx1ZSJNChpXcml0ZVN0b3JhZ2VPYmpl",
            "Y3RzUmVxdWVzdBIvCgdvYmplY3RzGAEgAygLMh4ubmFrYW1hLmFwaS5Xcml0",
            "ZVN0b3JhZ2VPYmplY3Qi0QEKHFdyaXRlVG91cm5hbWVudFJlY29yZFJlcXVl",
            "c3QSFQoNdG91cm5hbWVudF9pZBgBIAEoCRJOCgZyZWNvcmQYAiABKAsyPi5u",
            "YWthbWEuYXBpLldyaXRlVG91cm5hbWVudFJlY29yZFJlcXVlc3QuVG91cm5h",
            "bWVudFJlY29yZFdyaXRlGkoKFVRvdXJuYW1lbnRSZWNvcmRXcml0ZRINCgVz",
            "Y29yZRgBIAEoAxIQCghzdWJzY29yZRgCIAEoAxIQCghtZXRhZGF0YRgDIAEo",
            "CUI9Chljb20uaGVyb2ljbGFicy5uYWthbWEuYXBpQglOYWthbWFBcGlQAVoD",
            "YXBpogIETktQQqoCBk5ha2FtYWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Account), global::Nakama.Account.Parser, new[]{ "User", "Wallet", "Email", "Devices", "CustomId", "VerifyTime", "DisableTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AccountApple), global::Nakama.AccountApple.Parser, new[]{ "Token", "Vars" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AccountCustom), global::Nakama.AccountCustom.Parser, new[]{ "Id", "Vars" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AccountDevice), global::Nakama.AccountDevice.Parser, new[]{ "Id", "Vars" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AccountEmail), global::Nakama.AccountEmail.Parser, new[]{ "Email", "Password", "Vars" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AccountFacebook), global::Nakama.AccountFacebook.Parser, new[]{ "Token", "Vars" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AccountFacebookInstantGame), global::Nakama.AccountFacebookInstantGame.Parser, new[]{ "SignedPlayerInfo", "Vars" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AccountGameCenter), global::Nakama.AccountGameCenter.Parser, new[]{ "PlayerId", "BundleId", "TimestampSeconds", "Salt", "Signature", "PublicKeyUrl", "Vars" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AccountGoogle), global::Nakama.AccountGoogle.Parser, new[]{ "Token", "Vars" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AccountSteam), global::Nakama.AccountSteam.Parser, new[]{ "Token", "Vars" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AddFriendsRequest), global::Nakama.AddFriendsRequest.Parser, new[]{ "Ids", "Usernames" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AddGroupUsersRequest), global::Nakama.AddGroupUsersRequest.Parser, new[]{ "GroupId", "UserIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateAppleRequest), global::Nakama.AuthenticateAppleRequest.Parser, new[]{ "Account", "Create", "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateCustomRequest), global::Nakama.AuthenticateCustomRequest.Parser, new[]{ "Account", "Create", "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateDeviceRequest), global::Nakama.AuthenticateDeviceRequest.Parser, new[]{ "Account", "Create", "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateEmailRequest), global::Nakama.AuthenticateEmailRequest.Parser, new[]{ "Account", "Create", "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateFacebookRequest), global::Nakama.AuthenticateFacebookRequest.Parser, new[]{ "Account", "Create", "Username", "Sync" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateFacebookInstantGameRequest), global::Nakama.AuthenticateFacebookInstantGameRequest.Parser, new[]{ "Account", "Create", "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateGameCenterRequest), global::Nakama.AuthenticateGameCenterRequest.Parser, new[]{ "Account", "Create", "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateGoogleRequest), global::Nakama.AuthenticateGoogleRequest.Parser, new[]{ "Account", "Create", "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.AuthenticateSteamRequest), global::Nakama.AuthenticateSteamRequest.Parser, new[]{ "Account", "Create", "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.BanGroupUsersRequest), global::Nakama.BanGroupUsersRequest.Parser, new[]{ "GroupId", "UserIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.BlockFriendsRequest), global::Nakama.BlockFriendsRequest.Parser, new[]{ "Ids", "Usernames" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ChannelMessage), global::Nakama.ChannelMessage.Parser, new[]{ "ChannelId", "MessageId", "Code", "SenderId", "Username", "Content", "CreateTime", "UpdateTime", "Persistent", "RoomName", "GroupId", "UserIdOne", "UserIdTwo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ChannelMessageList), global::Nakama.ChannelMessageList.Parser, new[]{ "Messages", "NextCursor", "PrevCursor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.CreateGroupRequest), global::Nakama.CreateGroupRequest.Parser, new[]{ "Name", "Description", "LangTag", "AvatarUrl", "Open", "MaxCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.DeleteFriendsRequest), global::Nakama.DeleteFriendsRequest.Parser, new[]{ "Ids", "Usernames" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.DeleteGroupRequest), global::Nakama.DeleteGroupRequest.Parser, new[]{ "GroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.DeleteLeaderboardRecordRequest), global::Nakama.DeleteLeaderboardRecordRequest.Parser, new[]{ "LeaderboardId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.DeleteNotificationsRequest), global::Nakama.DeleteNotificationsRequest.Parser, new[]{ "Ids" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.DeleteStorageObjectId), global::Nakama.DeleteStorageObjectId.Parser, new[]{ "Collection", "Key", "Version" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.DeleteStorageObjectsRequest), global::Nakama.DeleteStorageObjectsRequest.Parser, new[]{ "ObjectIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Event), global::Nakama.Event.Parser, new[]{ "Name", "Properties", "Timestamp", "External" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Friend), global::Nakama.Friend.Parser, new[]{ "User", "State", "UpdateTime" }, null, new[]{ typeof(global::Nakama.Friend.Types.State) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.FriendList), global::Nakama.FriendList.Parser, new[]{ "Friends", "Cursor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.GetUsersRequest), global::Nakama.GetUsersRequest.Parser, new[]{ "Ids", "Usernames", "FacebookIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Group), global::Nakama.Group.Parser, new[]{ "Id", "CreatorId", "Name", "Description", "LangTag", "Metadata", "AvatarUrl", "Open", "EdgeCount", "MaxCount", "CreateTime", "UpdateTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.GroupList), global::Nakama.GroupList.Parser, new[]{ "Groups", "Cursor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.GroupUserList), global::Nakama.GroupUserList.Parser, new[]{ "GroupUsers", "Cursor" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.GroupUserList.Types.GroupUser), global::Nakama.GroupUserList.Types.GroupUser.Parser, new[]{ "User", "State" }, null, new[]{ typeof(global::Nakama.GroupUserList.Types.GroupUser.Types.State) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ImportFacebookFriendsRequest), global::Nakama.ImportFacebookFriendsRequest.Parser, new[]{ "Account", "Reset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.JoinGroupRequest), global::Nakama.JoinGroupRequest.Parser, new[]{ "GroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.JoinTournamentRequest), global::Nakama.JoinTournamentRequest.Parser, new[]{ "TournamentId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.KickGroupUsersRequest), global::Nakama.KickGroupUsersRequest.Parser, new[]{ "GroupId", "UserIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.LeaderboardRecord), global::Nakama.LeaderboardRecord.Parser, new[]{ "LeaderboardId", "OwnerId", "Username", "Score", "Subscore", "NumScore", "Metadata", "CreateTime", "UpdateTime", "ExpiryTime", "Rank", "MaxNumScore" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.LeaderboardRecordList), global::Nakama.LeaderboardRecordList.Parser, new[]{ "Records", "OwnerRecords", "NextCursor", "PrevCursor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.LeaveGroupRequest), global::Nakama.LeaveGroupRequest.Parser, new[]{ "GroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.LinkFacebookRequest), global::Nakama.LinkFacebookRequest.Parser, new[]{ "Account", "Sync" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ListChannelMessagesRequest), global::Nakama.ListChannelMessagesRequest.Parser, new[]{ "ChannelId", "Limit", "Forward", "Cursor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ListFriendsRequest), global::Nakama.ListFriendsRequest.Parser, new[]{ "Limit", "State", "Cursor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ListGroupsRequest), global::Nakama.ListGroupsRequest.Parser, new[]{ "Name", "Cursor", "Limit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ListGroupUsersRequest), global::Nakama.ListGroupUsersRequest.Parser, new[]{ "GroupId", "Limit", "State", "Cursor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ListLeaderboardRecordsAroundOwnerRequest), global::Nakama.ListLeaderboardRecordsAroundOwnerRequest.Parser, new[]{ "LeaderboardId", "Limit", "OwnerId", "Expiry" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ListLeaderboardRecordsRequest), global::Nakama.ListLeaderboardRecordsRequest.Parser, new[]{ "LeaderboardId", "OwnerIds", "Limit", "Cursor", "Expiry" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ListMatchesRequest), global::Nakama.ListMatchesRequest.Parser, new[]{ "Limit", "Authoritative", "Label", "MinSize", "MaxSize", "Query" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ListNotificationsRequest), global::Nakama.ListNotificationsRequest.Parser, new[]{ "Limit", "CacheableCursor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ListStorageObjectsRequest), global::Nakama.ListStorageObjectsRequest.Parser, new[]{ "UserId", "Collection", "Limit", "Cursor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ListTournamentRecordsAroundOwnerRequest), global::Nakama.ListTournamentRecordsAroundOwnerRequest.Parser, new[]{ "TournamentId", "Limit", "OwnerId", "Expiry" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ListTournamentRecordsRequest), global::Nakama.ListTournamentRecordsRequest.Parser, new[]{ "TournamentId", "OwnerIds", "Limit", "Cursor", "Expiry" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ListTournamentsRequest), global::Nakama.ListTournamentsRequest.Parser, new[]{ "CategoryStart", "CategoryEnd", "StartTime", "EndTime", "Limit", "Cursor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ListUserGroupsRequest), global::Nakama.ListUserGroupsRequest.Parser, new[]{ "UserId", "Limit", "State", "Cursor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Match), global::Nakama.Match.Parser, new[]{ "MatchId", "Authoritative", "Label", "Size" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchList), global::Nakama.MatchList.Parser, new[]{ "Matches" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Notification), global::Nakama.Notification.Parser, new[]{ "Id", "Subject", "Content", "Code", "SenderId", "CreateTime", "Persistent" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.NotificationList), global::Nakama.NotificationList.Parser, new[]{ "Notifications", "CacheableCursor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.PromoteGroupUsersRequest), global::Nakama.PromoteGroupUsersRequest.Parser, new[]{ "GroupId", "UserIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ReadStorageObjectId), global::Nakama.ReadStorageObjectId.Parser, new[]{ "Collection", "Key", "UserId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ReadStorageObjectsRequest), global::Nakama.ReadStorageObjectsRequest.Parser, new[]{ "ObjectIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Rpc), global::Nakama.Rpc.Parser, new[]{ "Id", "Payload", "HttpKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Session), global::Nakama.Session.Parser, new[]{ "Created", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.StorageObject), global::Nakama.StorageObject.Parser, new[]{ "Collection", "Key", "UserId", "Value", "Version", "PermissionRead", "PermissionWrite", "CreateTime", "UpdateTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.StorageObjectAck), global::Nakama.StorageObjectAck.Parser, new[]{ "Collection", "Key", "Version", "UserId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.StorageObjectAcks), global::Nakama.StorageObjectAcks.Parser, new[]{ "Acks" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.StorageObjects), global::Nakama.StorageObjects.Parser, new[]{ "Objects" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.StorageObjectList), global::Nakama.StorageObjectList.Parser, new[]{ "Objects", "Cursor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Tournament), global::Nakama.Tournament.Parser, new[]{ "Id", "Title", "Description", "Category", "SortOrder", "Size", "MaxSize", "MaxNumScore", "CanEnter", "EndActive", "NextReset", "Metadata", "CreateTime", "StartTime", "EndTime", "Duration", "StartActive" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TournamentList), global::Nakama.TournamentList.Parser, new[]{ "Tournaments", "Cursor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.TournamentRecordList), global::Nakama.TournamentRecordList.Parser, new[]{ "Records", "OwnerRecords", "NextCursor", "PrevCursor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.UpdateAccountRequest), global::Nakama.UpdateAccountRequest.Parser, new[]{ "Username", "DisplayName", "AvatarUrl", "LangTag", "Location", "Timezone" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.UpdateGroupRequest), global::Nakama.UpdateGroupRequest.Parser, new[]{ "GroupId", "Name", "Description", "LangTag", "AvatarUrl", "Open" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.User), global::Nakama.User.Parser, new[]{ "Id", "Username", "DisplayName", "AvatarUrl", "LangTag", "Location", "Timezone", "Metadata", "FacebookId", "GoogleId", "GamecenterId", "SteamId", "Online", "EdgeCount", "CreateTime", "UpdateTime", "FacebookInstantGameId", "AppleId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.UserGroupList), global::Nakama.UserGroupList.Parser, new[]{ "UserGroups", "Cursor" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.UserGroupList.Types.UserGroup), global::Nakama.UserGroupList.Types.UserGroup.Parser, new[]{ "Group", "State" }, null, new[]{ typeof(global::Nakama.UserGroupList.Types.UserGroup.Types.State) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Users), global::Nakama.Users.Parser, new[]{ "Users_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.WriteLeaderboardRecordRequest), global::Nakama.WriteLeaderboardRecordRequest.Parser, new[]{ "LeaderboardId", "Record" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.WriteLeaderboardRecordRequest.Types.LeaderboardRecordWrite), global::Nakama.WriteLeaderboardRecordRequest.Types.LeaderboardRecordWrite.Parser, new[]{ "Score", "Subscore", "Metadata" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.WriteStorageObject), global::Nakama.WriteStorageObject.Parser, new[]{ "Collection", "Key", "Value", "Version", "PermissionRead", "PermissionWrite" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.WriteStorageObjectsRequest), global::Nakama.WriteStorageObjectsRequest.Parser, new[]{ "Objects" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.WriteTournamentRecordRequest), global::Nakama.WriteTournamentRecordRequest.Parser, new[]{ "TournamentId", "Record" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.WriteTournamentRecordRequest.Types.TournamentRecordWrite), global::Nakama.WriteTournamentRecordRequest.Types.TournamentRecordWrite.Parser, new[]{ "Score", "Subscore", "Metadata" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A user with additional account details. Always the current user.
  /// </summary>
  public sealed partial class Account : pb::IMessage<Account>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Account> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account(Account other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      wallet_ = other.wallet_;
      email_ = other.email_;
      devices_ = other.devices_.Clone();
      customId_ = other.customId_;
      verifyTime_ = other.verifyTime_ != null ? other.verifyTime_.Clone() : null;
      disableTime_ = other.disableTime_ != null ? other.disableTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Account Clone() {
      return new Account(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::Nakama.User user_;
    /// <summary>
    /// The user object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "wallet" field.</summary>
    public const int WalletFieldNumber = 2;
    private string wallet_ = "";
    /// <summary>
    /// The user's wallet data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Wallet {
      get { return wallet_; }
      set {
        wallet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 3;
    private string email_ = "";
    /// <summary>
    /// The email address of the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "devices" field.</summary>
    public const int DevicesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Nakama.AccountDevice> _repeated_devices_codec
        = pb::FieldCodec.ForMessage(34, global::Nakama.AccountDevice.Parser);
    private readonly pbc::RepeatedField<global::Nakama.AccountDevice> devices_ = new pbc::RepeatedField<global::Nakama.AccountDevice>();
    /// <summary>
    /// The devices which belong to the user's account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.AccountDevice> Devices {
      get { return devices_; }
    }

    /// <summary>Field number for the "custom_id" field.</summary>
    public const int CustomIdFieldNumber = 5;
    private string customId_ = "";
    /// <summary>
    /// The custom id in the user's account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomId {
      get { return customId_; }
      set {
        customId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "verify_time" field.</summary>
    public const int VerifyTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp verifyTime_;
    /// <summary>
    /// The UNIX time when the user's email was verified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp VerifyTime {
      get { return verifyTime_; }
      set {
        verifyTime_ = value;
      }
    }

    /// <summary>Field number for the "disable_time" field.</summary>
    public const int DisableTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp disableTime_;
    /// <summary>
    /// The UNIX time when the user's account was disabled/banned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DisableTime {
      get { return disableTime_; }
      set {
        disableTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Account);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Account other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (Wallet != other.Wallet) return false;
      if (Email != other.Email) return false;
      if(!devices_.Equals(other.devices_)) return false;
      if (CustomId != other.CustomId) return false;
      if (!object.Equals(VerifyTime, other.VerifyTime)) return false;
      if (!object.Equals(DisableTime, other.DisableTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (Wallet.Length != 0) hash ^= Wallet.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      hash ^= devices_.GetHashCode();
      if (CustomId.Length != 0) hash ^= CustomId.GetHashCode();
      if (verifyTime_ != null) hash ^= VerifyTime.GetHashCode();
      if (disableTime_ != null) hash ^= DisableTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (Wallet.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Wallet);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Email);
      }
      devices_.WriteTo(output, _repeated_devices_codec);
      if (CustomId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CustomId);
      }
      if (verifyTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(VerifyTime);
      }
      if (disableTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DisableTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (Wallet.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Wallet);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Email);
      }
      devices_.WriteTo(ref output, _repeated_devices_codec);
      if (CustomId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CustomId);
      }
      if (verifyTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(VerifyTime);
      }
      if (disableTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DisableTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Wallet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Wallet);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      size += devices_.CalculateSize(_repeated_devices_codec);
      if (CustomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomId);
      }
      if (verifyTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VerifyTime);
      }
      if (disableTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisableTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Account other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::Nakama.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.Wallet.Length != 0) {
        Wallet = other.Wallet;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      devices_.Add(other.devices_);
      if (other.CustomId.Length != 0) {
        CustomId = other.CustomId;
      }
      if (other.verifyTime_ != null) {
        if (verifyTime_ == null) {
          VerifyTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        VerifyTime.MergeFrom(other.VerifyTime);
      }
      if (other.disableTime_ != null) {
        if (disableTime_ == null) {
          DisableTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DisableTime.MergeFrom(other.DisableTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::Nakama.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            Wallet = input.ReadString();
            break;
          }
          case 26: {
            Email = input.ReadString();
            break;
          }
          case 34: {
            devices_.AddEntriesFrom(input, _repeated_devices_codec);
            break;
          }
          case 42: {
            CustomId = input.ReadString();
            break;
          }
          case 50: {
            if (verifyTime_ == null) {
              VerifyTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(VerifyTime);
            break;
          }
          case 58: {
            if (disableTime_ == null) {
              DisableTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DisableTime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::Nakama.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            Wallet = input.ReadString();
            break;
          }
          case 26: {
            Email = input.ReadString();
            break;
          }
          case 34: {
            devices_.AddEntriesFrom(ref input, _repeated_devices_codec);
            break;
          }
          case 42: {
            CustomId = input.ReadString();
            break;
          }
          case 50: {
            if (verifyTime_ == null) {
              VerifyTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(VerifyTime);
            break;
          }
          case 58: {
            if (disableTime_ == null) {
              DisableTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DisableTime);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Send a Apple Sign In token to the server. Used with authenticate/link/unlink.
  /// </summary>
  public sealed partial class AccountApple : pb::IMessage<AccountApple>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccountApple> _parser = new pb::MessageParser<AccountApple>(() => new AccountApple());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountApple> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountApple() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountApple(AccountApple other) : this() {
      token_ = other.token_;
      vars_ = other.vars_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountApple Clone() {
      return new AccountApple(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    /// <summary>
    /// The ID token received from Apple to validate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vars" field.</summary>
    public const int VarsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_vars_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 18);
    private readonly pbc::MapField<string, string> vars_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Extra information that will be bundled in the session token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Vars {
      get { return vars_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountApple);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountApple other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (!Vars.Equals(other.Vars)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      hash ^= Vars.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      vars_.WriteTo(output, _map_vars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      vars_.WriteTo(ref output, _map_vars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      size += vars_.CalculateSize(_map_vars_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountApple other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      vars_.Add(other.vars_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            vars_.AddEntriesFrom(input, _map_vars_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            vars_.AddEntriesFrom(ref input, _map_vars_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Send a custom ID to the server. Used with authenticate/link/unlink.
  /// </summary>
  public sealed partial class AccountCustom : pb::IMessage<AccountCustom>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccountCustom> _parser = new pb::MessageParser<AccountCustom>(() => new AccountCustom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountCustom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountCustom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountCustom(AccountCustom other) : this() {
      id_ = other.id_;
      vars_ = other.vars_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountCustom Clone() {
      return new AccountCustom(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// A custom identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vars" field.</summary>
    public const int VarsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_vars_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 18);
    private readonly pbc::MapField<string, string> vars_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Extra information that will be bundled in the session token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Vars {
      get { return vars_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountCustom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountCustom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!Vars.Equals(other.Vars)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      hash ^= Vars.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      vars_.WriteTo(output, _map_vars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      vars_.WriteTo(ref output, _map_vars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += vars_.CalculateSize(_map_vars_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountCustom other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      vars_.Add(other.vars_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            vars_.AddEntriesFrom(input, _map_vars_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            vars_.AddEntriesFrom(ref input, _map_vars_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Send a device to the server. Used with authenticate/link/unlink and user.
  /// </summary>
  public sealed partial class AccountDevice : pb::IMessage<AccountDevice>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccountDevice> _parser = new pb::MessageParser<AccountDevice>(() => new AccountDevice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountDevice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountDevice(AccountDevice other) : this() {
      id_ = other.id_;
      vars_ = other.vars_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountDevice Clone() {
      return new AccountDevice(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// A device identifier. Should be obtained by a platform-specific device API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vars" field.</summary>
    public const int VarsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_vars_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 18);
    private readonly pbc::MapField<string, string> vars_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Extra information that will be bundled in the session token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Vars {
      get { return vars_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountDevice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!Vars.Equals(other.Vars)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      hash ^= Vars.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      vars_.WriteTo(output, _map_vars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      vars_.WriteTo(ref output, _map_vars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += vars_.CalculateSize(_map_vars_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountDevice other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      vars_.Add(other.vars_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            vars_.AddEntriesFrom(input, _map_vars_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            vars_.AddEntriesFrom(ref input, _map_vars_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Send an email with password to the server. Used with authenticate/link/unlink.
  /// </summary>
  public sealed partial class AccountEmail : pb::IMessage<AccountEmail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccountEmail> _parser = new pb::MessageParser<AccountEmail>(() => new AccountEmail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountEmail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountEmail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountEmail(AccountEmail other) : this() {
      email_ = other.email_;
      password_ = other.password_;
      vars_ = other.vars_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountEmail Clone() {
      return new AccountEmail(this);
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 1;
    private string email_ = "";
    /// <summary>
    /// A valid RFC-5322 email address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    /// <summary>
    /// A password for the user account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vars" field.</summary>
    public const int VarsFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_vars_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 26);
    private readonly pbc::MapField<string, string> vars_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Extra information that will be bundled in the session token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Vars {
      get { return vars_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountEmail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountEmail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Email != other.Email) return false;
      if (Password != other.Password) return false;
      if (!Vars.Equals(other.Vars)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      hash ^= Vars.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      vars_.WriteTo(output, _map_vars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      vars_.WriteTo(ref output, _map_vars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      size += vars_.CalculateSize(_map_vars_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountEmail other) {
      if (other == null) {
        return;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      vars_.Add(other.vars_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            vars_.AddEntriesFrom(input, _map_vars_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            vars_.AddEntriesFrom(ref input, _map_vars_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Send a Facebook token to the server. Used with authenticate/link/unlink.
  /// </summary>
  public sealed partial class AccountFacebook : pb::IMessage<AccountFacebook>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccountFacebook> _parser = new pb::MessageParser<AccountFacebook>(() => new AccountFacebook());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountFacebook> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountFacebook() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountFacebook(AccountFacebook other) : this() {
      token_ = other.token_;
      vars_ = other.vars_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountFacebook Clone() {
      return new AccountFacebook(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    /// <summary>
    /// The OAuth token received from Facebook to access their profile API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vars" field.</summary>
    public const int VarsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_vars_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 18);
    private readonly pbc::MapField<string, string> vars_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Extra information that will be bundled in the session token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Vars {
      get { return vars_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountFacebook);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountFacebook other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (!Vars.Equals(other.Vars)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      hash ^= Vars.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      vars_.WriteTo(output, _map_vars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      vars_.WriteTo(ref output, _map_vars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      size += vars_.CalculateSize(_map_vars_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountFacebook other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      vars_.Add(other.vars_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            vars_.AddEntriesFrom(input, _map_vars_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            vars_.AddEntriesFrom(ref input, _map_vars_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Send a Facebook Instant Game token to the server. Used with authenticate/link/unlink.
  /// </summary>
  public sealed partial class AccountFacebookInstantGame : pb::IMessage<AccountFacebookInstantGame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccountFacebookInstantGame> _parser = new pb::MessageParser<AccountFacebookInstantGame>(() => new AccountFacebookInstantGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountFacebookInstantGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountFacebookInstantGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountFacebookInstantGame(AccountFacebookInstantGame other) : this() {
      signedPlayerInfo_ = other.signedPlayerInfo_;
      vars_ = other.vars_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountFacebookInstantGame Clone() {
      return new AccountFacebookInstantGame(this);
    }

    /// <summary>Field number for the "signed_player_info" field.</summary>
    public const int SignedPlayerInfoFieldNumber = 1;
    private string signedPlayerInfo_ = "";
    /// <summary>
    /// The OAuth token received from a Facebook Instant Game that may be decoded with the Application Secret (must be available with the nakama configuration)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SignedPlayerInfo {
      get { return signedPlayerInfo_; }
      set {
        signedPlayerInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vars" field.</summary>
    public const int VarsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_vars_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 18);
    private readonly pbc::MapField<string, string> vars_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Extra information that will be bundled in the session token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Vars {
      get { return vars_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountFacebookInstantGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountFacebookInstantGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SignedPlayerInfo != other.SignedPlayerInfo) return false;
      if (!Vars.Equals(other.Vars)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SignedPlayerInfo.Length != 0) hash ^= SignedPlayerInfo.GetHashCode();
      hash ^= Vars.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SignedPlayerInfo.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SignedPlayerInfo);
      }
      vars_.WriteTo(output, _map_vars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SignedPlayerInfo.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SignedPlayerInfo);
      }
      vars_.WriteTo(ref output, _map_vars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SignedPlayerInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SignedPlayerInfo);
      }
      size += vars_.CalculateSize(_map_vars_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountFacebookInstantGame other) {
      if (other == null) {
        return;
      }
      if (other.SignedPlayerInfo.Length != 0) {
        SignedPlayerInfo = other.SignedPlayerInfo;
      }
      vars_.Add(other.vars_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SignedPlayerInfo = input.ReadString();
            break;
          }
          case 18: {
            vars_.AddEntriesFrom(input, _map_vars_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SignedPlayerInfo = input.ReadString();
            break;
          }
          case 18: {
            vars_.AddEntriesFrom(ref input, _map_vars_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Send Apple's Game Center account credentials to the server. Used with authenticate/link/unlink.
  /// </summary>
  public sealed partial class AccountGameCenter : pb::IMessage<AccountGameCenter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccountGameCenter> _parser = new pb::MessageParser<AccountGameCenter>(() => new AccountGameCenter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountGameCenter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountGameCenter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountGameCenter(AccountGameCenter other) : this() {
      playerId_ = other.playerId_;
      bundleId_ = other.bundleId_;
      timestampSeconds_ = other.timestampSeconds_;
      salt_ = other.salt_;
      signature_ = other.signature_;
      publicKeyUrl_ = other.publicKeyUrl_;
      vars_ = other.vars_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountGameCenter Clone() {
      return new AccountGameCenter(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private string playerId_ = "";
    /// <summary>
    /// Player ID (generated by GameCenter).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bundle_id" field.</summary>
    public const int BundleIdFieldNumber = 2;
    private string bundleId_ = "";
    /// <summary>
    /// Bundle ID (generated by GameCenter).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BundleId {
      get { return bundleId_; }
      set {
        bundleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp_seconds" field.</summary>
    public const int TimestampSecondsFieldNumber = 3;
    private long timestampSeconds_;
    /// <summary>
    /// Time since UNIX epoch when the signature was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimestampSeconds {
      get { return timestampSeconds_; }
      set {
        timestampSeconds_ = value;
      }
    }

    /// <summary>Field number for the "salt" field.</summary>
    public const int SaltFieldNumber = 4;
    private string salt_ = "";
    /// <summary>
    /// A random "NSString" used to compute the hash and keep it randomized.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Salt {
      get { return salt_; }
      set {
        salt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 5;
    private string signature_ = "";
    /// <summary>
    /// The verification signature data generated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "public_key_url" field.</summary>
    public const int PublicKeyUrlFieldNumber = 6;
    private string publicKeyUrl_ = "";
    /// <summary>
    /// The URL for the public encryption key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicKeyUrl {
      get { return publicKeyUrl_; }
      set {
        publicKeyUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vars" field.</summary>
    public const int VarsFieldNumber = 7;
    private static readonly pbc::MapField<string, string>.Codec _map_vars_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 58);
    private readonly pbc::MapField<string, string> vars_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Extra information that will be bundled in the session token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Vars {
      get { return vars_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountGameCenter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountGameCenter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (BundleId != other.BundleId) return false;
      if (TimestampSeconds != other.TimestampSeconds) return false;
      if (Salt != other.Salt) return false;
      if (Signature != other.Signature) return false;
      if (PublicKeyUrl != other.PublicKeyUrl) return false;
      if (!Vars.Equals(other.Vars)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (BundleId.Length != 0) hash ^= BundleId.GetHashCode();
      if (TimestampSeconds != 0L) hash ^= TimestampSeconds.GetHashCode();
      if (Salt.Length != 0) hash ^= Salt.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (PublicKeyUrl.Length != 0) hash ^= PublicKeyUrl.GetHashCode();
      hash ^= Vars.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (BundleId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BundleId);
      }
      if (TimestampSeconds != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TimestampSeconds);
      }
      if (Salt.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Salt);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Signature);
      }
      if (PublicKeyUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PublicKeyUrl);
      }
      vars_.WriteTo(output, _map_vars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerId);
      }
      if (BundleId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BundleId);
      }
      if (TimestampSeconds != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TimestampSeconds);
      }
      if (Salt.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Salt);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Signature);
      }
      if (PublicKeyUrl.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PublicKeyUrl);
      }
      vars_.WriteTo(ref output, _map_vars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (BundleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BundleId);
      }
      if (TimestampSeconds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimestampSeconds);
      }
      if (Salt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Salt);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
      }
      if (PublicKeyUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicKeyUrl);
      }
      size += vars_.CalculateSize(_map_vars_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountGameCenter other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.BundleId.Length != 0) {
        BundleId = other.BundleId;
      }
      if (other.TimestampSeconds != 0L) {
        TimestampSeconds = other.TimestampSeconds;
      }
      if (other.Salt.Length != 0) {
        Salt = other.Salt;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      if (other.PublicKeyUrl.Length != 0) {
        PublicKeyUrl = other.PublicKeyUrl;
      }
      vars_.Add(other.vars_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 18: {
            BundleId = input.ReadString();
            break;
          }
          case 24: {
            TimestampSeconds = input.ReadInt64();
            break;
          }
          case 34: {
            Salt = input.ReadString();
            break;
          }
          case 42: {
            Signature = input.ReadString();
            break;
          }
          case 50: {
            PublicKeyUrl = input.ReadString();
            break;
          }
          case 58: {
            vars_.AddEntriesFrom(input, _map_vars_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PlayerId = input.ReadString();
            break;
          }
          case 18: {
            BundleId = input.ReadString();
            break;
          }
          case 24: {
            TimestampSeconds = input.ReadInt64();
            break;
          }
          case 34: {
            Salt = input.ReadString();
            break;
          }
          case 42: {
            Signature = input.ReadString();
            break;
          }
          case 50: {
            PublicKeyUrl = input.ReadString();
            break;
          }
          case 58: {
            vars_.AddEntriesFrom(ref input, _map_vars_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Send a Google token to the server. Used with authenticate/link/unlink.
  /// </summary>
  public sealed partial class AccountGoogle : pb::IMessage<AccountGoogle>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccountGoogle> _parser = new pb::MessageParser<AccountGoogle>(() => new AccountGoogle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountGoogle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountGoogle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountGoogle(AccountGoogle other) : this() {
      token_ = other.token_;
      vars_ = other.vars_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountGoogle Clone() {
      return new AccountGoogle(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    /// <summary>
    /// The OAuth token received from Google to access their profile API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vars" field.</summary>
    public const int VarsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_vars_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 18);
    private readonly pbc::MapField<string, string> vars_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Extra information that will be bundled in the session token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Vars {
      get { return vars_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountGoogle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountGoogle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (!Vars.Equals(other.Vars)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      hash ^= Vars.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      vars_.WriteTo(output, _map_vars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      vars_.WriteTo(ref output, _map_vars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      size += vars_.CalculateSize(_map_vars_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountGoogle other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      vars_.Add(other.vars_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            vars_.AddEntriesFrom(input, _map_vars_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            vars_.AddEntriesFrom(ref input, _map_vars_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Send a Steam token to the server. Used with authenticate/link/unlink.
  /// </summary>
  public sealed partial class AccountSteam : pb::IMessage<AccountSteam>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccountSteam> _parser = new pb::MessageParser<AccountSteam>(() => new AccountSteam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountSteam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountSteam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountSteam(AccountSteam other) : this() {
      token_ = other.token_;
      vars_ = other.vars_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountSteam Clone() {
      return new AccountSteam(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    /// <summary>
    /// The account token received from Steam to access their profile API.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vars" field.</summary>
    public const int VarsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_vars_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 18);
    private readonly pbc::MapField<string, string> vars_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Extra information that will be bundled in the session token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Vars {
      get { return vars_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountSteam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountSteam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (!Vars.Equals(other.Vars)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      hash ^= Vars.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      vars_.WriteTo(output, _map_vars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      vars_.WriteTo(ref output, _map_vars_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      size += vars_.CalculateSize(_map_vars_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountSteam other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      vars_.Add(other.vars_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            vars_.AddEntriesFrom(input, _map_vars_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 18: {
            vars_.AddEntriesFrom(ref input, _map_vars_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Add one or more friends to the current user.
  /// </summary>
  public sealed partial class AddFriendsRequest : pb::IMessage<AddFriendsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AddFriendsRequest> _parser = new pb::MessageParser<AddFriendsRequest>(() => new AddFriendsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddFriendsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddFriendsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddFriendsRequest(AddFriendsRequest other) : this() {
      ids_ = other.ids_.Clone();
      usernames_ = other.usernames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddFriendsRequest Clone() {
      return new AddFriendsRequest(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_ids_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> ids_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The account id of a user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "usernames" field.</summary>
    public const int UsernamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_usernames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> usernames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The account username of a user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Usernames {
      get { return usernames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddFriendsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddFriendsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      if(!usernames_.Equals(other.usernames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      hash ^= usernames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      ids_.WriteTo(output, _repeated_ids_codec);
      usernames_.WriteTo(output, _repeated_usernames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      ids_.WriteTo(ref output, _repeated_ids_codec);
      usernames_.WriteTo(ref output, _repeated_usernames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      size += usernames_.CalculateSize(_repeated_usernames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddFriendsRequest other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
      usernames_.Add(other.usernames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 18: {
            usernames_.AddEntriesFrom(input, _repeated_usernames_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ids_.AddEntriesFrom(ref input, _repeated_ids_codec);
            break;
          }
          case 18: {
            usernames_.AddEntriesFrom(ref input, _repeated_usernames_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Add users to a group.
  /// </summary>
  public sealed partial class AddGroupUsersRequest : pb::IMessage<AddGroupUsersRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AddGroupUsersRequest> _parser = new pb::MessageParser<AddGroupUsersRequest>(() => new AddGroupUsersRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddGroupUsersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddGroupUsersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddGroupUsersRequest(AddGroupUsersRequest other) : this() {
      groupId_ = other.groupId_;
      userIds_ = other.userIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddGroupUsersRequest Clone() {
      return new AddGroupUsersRequest(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    /// The group to add users to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_ids" field.</summary>
    public const int UserIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_userIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> userIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The users to add.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UserIds {
      get { return userIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddGroupUsersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddGroupUsersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if(!userIds_.Equals(other.userIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      hash ^= userIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      userIds_.WriteTo(output, _repeated_userIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      userIds_.WriteTo(ref output, _repeated_userIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddGroupUsersRequest other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      userIds_.Add(other.userIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 18: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 18: {
            userIds_.AddEntriesFrom(ref input, _repeated_userIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Authenticate against the server with Apple Sign In.
  /// </summary>
  public sealed partial class AuthenticateAppleRequest : pb::IMessage<AuthenticateAppleRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AuthenticateAppleRequest> _parser = new pb::MessageParser<AuthenticateAppleRequest>(() => new AuthenticateAppleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthenticateAppleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateAppleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateAppleRequest(AuthenticateAppleRequest other) : this() {
      account_ = other.account_ != null ? other.account_.Clone() : null;
      Create = other.Create;
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateAppleRequest Clone() {
      return new AuthenticateAppleRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::Nakama.AccountApple account_;
    /// <summary>
    /// The Apple account details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AccountApple Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "create" field.</summary>
    public const int CreateFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_create_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? create_;
    /// <summary>
    /// Register the account if the user does not already exist.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Create {
      get { return create_; }
      set {
        create_ = value;
      }
    }


    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 3;
    private string username_ = "";
    /// <summary>
    /// Set the username on the account at register. Must be unique.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthenticateAppleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthenticateAppleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if (Create != other.Create) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account_ != null) hash ^= Account.GetHashCode();
      if (create_ != null) hash ^= Create.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (create_ != null) {
        _single_create_codec.WriteTagAndValue(output, Create);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (create_ != null) {
        _single_create_codec.WriteTagAndValue(ref output, Create);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (create_ != null) {
        size += _single_create_codec.CalculateSizeWithTag(Create);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthenticateAppleRequest other) {
      if (other == null) {
        return;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::Nakama.AccountApple();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.create_ != null) {
        if (create_ == null || other.Create != false) {
          Create = other.Create;
        }
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountApple();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_create_codec.Read(input);
            if (create_ == null || value != false) {
              Create = value;
            }
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountApple();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_create_codec.Read(ref input);
            if (create_ == null || value != false) {
              Create = value;
            }
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Authenticate against the server with a custom ID.
  /// </summary>
  public sealed partial class AuthenticateCustomRequest : pb::IMessage<AuthenticateCustomRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AuthenticateCustomRequest> _parser = new pb::MessageParser<AuthenticateCustomRequest>(() => new AuthenticateCustomRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthenticateCustomRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateCustomRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateCustomRequest(AuthenticateCustomRequest other) : this() {
      account_ = other.account_ != null ? other.account_.Clone() : null;
      Create = other.Create;
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateCustomRequest Clone() {
      return new AuthenticateCustomRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::Nakama.AccountCustom account_;
    /// <summary>
    /// The custom account details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AccountCustom Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "create" field.</summary>
    public const int CreateFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_create_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? create_;
    /// <summary>
    /// Register the account if the user does not already exist.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Create {
      get { return create_; }
      set {
        create_ = value;
      }
    }


    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 3;
    private string username_ = "";
    /// <summary>
    /// Set the username on the account at register. Must be unique.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthenticateCustomRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthenticateCustomRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if (Create != other.Create) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account_ != null) hash ^= Account.GetHashCode();
      if (create_ != null) hash ^= Create.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (create_ != null) {
        _single_create_codec.WriteTagAndValue(output, Create);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (create_ != null) {
        _single_create_codec.WriteTagAndValue(ref output, Create);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (create_ != null) {
        size += _single_create_codec.CalculateSizeWithTag(Create);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthenticateCustomRequest other) {
      if (other == null) {
        return;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::Nakama.AccountCustom();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.create_ != null) {
        if (create_ == null || other.Create != false) {
          Create = other.Create;
        }
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountCustom();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_create_codec.Read(input);
            if (create_ == null || value != false) {
              Create = value;
            }
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountCustom();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_create_codec.Read(ref input);
            if (create_ == null || value != false) {
              Create = value;
            }
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Authenticate against the server with a device ID.
  /// </summary>
  public sealed partial class AuthenticateDeviceRequest : pb::IMessage<AuthenticateDeviceRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AuthenticateDeviceRequest> _parser = new pb::MessageParser<AuthenticateDeviceRequest>(() => new AuthenticateDeviceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthenticateDeviceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateDeviceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateDeviceRequest(AuthenticateDeviceRequest other) : this() {
      account_ = other.account_ != null ? other.account_.Clone() : null;
      Create = other.Create;
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateDeviceRequest Clone() {
      return new AuthenticateDeviceRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::Nakama.AccountDevice account_;
    /// <summary>
    /// The device account details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AccountDevice Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "create" field.</summary>
    public const int CreateFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_create_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? create_;
    /// <summary>
    /// Register the account if the user does not already exist.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Create {
      get { return create_; }
      set {
        create_ = value;
      }
    }


    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 3;
    private string username_ = "";
    /// <summary>
    /// Set the username on the account at register. Must be unique.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthenticateDeviceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthenticateDeviceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if (Create != other.Create) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account_ != null) hash ^= Account.GetHashCode();
      if (create_ != null) hash ^= Create.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (create_ != null) {
        _single_create_codec.WriteTagAndValue(output, Create);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (create_ != null) {
        _single_create_codec.WriteTagAndValue(ref output, Create);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (create_ != null) {
        size += _single_create_codec.CalculateSizeWithTag(Create);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthenticateDeviceRequest other) {
      if (other == null) {
        return;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::Nakama.AccountDevice();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.create_ != null) {
        if (create_ == null || other.Create != false) {
          Create = other.Create;
        }
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountDevice();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_create_codec.Read(input);
            if (create_ == null || value != false) {
              Create = value;
            }
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountDevice();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_create_codec.Read(ref input);
            if (create_ == null || value != false) {
              Create = value;
            }
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Authenticate against the server with email+password.
  /// </summary>
  public sealed partial class AuthenticateEmailRequest : pb::IMessage<AuthenticateEmailRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AuthenticateEmailRequest> _parser = new pb::MessageParser<AuthenticateEmailRequest>(() => new AuthenticateEmailRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthenticateEmailRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateEmailRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateEmailRequest(AuthenticateEmailRequest other) : this() {
      account_ = other.account_ != null ? other.account_.Clone() : null;
      Create = other.Create;
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateEmailRequest Clone() {
      return new AuthenticateEmailRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::Nakama.AccountEmail account_;
    /// <summary>
    /// The email account details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AccountEmail Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "create" field.</summary>
    public const int CreateFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_create_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? create_;
    /// <summary>
    /// Register the account if the user does not already exist.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Create {
      get { return create_; }
      set {
        create_ = value;
      }
    }


    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 3;
    private string username_ = "";
    /// <summary>
    /// Set the username on the account at register. Must be unique.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthenticateEmailRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthenticateEmailRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if (Create != other.Create) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account_ != null) hash ^= Account.GetHashCode();
      if (create_ != null) hash ^= Create.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (create_ != null) {
        _single_create_codec.WriteTagAndValue(output, Create);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (create_ != null) {
        _single_create_codec.WriteTagAndValue(ref output, Create);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (create_ != null) {
        size += _single_create_codec.CalculateSizeWithTag(Create);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthenticateEmailRequest other) {
      if (other == null) {
        return;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::Nakama.AccountEmail();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.create_ != null) {
        if (create_ == null || other.Create != false) {
          Create = other.Create;
        }
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountEmail();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_create_codec.Read(input);
            if (create_ == null || value != false) {
              Create = value;
            }
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountEmail();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_create_codec.Read(ref input);
            if (create_ == null || value != false) {
              Create = value;
            }
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Authenticate against the server with Facebook.
  /// </summary>
  public sealed partial class AuthenticateFacebookRequest : pb::IMessage<AuthenticateFacebookRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AuthenticateFacebookRequest> _parser = new pb::MessageParser<AuthenticateFacebookRequest>(() => new AuthenticateFacebookRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthenticateFacebookRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateFacebookRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateFacebookRequest(AuthenticateFacebookRequest other) : this() {
      account_ = other.account_ != null ? other.account_.Clone() : null;
      Create = other.Create;
      username_ = other.username_;
      Sync = other.Sync;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateFacebookRequest Clone() {
      return new AuthenticateFacebookRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::Nakama.AccountFacebook account_;
    /// <summary>
    /// The Facebook account details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AccountFacebook Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "create" field.</summary>
    public const int CreateFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_create_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? create_;
    /// <summary>
    /// Register the account if the user does not already exist.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Create {
      get { return create_; }
      set {
        create_ = value;
      }
    }


    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 3;
    private string username_ = "";
    /// <summary>
    /// Set the username on the account at register. Must be unique.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sync" field.</summary>
    public const int SyncFieldNumber = 4;
    private static readonly pb::FieldCodec<bool?> _single_sync_codec = pb::FieldCodec.ForStructWrapper<bool>(34);
    private bool? sync_;
    /// <summary>
    /// Import Facebook friends for the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Sync {
      get { return sync_; }
      set {
        sync_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthenticateFacebookRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthenticateFacebookRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if (Create != other.Create) return false;
      if (Username != other.Username) return false;
      if (Sync != other.Sync) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account_ != null) hash ^= Account.GetHashCode();
      if (create_ != null) hash ^= Create.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (sync_ != null) hash ^= Sync.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (create_ != null) {
        _single_create_codec.WriteTagAndValue(output, Create);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (sync_ != null) {
        _single_sync_codec.WriteTagAndValue(output, Sync);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (create_ != null) {
        _single_create_codec.WriteTagAndValue(ref output, Create);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (sync_ != null) {
        _single_sync_codec.WriteTagAndValue(ref output, Sync);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (create_ != null) {
        size += _single_create_codec.CalculateSizeWithTag(Create);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (sync_ != null) {
        size += _single_sync_codec.CalculateSizeWithTag(Sync);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthenticateFacebookRequest other) {
      if (other == null) {
        return;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::Nakama.AccountFacebook();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.create_ != null) {
        if (create_ == null || other.Create != false) {
          Create = other.Create;
        }
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.sync_ != null) {
        if (sync_ == null || other.Sync != false) {
          Sync = other.Sync;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountFacebook();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_create_codec.Read(input);
            if (create_ == null || value != false) {
              Create = value;
            }
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
          case 34: {
            bool? value = _single_sync_codec.Read(input);
            if (sync_ == null || value != false) {
              Sync = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountFacebook();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_create_codec.Read(ref input);
            if (create_ == null || value != false) {
              Create = value;
            }
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
          case 34: {
            bool? value = _single_sync_codec.Read(ref input);
            if (sync_ == null || value != false) {
              Sync = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Authenticate against the server with Facebook Instant Game token.
  /// </summary>
  public sealed partial class AuthenticateFacebookInstantGameRequest : pb::IMessage<AuthenticateFacebookInstantGameRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AuthenticateFacebookInstantGameRequest> _parser = new pb::MessageParser<AuthenticateFacebookInstantGameRequest>(() => new AuthenticateFacebookInstantGameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthenticateFacebookInstantGameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateFacebookInstantGameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateFacebookInstantGameRequest(AuthenticateFacebookInstantGameRequest other) : this() {
      account_ = other.account_ != null ? other.account_.Clone() : null;
      Create = other.Create;
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateFacebookInstantGameRequest Clone() {
      return new AuthenticateFacebookInstantGameRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::Nakama.AccountFacebookInstantGame account_;
    /// <summary>
    /// The Facebook Instant Game account details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AccountFacebookInstantGame Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "create" field.</summary>
    public const int CreateFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_create_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? create_;
    /// <summary>
    /// Register the account if the user does not already exist.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Create {
      get { return create_; }
      set {
        create_ = value;
      }
    }


    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 3;
    private string username_ = "";
    /// <summary>
    /// Set the username on the account at register. Must be unique.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthenticateFacebookInstantGameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthenticateFacebookInstantGameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if (Create != other.Create) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account_ != null) hash ^= Account.GetHashCode();
      if (create_ != null) hash ^= Create.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (create_ != null) {
        _single_create_codec.WriteTagAndValue(output, Create);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (create_ != null) {
        _single_create_codec.WriteTagAndValue(ref output, Create);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (create_ != null) {
        size += _single_create_codec.CalculateSizeWithTag(Create);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthenticateFacebookInstantGameRequest other) {
      if (other == null) {
        return;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::Nakama.AccountFacebookInstantGame();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.create_ != null) {
        if (create_ == null || other.Create != false) {
          Create = other.Create;
        }
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountFacebookInstantGame();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_create_codec.Read(input);
            if (create_ == null || value != false) {
              Create = value;
            }
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountFacebookInstantGame();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_create_codec.Read(ref input);
            if (create_ == null || value != false) {
              Create = value;
            }
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Authenticate against the server with Apple's Game Center.
  /// </summary>
  public sealed partial class AuthenticateGameCenterRequest : pb::IMessage<AuthenticateGameCenterRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AuthenticateGameCenterRequest> _parser = new pb::MessageParser<AuthenticateGameCenterRequest>(() => new AuthenticateGameCenterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthenticateGameCenterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateGameCenterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateGameCenterRequest(AuthenticateGameCenterRequest other) : this() {
      account_ = other.account_ != null ? other.account_.Clone() : null;
      Create = other.Create;
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateGameCenterRequest Clone() {
      return new AuthenticateGameCenterRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::Nakama.AccountGameCenter account_;
    /// <summary>
    /// The Game Center account details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AccountGameCenter Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "create" field.</summary>
    public const int CreateFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_create_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? create_;
    /// <summary>
    /// Register the account if the user does not already exist.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Create {
      get { return create_; }
      set {
        create_ = value;
      }
    }


    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 3;
    private string username_ = "";
    /// <summary>
    /// Set the username on the account at register. Must be unique.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthenticateGameCenterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthenticateGameCenterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if (Create != other.Create) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account_ != null) hash ^= Account.GetHashCode();
      if (create_ != null) hash ^= Create.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (create_ != null) {
        _single_create_codec.WriteTagAndValue(output, Create);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (create_ != null) {
        _single_create_codec.WriteTagAndValue(ref output, Create);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (create_ != null) {
        size += _single_create_codec.CalculateSizeWithTag(Create);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthenticateGameCenterRequest other) {
      if (other == null) {
        return;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::Nakama.AccountGameCenter();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.create_ != null) {
        if (create_ == null || other.Create != false) {
          Create = other.Create;
        }
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountGameCenter();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_create_codec.Read(input);
            if (create_ == null || value != false) {
              Create = value;
            }
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountGameCenter();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_create_codec.Read(ref input);
            if (create_ == null || value != false) {
              Create = value;
            }
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Authenticate against the server with Google.
  /// </summary>
  public sealed partial class AuthenticateGoogleRequest : pb::IMessage<AuthenticateGoogleRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AuthenticateGoogleRequest> _parser = new pb::MessageParser<AuthenticateGoogleRequest>(() => new AuthenticateGoogleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthenticateGoogleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateGoogleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateGoogleRequest(AuthenticateGoogleRequest other) : this() {
      account_ = other.account_ != null ? other.account_.Clone() : null;
      Create = other.Create;
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateGoogleRequest Clone() {
      return new AuthenticateGoogleRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::Nakama.AccountGoogle account_;
    /// <summary>
    /// The Google account details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AccountGoogle Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "create" field.</summary>
    public const int CreateFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_create_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? create_;
    /// <summary>
    /// Register the account if the user does not already exist.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Create {
      get { return create_; }
      set {
        create_ = value;
      }
    }


    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 3;
    private string username_ = "";
    /// <summary>
    /// Set the username on the account at register. Must be unique.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthenticateGoogleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthenticateGoogleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if (Create != other.Create) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account_ != null) hash ^= Account.GetHashCode();
      if (create_ != null) hash ^= Create.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (create_ != null) {
        _single_create_codec.WriteTagAndValue(output, Create);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (create_ != null) {
        _single_create_codec.WriteTagAndValue(ref output, Create);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (create_ != null) {
        size += _single_create_codec.CalculateSizeWithTag(Create);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthenticateGoogleRequest other) {
      if (other == null) {
        return;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::Nakama.AccountGoogle();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.create_ != null) {
        if (create_ == null || other.Create != false) {
          Create = other.Create;
        }
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountGoogle();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_create_codec.Read(input);
            if (create_ == null || value != false) {
              Create = value;
            }
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountGoogle();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_create_codec.Read(ref input);
            if (create_ == null || value != false) {
              Create = value;
            }
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Authenticate against the server with Steam.
  /// </summary>
  public sealed partial class AuthenticateSteamRequest : pb::IMessage<AuthenticateSteamRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AuthenticateSteamRequest> _parser = new pb::MessageParser<AuthenticateSteamRequest>(() => new AuthenticateSteamRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthenticateSteamRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateSteamRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateSteamRequest(AuthenticateSteamRequest other) : this() {
      account_ = other.account_ != null ? other.account_.Clone() : null;
      Create = other.Create;
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateSteamRequest Clone() {
      return new AuthenticateSteamRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::Nakama.AccountSteam account_;
    /// <summary>
    /// The Steam account details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AccountSteam Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "create" field.</summary>
    public const int CreateFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_create_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? create_;
    /// <summary>
    /// Register the account if the user does not already exist.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Create {
      get { return create_; }
      set {
        create_ = value;
      }
    }


    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 3;
    private string username_ = "";
    /// <summary>
    /// Set the username on the account at register. Must be unique.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthenticateSteamRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthenticateSteamRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if (Create != other.Create) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account_ != null) hash ^= Account.GetHashCode();
      if (create_ != null) hash ^= Create.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (create_ != null) {
        _single_create_codec.WriteTagAndValue(output, Create);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (create_ != null) {
        _single_create_codec.WriteTagAndValue(ref output, Create);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (create_ != null) {
        size += _single_create_codec.CalculateSizeWithTag(Create);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthenticateSteamRequest other) {
      if (other == null) {
        return;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::Nakama.AccountSteam();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.create_ != null) {
        if (create_ == null || other.Create != false) {
          Create = other.Create;
        }
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountSteam();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_create_codec.Read(input);
            if (create_ == null || value != false) {
              Create = value;
            }
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountSteam();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_create_codec.Read(ref input);
            if (create_ == null || value != false) {
              Create = value;
            }
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Ban users from a group.
  /// </summary>
  public sealed partial class BanGroupUsersRequest : pb::IMessage<BanGroupUsersRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BanGroupUsersRequest> _parser = new pb::MessageParser<BanGroupUsersRequest>(() => new BanGroupUsersRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BanGroupUsersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BanGroupUsersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BanGroupUsersRequest(BanGroupUsersRequest other) : this() {
      groupId_ = other.groupId_;
      userIds_ = other.userIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BanGroupUsersRequest Clone() {
      return new BanGroupUsersRequest(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    /// The group to ban users from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_ids" field.</summary>
    public const int UserIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_userIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> userIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The users to ban.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UserIds {
      get { return userIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BanGroupUsersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BanGroupUsersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if(!userIds_.Equals(other.userIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      hash ^= userIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      userIds_.WriteTo(output, _repeated_userIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      userIds_.WriteTo(ref output, _repeated_userIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BanGroupUsersRequest other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      userIds_.Add(other.userIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 18: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 18: {
            userIds_.AddEntriesFrom(ref input, _repeated_userIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Block one or more friends for the current user.
  /// </summary>
  public sealed partial class BlockFriendsRequest : pb::IMessage<BlockFriendsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BlockFriendsRequest> _parser = new pb::MessageParser<BlockFriendsRequest>(() => new BlockFriendsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockFriendsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockFriendsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockFriendsRequest(BlockFriendsRequest other) : this() {
      ids_ = other.ids_.Clone();
      usernames_ = other.usernames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockFriendsRequest Clone() {
      return new BlockFriendsRequest(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_ids_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> ids_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The account id of a user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "usernames" field.</summary>
    public const int UsernamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_usernames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> usernames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The account username of a user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Usernames {
      get { return usernames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockFriendsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockFriendsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      if(!usernames_.Equals(other.usernames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      hash ^= usernames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      ids_.WriteTo(output, _repeated_ids_codec);
      usernames_.WriteTo(output, _repeated_usernames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      ids_.WriteTo(ref output, _repeated_ids_codec);
      usernames_.WriteTo(ref output, _repeated_usernames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      size += usernames_.CalculateSize(_repeated_usernames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockFriendsRequest other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
      usernames_.Add(other.usernames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 18: {
            usernames_.AddEntriesFrom(input, _repeated_usernames_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ids_.AddEntriesFrom(ref input, _repeated_ids_codec);
            break;
          }
          case 18: {
            usernames_.AddEntriesFrom(ref input, _repeated_usernames_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A message sent on a channel.
  /// </summary>
  public sealed partial class ChannelMessage : pb::IMessage<ChannelMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelMessage> _parser = new pb::MessageParser<ChannelMessage>(() => new ChannelMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessage(ChannelMessage other) : this() {
      channelId_ = other.channelId_;
      messageId_ = other.messageId_;
      Code = other.Code;
      senderId_ = other.senderId_;
      username_ = other.username_;
      content_ = other.content_;
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      updateTime_ = other.updateTime_ != null ? other.updateTime_.Clone() : null;
      Persistent = other.Persistent;
      roomName_ = other.roomName_;
      groupId_ = other.groupId_;
      userIdOne_ = other.userIdOne_;
      userIdTwo_ = other.userIdTwo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessage Clone() {
      return new ChannelMessage(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private string channelId_ = "";
    /// <summary>
    /// The channel this message belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelId {
      get { return channelId_; }
      set {
        channelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 2;
    private string messageId_ = "";
    /// <summary>
    /// The unique ID of this message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private static readonly pb::FieldCodec<int?> _single_code_codec = pb::FieldCodec.ForStructWrapper<int>(26);
    private int? code_;
    /// <summary>
    /// The code representing a message type or category.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }


    /// <summary>Field number for the "sender_id" field.</summary>
    public const int SenderIdFieldNumber = 4;
    private string senderId_ = "";
    /// <summary>
    /// Message sender, usually a user ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderId {
      get { return senderId_; }
      set {
        senderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 5;
    private string username_ = "";
    /// <summary>
    /// The username of the message sender, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 6;
    private string content_ = "";
    /// <summary>
    /// The content payload.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// The UNIX time when the message was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
    /// <summary>
    /// The UNIX time when the message was last updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "persistent" field.</summary>
    public const int PersistentFieldNumber = 9;
    private static readonly pb::FieldCodec<bool?> _single_persistent_codec = pb::FieldCodec.ForStructWrapper<bool>(74);
    private bool? persistent_;
    /// <summary>
    /// True if the message was persisted to the channel's history, false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Persistent {
      get { return persistent_; }
      set {
        persistent_ = value;
      }
    }


    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 10;
    private string roomName_ = "";
    /// <summary>
    /// The name of the chat room, or an empty string if this message was not sent through a chat room.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 11;
    private string groupId_ = "";
    /// <summary>
    /// The ID of the group, or an empty string if this message was not sent through a group channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id_one" field.</summary>
    public const int UserIdOneFieldNumber = 12;
    private string userIdOne_ = "";
    /// <summary>
    /// The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserIdOne {
      get { return userIdOne_; }
      set {
        userIdOne_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id_two" field.</summary>
    public const int UserIdTwoFieldNumber = 13;
    private string userIdTwo_ = "";
    /// <summary>
    /// The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserIdTwo {
      get { return userIdTwo_; }
      set {
        userIdTwo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      if (MessageId != other.MessageId) return false;
      if (Code != other.Code) return false;
      if (SenderId != other.SenderId) return false;
      if (Username != other.Username) return false;
      if (Content != other.Content) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
      if (Persistent != other.Persistent) return false;
      if (RoomName != other.RoomName) return false;
      if (GroupId != other.GroupId) return false;
      if (UserIdOne != other.UserIdOne) return false;
      if (UserIdTwo != other.UserIdTwo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId.Length != 0) hash ^= ChannelId.GetHashCode();
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (code_ != null) hash ^= Code.GetHashCode();
      if (SenderId.Length != 0) hash ^= SenderId.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
      if (persistent_ != null) hash ^= Persistent.GetHashCode();
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (UserIdOne.Length != 0) hash ^= UserIdOne.GetHashCode();
      if (UserIdTwo.Length != 0) hash ^= UserIdTwo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChannelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelId);
      }
      if (MessageId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MessageId);
      }
      if (code_ != null) {
        _single_code_codec.WriteTagAndValue(output, Code);
      }
      if (SenderId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SenderId);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Username);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Content);
      }
      if (createTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(UpdateTime);
      }
      if (persistent_ != null) {
        _single_persistent_codec.WriteTagAndValue(output, Persistent);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RoomName);
      }
      if (GroupId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(GroupId);
      }
      if (UserIdOne.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(UserIdOne);
      }
      if (UserIdTwo.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(UserIdTwo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChannelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelId);
      }
      if (MessageId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MessageId);
      }
      if (code_ != null) {
        _single_code_codec.WriteTagAndValue(ref output, Code);
      }
      if (SenderId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SenderId);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Username);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Content);
      }
      if (createTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(UpdateTime);
      }
      if (persistent_ != null) {
        _single_persistent_codec.WriteTagAndValue(ref output, Persistent);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RoomName);
      }
      if (GroupId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(GroupId);
      }
      if (UserIdOne.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(UserIdOne);
      }
      if (UserIdTwo.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(UserIdTwo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelId);
      }
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (code_ != null) {
        size += _single_code_codec.CalculateSizeWithTag(Code);
      }
      if (SenderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderId);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (updateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
      }
      if (persistent_ != null) {
        size += _single_persistent_codec.CalculateSizeWithTag(Persistent);
      }
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (UserIdOne.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserIdOne);
      }
      if (UserIdTwo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserIdTwo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelMessage other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId.Length != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.code_ != null) {
        if (code_ == null || other.Code != 0) {
          Code = other.Code;
        }
      }
      if (other.SenderId.Length != 0) {
        SenderId = other.SenderId;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.updateTime_ != null) {
        if (updateTime_ == null) {
          UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
      }
      if (other.persistent_ != null) {
        if (persistent_ == null || other.Persistent != false) {
          Persistent = other.Persistent;
        }
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      if (other.UserIdOne.Length != 0) {
        UserIdOne = other.UserIdOne;
      }
      if (other.UserIdTwo.Length != 0) {
        UserIdTwo = other.UserIdTwo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChannelId = input.ReadString();
            break;
          }
          case 18: {
            MessageId = input.ReadString();
            break;
          }
          case 26: {
            int? value = _single_code_codec.Read(input);
            if (code_ == null || value != 0) {
              Code = value;
            }
            break;
          }
          case 34: {
            SenderId = input.ReadString();
            break;
          }
          case 42: {
            Username = input.ReadString();
            break;
          }
          case 50: {
            Content = input.ReadString();
            break;
          }
          case 58: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 66: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
          case 74: {
            bool? value = _single_persistent_codec.Read(input);
            if (persistent_ == null || value != false) {
              Persistent = value;
            }
            break;
          }
          case 82: {
            RoomName = input.ReadString();
            break;
          }
          case 90: {
            GroupId = input.ReadString();
            break;
          }
          case 98: {
            UserIdOne = input.ReadString();
            break;
          }
          case 106: {
            UserIdTwo = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ChannelId = input.ReadString();
            break;
          }
          case 18: {
            MessageId = input.ReadString();
            break;
          }
          case 26: {
            int? value = _single_code_codec.Read(ref input);
            if (code_ == null || value != 0) {
              Code = value;
            }
            break;
          }
          case 34: {
            SenderId = input.ReadString();
            break;
          }
          case 42: {
            Username = input.ReadString();
            break;
          }
          case 50: {
            Content = input.ReadString();
            break;
          }
          case 58: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 66: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
          case 74: {
            bool? value = _single_persistent_codec.Read(ref input);
            if (persistent_ == null || value != false) {
              Persistent = value;
            }
            break;
          }
          case 82: {
            RoomName = input.ReadString();
            break;
          }
          case 90: {
            GroupId = input.ReadString();
            break;
          }
          case 98: {
            UserIdOne = input.ReadString();
            break;
          }
          case 106: {
            UserIdTwo = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A list of channel messages, usually a result of a list operation.
  /// </summary>
  public sealed partial class ChannelMessageList : pb::IMessage<ChannelMessageList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelMessageList> _parser = new pb::MessageParser<ChannelMessageList>(() => new ChannelMessageList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelMessageList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessageList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessageList(ChannelMessageList other) : this() {
      messages_ = other.messages_.Clone();
      nextCursor_ = other.nextCursor_;
      prevCursor_ = other.prevCursor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessageList Clone() {
      return new ChannelMessageList(this);
    }

    /// <summary>Field number for the "messages" field.</summary>
    public const int MessagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.ChannelMessage> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.ChannelMessage.Parser);
    private readonly pbc::RepeatedField<global::Nakama.ChannelMessage> messages_ = new pbc::RepeatedField<global::Nakama.ChannelMessage>();
    /// <summary>
    /// A list of messages.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.ChannelMessage> Messages {
      get { return messages_; }
    }

    /// <summary>Field number for the "next_cursor" field.</summary>
    public const int NextCursorFieldNumber = 2;
    private string nextCursor_ = "";
    /// <summary>
    /// The cursor to send when retireving the next page, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextCursor {
      get { return nextCursor_; }
      set {
        nextCursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prev_cursor" field.</summary>
    public const int PrevCursorFieldNumber = 3;
    private string prevCursor_ = "";
    /// <summary>
    /// The cursor to send when retrieving the previous page, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrevCursor {
      get { return prevCursor_; }
      set {
        prevCursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelMessageList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelMessageList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!messages_.Equals(other.messages_)) return false;
      if (NextCursor != other.NextCursor) return false;
      if (PrevCursor != other.PrevCursor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= messages_.GetHashCode();
      if (NextCursor.Length != 0) hash ^= NextCursor.GetHashCode();
      if (PrevCursor.Length != 0) hash ^= PrevCursor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      messages_.WriteTo(output, _repeated_messages_codec);
      if (NextCursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextCursor);
      }
      if (PrevCursor.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PrevCursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      messages_.WriteTo(ref output, _repeated_messages_codec);
      if (NextCursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextCursor);
      }
      if (PrevCursor.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PrevCursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += messages_.CalculateSize(_repeated_messages_codec);
      if (NextCursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextCursor);
      }
      if (PrevCursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrevCursor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelMessageList other) {
      if (other == null) {
        return;
      }
      messages_.Add(other.messages_);
      if (other.NextCursor.Length != 0) {
        NextCursor = other.NextCursor;
      }
      if (other.PrevCursor.Length != 0) {
        PrevCursor = other.PrevCursor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
          case 18: {
            NextCursor = input.ReadString();
            break;
          }
          case 26: {
            PrevCursor = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            messages_.AddEntriesFrom(ref input, _repeated_messages_codec);
            break;
          }
          case 18: {
            NextCursor = input.ReadString();
            break;
          }
          case 26: {
            PrevCursor = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Create a group with the current user as owner.
  /// </summary>
  public sealed partial class CreateGroupRequest : pb::IMessage<CreateGroupRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateGroupRequest> _parser = new pb::MessageParser<CreateGroupRequest>(() => new CreateGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateGroupRequest(CreateGroupRequest other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      langTag_ = other.langTag_;
      avatarUrl_ = other.avatarUrl_;
      open_ = other.open_;
      maxCount_ = other.maxCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateGroupRequest Clone() {
      return new CreateGroupRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// A unique name for the group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// A description for the group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lang_tag" field.</summary>
    public const int LangTagFieldNumber = 3;
    private string langTag_ = "";
    /// <summary>
    /// The language expected to be a tag which follows the BCP-47 spec.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LangTag {
      get { return langTag_; }
      set {
        langTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 4;
    private string avatarUrl_ = "";
    /// <summary>
    /// A URL for an avatar image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 5;
    private bool open_;
    /// <summary>
    /// Mark a group as open or not where only admins can accept members.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    /// <summary>Field number for the "max_count" field.</summary>
    public const int MaxCountFieldNumber = 6;
    private int maxCount_;
    /// <summary>
    /// Maximum number of group members.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCount {
      get { return maxCount_; }
      set {
        maxCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (LangTag != other.LangTag) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (Open != other.Open) return false;
      if (MaxCount != other.MaxCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (LangTag.Length != 0) hash ^= LangTag.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (Open != false) hash ^= Open.GetHashCode();
      if (MaxCount != 0) hash ^= MaxCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (LangTag.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LangTag);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AvatarUrl);
      }
      if (Open != false) {
        output.WriteRawTag(40);
        output.WriteBool(Open);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (LangTag.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LangTag);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AvatarUrl);
      }
      if (Open != false) {
        output.WriteRawTag(40);
        output.WriteBool(Open);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (LangTag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LangTag);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (Open != false) {
        size += 1 + 1;
      }
      if (MaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.LangTag.Length != 0) {
        LangTag = other.LangTag;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.Open != false) {
        Open = other.Open;
      }
      if (other.MaxCount != 0) {
        MaxCount = other.MaxCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            LangTag = input.ReadString();
            break;
          }
          case 34: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 40: {
            Open = input.ReadBool();
            break;
          }
          case 48: {
            MaxCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            LangTag = input.ReadString();
            break;
          }
          case 34: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 40: {
            Open = input.ReadBool();
            break;
          }
          case 48: {
            MaxCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Delete one or more friends for the current user.
  /// </summary>
  public sealed partial class DeleteFriendsRequest : pb::IMessage<DeleteFriendsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeleteFriendsRequest> _parser = new pb::MessageParser<DeleteFriendsRequest>(() => new DeleteFriendsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteFriendsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteFriendsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteFriendsRequest(DeleteFriendsRequest other) : this() {
      ids_ = other.ids_.Clone();
      usernames_ = other.usernames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteFriendsRequest Clone() {
      return new DeleteFriendsRequest(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_ids_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> ids_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The account id of a user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "usernames" field.</summary>
    public const int UsernamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_usernames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> usernames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The account username of a user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Usernames {
      get { return usernames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteFriendsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteFriendsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      if(!usernames_.Equals(other.usernames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      hash ^= usernames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      ids_.WriteTo(output, _repeated_ids_codec);
      usernames_.WriteTo(output, _repeated_usernames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      ids_.WriteTo(ref output, _repeated_ids_codec);
      usernames_.WriteTo(ref output, _repeated_usernames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      size += usernames_.CalculateSize(_repeated_usernames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteFriendsRequest other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
      usernames_.Add(other.usernames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 18: {
            usernames_.AddEntriesFrom(input, _repeated_usernames_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ids_.AddEntriesFrom(ref input, _repeated_ids_codec);
            break;
          }
          case 18: {
            usernames_.AddEntriesFrom(ref input, _repeated_usernames_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Delete a group the user has access to.
  /// </summary>
  public sealed partial class DeleteGroupRequest : pb::IMessage<DeleteGroupRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeleteGroupRequest> _parser = new pb::MessageParser<DeleteGroupRequest>(() => new DeleteGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteGroupRequest(DeleteGroupRequest other) : this() {
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteGroupRequest Clone() {
      return new DeleteGroupRequest(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    /// The id of a group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Delete a leaderboard record.
  /// </summary>
  public sealed partial class DeleteLeaderboardRecordRequest : pb::IMessage<DeleteLeaderboardRecordRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeleteLeaderboardRecordRequest> _parser = new pb::MessageParser<DeleteLeaderboardRecordRequest>(() => new DeleteLeaderboardRecordRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteLeaderboardRecordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteLeaderboardRecordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteLeaderboardRecordRequest(DeleteLeaderboardRecordRequest other) : this() {
      leaderboardId_ = other.leaderboardId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteLeaderboardRecordRequest Clone() {
      return new DeleteLeaderboardRecordRequest(this);
    }

    /// <summary>Field number for the "leaderboard_id" field.</summary>
    public const int LeaderboardIdFieldNumber = 1;
    private string leaderboardId_ = "";
    /// <summary>
    /// The leaderboard ID to delete from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeaderboardId {
      get { return leaderboardId_; }
      set {
        leaderboardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteLeaderboardRecordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteLeaderboardRecordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeaderboardId != other.LeaderboardId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeaderboardId.Length != 0) hash ^= LeaderboardId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LeaderboardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LeaderboardId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LeaderboardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LeaderboardId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeaderboardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaderboardId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteLeaderboardRecordRequest other) {
      if (other == null) {
        return;
      }
      if (other.LeaderboardId.Length != 0) {
        LeaderboardId = other.LeaderboardId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LeaderboardId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            LeaderboardId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Delete one or more notifications for the current user.
  /// </summary>
  public sealed partial class DeleteNotificationsRequest : pb::IMessage<DeleteNotificationsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeleteNotificationsRequest> _parser = new pb::MessageParser<DeleteNotificationsRequest>(() => new DeleteNotificationsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteNotificationsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNotificationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNotificationsRequest(DeleteNotificationsRequest other) : this() {
      ids_ = other.ids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNotificationsRequest Clone() {
      return new DeleteNotificationsRequest(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_ids_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> ids_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The id of notifications.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteNotificationsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteNotificationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      ids_.WriteTo(output, _repeated_ids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      ids_.WriteTo(ref output, _repeated_ids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteNotificationsRequest other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ids_.AddEntriesFrom(ref input, _repeated_ids_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Storage objects to delete.
  /// </summary>
  public sealed partial class DeleteStorageObjectId : pb::IMessage<DeleteStorageObjectId>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeleteStorageObjectId> _parser = new pb::MessageParser<DeleteStorageObjectId>(() => new DeleteStorageObjectId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteStorageObjectId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteStorageObjectId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteStorageObjectId(DeleteStorageObjectId other) : this() {
      collection_ = other.collection_;
      key_ = other.key_;
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteStorageObjectId Clone() {
      return new DeleteStorageObjectId(this);
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 1;
    private string collection_ = "";
    /// <summary>
    /// The collection which stores the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Collection {
      get { return collection_; }
      set {
        collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// The key of the object within the collection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    /// <summary>
    /// The version hash of the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteStorageObjectId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteStorageObjectId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Collection != other.Collection) return false;
      if (Key != other.Key) return false;
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Collection.Length != 0) hash ^= Collection.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Collection.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Collection);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Collection.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Collection);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Collection.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteStorageObjectId other) {
      if (other == null) {
        return;
      }
      if (other.Collection.Length != 0) {
        Collection = other.Collection;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Collection = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Collection = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Batch delete storage objects.
  /// </summary>
  public sealed partial class DeleteStorageObjectsRequest : pb::IMessage<DeleteStorageObjectsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeleteStorageObjectsRequest> _parser = new pb::MessageParser<DeleteStorageObjectsRequest>(() => new DeleteStorageObjectsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteStorageObjectsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteStorageObjectsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteStorageObjectsRequest(DeleteStorageObjectsRequest other) : this() {
      objectIds_ = other.objectIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteStorageObjectsRequest Clone() {
      return new DeleteStorageObjectsRequest(this);
    }

    /// <summary>Field number for the "object_ids" field.</summary>
    public const int ObjectIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.DeleteStorageObjectId> _repeated_objectIds_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.DeleteStorageObjectId.Parser);
    private readonly pbc::RepeatedField<global::Nakama.DeleteStorageObjectId> objectIds_ = new pbc::RepeatedField<global::Nakama.DeleteStorageObjectId>();
    /// <summary>
    /// Batch of storage objects.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.DeleteStorageObjectId> ObjectIds {
      get { return objectIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteStorageObjectsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteStorageObjectsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objectIds_.Equals(other.objectIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objectIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      objectIds_.WriteTo(output, _repeated_objectIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      objectIds_.WriteTo(ref output, _repeated_objectIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objectIds_.CalculateSize(_repeated_objectIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteStorageObjectsRequest other) {
      if (other == null) {
        return;
      }
      objectIds_.Add(other.objectIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objectIds_.AddEntriesFrom(input, _repeated_objectIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            objectIds_.AddEntriesFrom(ref input, _repeated_objectIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents an event to be passed through the server to registered event handlers.
  /// </summary>
  public sealed partial class Event : pb::IMessage<Event>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      name_ = other.name_;
      properties_ = other.properties_.Clone();
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      external_ = other.external_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// An event name, type, category, or identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_properties_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 18);
    private readonly pbc::MapField<string, string> properties_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Arbitrary event property values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Properties {
      get { return properties_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// The time when the event was triggered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "external" field.</summary>
    public const int ExternalFieldNumber = 4;
    private bool external_;
    /// <summary>
    /// True if the event came directly from a client call, false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool External {
      get { return external_; }
      set {
        external_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!Properties.Equals(other.Properties)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (External != other.External) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= Properties.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (External != false) hash ^= External.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      properties_.WriteTo(output, _map_properties_codec);
      if (timestamp_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Timestamp);
      }
      if (External != false) {
        output.WriteRawTag(32);
        output.WriteBool(External);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      properties_.WriteTo(ref output, _map_properties_codec);
      if (timestamp_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Timestamp);
      }
      if (External != false) {
        output.WriteRawTag(32);
        output.WriteBool(External);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += properties_.CalculateSize(_map_properties_codec);
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (External != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      properties_.Add(other.properties_);
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.External != false) {
        External = other.External;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            properties_.AddEntriesFrom(input, _map_properties_codec);
            break;
          }
          case 26: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 32: {
            External = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            properties_.AddEntriesFrom(ref input, _map_properties_codec);
            break;
          }
          case 26: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 32: {
            External = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A friend of a user.
  /// </summary>
  public sealed partial class Friend : pb::IMessage<Friend>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Friend> _parser = new pb::MessageParser<Friend>(() => new Friend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Friend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend(Friend other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      State = other.State;
      updateTime_ = other.updateTime_ != null ? other.updateTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend Clone() {
      return new Friend(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::Nakama.User user_;
    /// <summary>
    /// The user object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private static readonly pb::FieldCodec<int?> _single_state_codec = pb::FieldCodec.ForStructWrapper<int>(18);
    private int? state_;
    /// <summary>
    /// The friend status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? State {
      get { return state_; }
      set {
        state_ = value;
      }
    }


    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
    /// <summary>
    /// Time of the latest relationship update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Friend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Friend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (State != other.State) return false;
      if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (state_ != null) {
        _single_state_codec.WriteTagAndValue(output, State);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (state_ != null) {
        _single_state_codec.WriteTagAndValue(ref output, State);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (state_ != null) {
        size += _single_state_codec.CalculateSizeWithTag(State);
      }
      if (updateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Friend other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::Nakama.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.state_ != null) {
        if (state_ == null || other.State != 0) {
          State = other.State;
        }
      }
      if (other.updateTime_ != null) {
        if (updateTime_ == null) {
          UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::Nakama.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            int? value = _single_state_codec.Read(input);
            if (state_ == null || value != 0) {
              State = value;
            }
            break;
          }
          case 26: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::Nakama.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            int? value = _single_state_codec.Read(ref input);
            if (state_ == null || value != 0) {
              State = value;
            }
            break;
          }
          case 26: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Friend message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The friendship status.
      /// </summary>
      public enum State {
        /// <summary>
        /// The user is a friend of the current user.
        /// </summary>
        [pbr::OriginalName("FRIEND")] Friend = 0,
        /// <summary>
        /// The current user has sent an invite to the user.
        /// </summary>
        [pbr::OriginalName("INVITE_SENT")] InviteSent = 1,
        /// <summary>
        /// The current user has received an invite from this user.
        /// </summary>
        [pbr::OriginalName("INVITE_RECEIVED")] InviteReceived = 2,
        /// <summary>
        /// The current user has blocked this user.
        /// </summary>
        [pbr::OriginalName("BLOCKED")] Blocked = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// A collection of zero or more friends of the user.
  /// </summary>
  public sealed partial class FriendList : pb::IMessage<FriendList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FriendList> _parser = new pb::MessageParser<FriendList>(() => new FriendList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendList(FriendList other) : this() {
      friends_ = other.friends_.Clone();
      cursor_ = other.cursor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendList Clone() {
      return new FriendList(this);
    }

    /// <summary>Field number for the "friends" field.</summary>
    public const int FriendsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.Friend> _repeated_friends_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.Friend.Parser);
    private readonly pbc::RepeatedField<global::Nakama.Friend> friends_ = new pbc::RepeatedField<global::Nakama.Friend>();
    /// <summary>
    /// The Friend objects.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.Friend> Friends {
      get { return friends_; }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private string cursor_ = "";
    /// <summary>
    /// Cursor for the next page of results, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FriendList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FriendList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!friends_.Equals(other.friends_)) return false;
      if (Cursor != other.Cursor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= friends_.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      friends_.WriteTo(output, _repeated_friends_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      friends_.WriteTo(ref output, _repeated_friends_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friends_.CalculateSize(_repeated_friends_codec);
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FriendList other) {
      if (other == null) {
        return;
      }
      friends_.Add(other.friends_);
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            friends_.AddEntriesFrom(input, _repeated_friends_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            friends_.AddEntriesFrom(ref input, _repeated_friends_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Fetch a batch of zero or more users from the server.
  /// </summary>
  public sealed partial class GetUsersRequest : pb::IMessage<GetUsersRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetUsersRequest> _parser = new pb::MessageParser<GetUsersRequest>(() => new GetUsersRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetUsersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUsersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUsersRequest(GetUsersRequest other) : this() {
      ids_ = other.ids_.Clone();
      usernames_ = other.usernames_.Clone();
      facebookIds_ = other.facebookIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUsersRequest Clone() {
      return new GetUsersRequest(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_ids_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> ids_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The account id of a user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "usernames" field.</summary>
    public const int UsernamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_usernames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> usernames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The account username of a user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Usernames {
      get { return usernames_; }
    }

    /// <summary>Field number for the "facebook_ids" field.</summary>
    public const int FacebookIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_facebookIds_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> facebookIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The Facebook ID of a user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FacebookIds {
      get { return facebookIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetUsersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetUsersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      if(!usernames_.Equals(other.usernames_)) return false;
      if(!facebookIds_.Equals(other.facebookIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      hash ^= usernames_.GetHashCode();
      hash ^= facebookIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      ids_.WriteTo(output, _repeated_ids_codec);
      usernames_.WriteTo(output, _repeated_usernames_codec);
      facebookIds_.WriteTo(output, _repeated_facebookIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      ids_.WriteTo(ref output, _repeated_ids_codec);
      usernames_.WriteTo(ref output, _repeated_usernames_codec);
      facebookIds_.WriteTo(ref output, _repeated_facebookIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      size += usernames_.CalculateSize(_repeated_usernames_codec);
      size += facebookIds_.CalculateSize(_repeated_facebookIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetUsersRequest other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
      usernames_.Add(other.usernames_);
      facebookIds_.Add(other.facebookIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 18: {
            usernames_.AddEntriesFrom(input, _repeated_usernames_codec);
            break;
          }
          case 26: {
            facebookIds_.AddEntriesFrom(input, _repeated_facebookIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ids_.AddEntriesFrom(ref input, _repeated_ids_codec);
            break;
          }
          case 18: {
            usernames_.AddEntriesFrom(ref input, _repeated_usernames_codec);
            break;
          }
          case 26: {
            facebookIds_.AddEntriesFrom(ref input, _repeated_facebookIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A group in the server.
  /// </summary>
  public sealed partial class Group : pb::IMessage<Group>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Group> _parser = new pb::MessageParser<Group>(() => new Group());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Group> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Group() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Group(Group other) : this() {
      id_ = other.id_;
      creatorId_ = other.creatorId_;
      name_ = other.name_;
      description_ = other.description_;
      langTag_ = other.langTag_;
      metadata_ = other.metadata_;
      avatarUrl_ = other.avatarUrl_;
      Open = other.Open;
      edgeCount_ = other.edgeCount_;
      maxCount_ = other.maxCount_;
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      updateTime_ = other.updateTime_ != null ? other.updateTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Group Clone() {
      return new Group(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The id of a group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "creator_id" field.</summary>
    public const int CreatorIdFieldNumber = 2;
    private string creatorId_ = "";
    /// <summary>
    /// The id of the user who created the group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreatorId {
      get { return creatorId_; }
      set {
        creatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// The unique name of the group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    /// <summary>
    /// A description for the group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lang_tag" field.</summary>
    public const int LangTagFieldNumber = 5;
    private string langTag_ = "";
    /// <summary>
    /// The language expected to be a tag which follows the BCP-47 spec.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LangTag {
      get { return langTag_; }
      set {
        langTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 6;
    private string metadata_ = "";
    /// <summary>
    /// Additional information stored as a JSON object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 7;
    private string avatarUrl_ = "";
    /// <summary>
    /// A URL for an avatar image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 8;
    private static readonly pb::FieldCodec<bool?> _single_open_codec = pb::FieldCodec.ForStructWrapper<bool>(66);
    private bool? open_;
    /// <summary>
    /// Anyone can join open groups, otherwise only admins can accept members.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }


    /// <summary>Field number for the "edge_count" field.</summary>
    public const int EdgeCountFieldNumber = 9;
    private int edgeCount_;
    /// <summary>
    /// The current count of all members in the group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EdgeCount {
      get { return edgeCount_; }
      set {
        edgeCount_ = value;
      }
    }

    /// <summary>Field number for the "max_count" field.</summary>
    public const int MaxCountFieldNumber = 10;
    private int maxCount_;
    /// <summary>
    /// The maximum number of members allowed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCount {
      get { return maxCount_; }
      set {
        maxCount_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 11;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// The UNIX time when the group was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
    /// <summary>
    /// The UNIX time when the group was last updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Group);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Group other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CreatorId != other.CreatorId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (LangTag != other.LangTag) return false;
      if (Metadata != other.Metadata) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (Open != other.Open) return false;
      if (EdgeCount != other.EdgeCount) return false;
      if (MaxCount != other.MaxCount) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (CreatorId.Length != 0) hash ^= CreatorId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (LangTag.Length != 0) hash ^= LangTag.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (open_ != null) hash ^= Open.GetHashCode();
      if (EdgeCount != 0) hash ^= EdgeCount.GetHashCode();
      if (MaxCount != 0) hash ^= MaxCount.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (CreatorId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CreatorId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (LangTag.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LangTag);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Metadata);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AvatarUrl);
      }
      if (open_ != null) {
        _single_open_codec.WriteTagAndValue(output, Open);
      }
      if (EdgeCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(EdgeCount);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxCount);
      }
      if (createTime_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(UpdateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (CreatorId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CreatorId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (LangTag.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LangTag);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Metadata);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AvatarUrl);
      }
      if (open_ != null) {
        _single_open_codec.WriteTagAndValue(ref output, Open);
      }
      if (EdgeCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(EdgeCount);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxCount);
      }
      if (createTime_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(UpdateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (CreatorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatorId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (LangTag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LangTag);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Metadata);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (open_ != null) {
        size += _single_open_codec.CalculateSizeWithTag(Open);
      }
      if (EdgeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EdgeCount);
      }
      if (MaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCount);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (updateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Group other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.CreatorId.Length != 0) {
        CreatorId = other.CreatorId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.LangTag.Length != 0) {
        LangTag = other.LangTag;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.open_ != null) {
        if (open_ == null || other.Open != false) {
          Open = other.Open;
        }
      }
      if (other.EdgeCount != 0) {
        EdgeCount = other.EdgeCount;
      }
      if (other.MaxCount != 0) {
        MaxCount = other.MaxCount;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.updateTime_ != null) {
        if (updateTime_ == null) {
          UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            CreatorId = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            LangTag = input.ReadString();
            break;
          }
          case 50: {
            Metadata = input.ReadString();
            break;
          }
          case 58: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 66: {
            bool? value = _single_open_codec.Read(input);
            if (open_ == null || value != false) {
              Open = value;
            }
            break;
          }
          case 72: {
            EdgeCount = input.ReadInt32();
            break;
          }
          case 80: {
            MaxCount = input.ReadInt32();
            break;
          }
          case 90: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 98: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            CreatorId = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            LangTag = input.ReadString();
            break;
          }
          case 50: {
            Metadata = input.ReadString();
            break;
          }
          case 58: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 66: {
            bool? value = _single_open_codec.Read(ref input);
            if (open_ == null || value != false) {
              Open = value;
            }
            break;
          }
          case 72: {
            EdgeCount = input.ReadInt32();
            break;
          }
          case 80: {
            MaxCount = input.ReadInt32();
            break;
          }
          case 90: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 98: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// One or more groups returned from a listing operation.
  /// </summary>
  public sealed partial class GroupList : pb::IMessage<GroupList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GroupList> _parser = new pb::MessageParser<GroupList>(() => new GroupList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupList(GroupList other) : this() {
      groups_ = other.groups_.Clone();
      cursor_ = other.cursor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupList Clone() {
      return new GroupList(this);
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.Group> _repeated_groups_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.Group.Parser);
    private readonly pbc::RepeatedField<global::Nakama.Group> groups_ = new pbc::RepeatedField<global::Nakama.Group>();
    /// <summary>
    /// One or more groups.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.Group> Groups {
      get { return groups_; }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private string cursor_ = "";
    /// <summary>
    /// A cursor used to get the next page.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groups_.Equals(other.groups_)) return false;
      if (Cursor != other.Cursor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groups_.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      groups_.WriteTo(output, _repeated_groups_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      groups_.WriteTo(ref output, _repeated_groups_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groups_.CalculateSize(_repeated_groups_codec);
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupList other) {
      if (other == null) {
        return;
      }
      groups_.Add(other.groups_);
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            groups_.AddEntriesFrom(ref input, _repeated_groups_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A list of users belonging to a group, along with their role.
  /// </summary>
  public sealed partial class GroupUserList : pb::IMessage<GroupUserList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GroupUserList> _parser = new pb::MessageParser<GroupUserList>(() => new GroupUserList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupUserList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupUserList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupUserList(GroupUserList other) : this() {
      groupUsers_ = other.groupUsers_.Clone();
      cursor_ = other.cursor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupUserList Clone() {
      return new GroupUserList(this);
    }

    /// <summary>Field number for the "group_users" field.</summary>
    public const int GroupUsersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.GroupUserList.Types.GroupUser> _repeated_groupUsers_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.GroupUserList.Types.GroupUser.Parser);
    private readonly pbc::RepeatedField<global::Nakama.GroupUserList.Types.GroupUser> groupUsers_ = new pbc::RepeatedField<global::Nakama.GroupUserList.Types.GroupUser>();
    /// <summary>
    /// User-role pairs for a group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.GroupUserList.Types.GroupUser> GroupUsers {
      get { return groupUsers_; }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private string cursor_ = "";
    /// <summary>
    /// Cursor for the next page of results, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupUserList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupUserList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!groupUsers_.Equals(other.groupUsers_)) return false;
      if (Cursor != other.Cursor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= groupUsers_.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      groupUsers_.WriteTo(output, _repeated_groupUsers_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      groupUsers_.WriteTo(ref output, _repeated_groupUsers_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += groupUsers_.CalculateSize(_repeated_groupUsers_codec);
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupUserList other) {
      if (other == null) {
        return;
      }
      groupUsers_.Add(other.groupUsers_);
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            groupUsers_.AddEntriesFrom(input, _repeated_groupUsers_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            groupUsers_.AddEntriesFrom(ref input, _repeated_groupUsers_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the GroupUserList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A single user-role pair.
      /// </summary>
      public sealed partial class GroupUser : pb::IMessage<GroupUser>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<GroupUser> _parser = new pb::MessageParser<GroupUser>(() => new GroupUser());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GroupUser> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.GroupUserList.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupUser() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupUser(GroupUser other) : this() {
          user_ = other.user_ != null ? other.user_.Clone() : null;
          State = other.State;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GroupUser Clone() {
          return new GroupUser(this);
        }

        /// <summary>Field number for the "user" field.</summary>
        public const int UserFieldNumber = 1;
        private global::Nakama.User user_;
        /// <summary>
        /// User.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Nakama.User User {
          get { return user_; }
          set {
            user_ = value;
          }
        }

        /// <summary>Field number for the "state" field.</summary>
        public const int StateFieldNumber = 2;
        private static readonly pb::FieldCodec<int?> _single_state_codec = pb::FieldCodec.ForStructWrapper<int>(18);
        private int? state_;
        /// <summary>
        /// Their relationship to the group.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int? State {
          get { return state_; }
          set {
            state_ = value;
          }
        }


        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GroupUser);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GroupUser other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(User, other.User)) return false;
          if (State != other.State) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (user_ != null) hash ^= User.GetHashCode();
          if (state_ != null) hash ^= State.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (user_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(User);
          }
          if (state_ != null) {
            _single_state_codec.WriteTagAndValue(output, State);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (user_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(User);
          }
          if (state_ != null) {
            _single_state_codec.WriteTagAndValue(ref output, State);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (user_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
          }
          if (state_ != null) {
            size += _single_state_codec.CalculateSizeWithTag(State);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GroupUser other) {
          if (other == null) {
            return;
          }
          if (other.user_ != null) {
            if (user_ == null) {
              User = new global::Nakama.User();
            }
            User.MergeFrom(other.User);
          }
          if (other.state_ != null) {
            if (state_ == null || other.State != 0) {
              State = other.State;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (user_ == null) {
                  User = new global::Nakama.User();
                }
                input.ReadMessage(User);
                break;
              }
              case 18: {
                int? value = _single_state_codec.Read(input);
                if (state_ == null || value != 0) {
                  State = value;
                }
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (user_ == null) {
                  User = new global::Nakama.User();
                }
                input.ReadMessage(User);
                break;
              }
              case 18: {
                int? value = _single_state_codec.Read(ref input);
                if (state_ == null || value != 0) {
                  State = value;
                }
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the GroupUser message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// The group role status.
          /// </summary>
          public enum State {
            /// <summary>
            /// The user is a superadmin with full control of the group.
            /// </summary>
            [pbr::OriginalName("SUPERADMIN")] Superadmin = 0,
            /// <summary>
            /// The user is an admin with additional privileges.
            /// </summary>
            [pbr::OriginalName("ADMIN")] Admin = 1,
            /// <summary>
            /// The user is a regular member.
            /// </summary>
            [pbr::OriginalName("MEMBER")] Member = 2,
            /// <summary>
            /// The user has requested to join the group
            /// </summary>
            [pbr::OriginalName("JOIN_REQUEST")] JoinRequest = 3,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// Import Facebook friends into the current user's account.
  /// </summary>
  public sealed partial class ImportFacebookFriendsRequest : pb::IMessage<ImportFacebookFriendsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ImportFacebookFriendsRequest> _parser = new pb::MessageParser<ImportFacebookFriendsRequest>(() => new ImportFacebookFriendsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportFacebookFriendsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportFacebookFriendsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportFacebookFriendsRequest(ImportFacebookFriendsRequest other) : this() {
      account_ = other.account_ != null ? other.account_.Clone() : null;
      Reset = other.Reset;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportFacebookFriendsRequest Clone() {
      return new ImportFacebookFriendsRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::Nakama.AccountFacebook account_;
    /// <summary>
    /// The Facebook account details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AccountFacebook Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "reset" field.</summary>
    public const int ResetFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_reset_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? reset_;
    /// <summary>
    /// Reset the current user's friends list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Reset {
      get { return reset_; }
      set {
        reset_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportFacebookFriendsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportFacebookFriendsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if (Reset != other.Reset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account_ != null) hash ^= Account.GetHashCode();
      if (reset_ != null) hash ^= Reset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (reset_ != null) {
        _single_reset_codec.WriteTagAndValue(output, Reset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (reset_ != null) {
        _single_reset_codec.WriteTagAndValue(ref output, Reset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (reset_ != null) {
        size += _single_reset_codec.CalculateSizeWithTag(Reset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportFacebookFriendsRequest other) {
      if (other == null) {
        return;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::Nakama.AccountFacebook();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.reset_ != null) {
        if (reset_ == null || other.Reset != false) {
          Reset = other.Reset;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountFacebook();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_reset_codec.Read(input);
            if (reset_ == null || value != false) {
              Reset = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountFacebook();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            bool? value = _single_reset_codec.Read(ref input);
            if (reset_ == null || value != false) {
              Reset = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Immediately join an open group, or request to join a closed one.
  /// </summary>
  public sealed partial class JoinGroupRequest : pb::IMessage<JoinGroupRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JoinGroupRequest> _parser = new pb::MessageParser<JoinGroupRequest>(() => new JoinGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGroupRequest(JoinGroupRequest other) : this() {
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGroupRequest Clone() {
      return new JoinGroupRequest(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    /// The group ID to join. The group must already exist.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The request to join a tournament.
  /// </summary>
  public sealed partial class JoinTournamentRequest : pb::IMessage<JoinTournamentRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JoinTournamentRequest> _parser = new pb::MessageParser<JoinTournamentRequest>(() => new JoinTournamentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinTournamentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTournamentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTournamentRequest(JoinTournamentRequest other) : this() {
      tournamentId_ = other.tournamentId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinTournamentRequest Clone() {
      return new JoinTournamentRequest(this);
    }

    /// <summary>Field number for the "tournament_id" field.</summary>
    public const int TournamentIdFieldNumber = 1;
    private string tournamentId_ = "";
    /// <summary>
    /// The ID of the tournament to join. The tournament must already exist.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TournamentId {
      get { return tournamentId_; }
      set {
        tournamentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinTournamentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinTournamentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TournamentId != other.TournamentId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TournamentId.Length != 0) hash ^= TournamentId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TournamentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TournamentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TournamentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TournamentId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TournamentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TournamentId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinTournamentRequest other) {
      if (other == null) {
        return;
      }
      if (other.TournamentId.Length != 0) {
        TournamentId = other.TournamentId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TournamentId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TournamentId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Kick a set of users from a group.
  /// </summary>
  public sealed partial class KickGroupUsersRequest : pb::IMessage<KickGroupUsersRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<KickGroupUsersRequest> _parser = new pb::MessageParser<KickGroupUsersRequest>(() => new KickGroupUsersRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickGroupUsersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickGroupUsersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickGroupUsersRequest(KickGroupUsersRequest other) : this() {
      groupId_ = other.groupId_;
      userIds_ = other.userIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickGroupUsersRequest Clone() {
      return new KickGroupUsersRequest(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    /// The group ID to kick from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_ids" field.</summary>
    public const int UserIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_userIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> userIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The users to kick.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UserIds {
      get { return userIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KickGroupUsersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KickGroupUsersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if(!userIds_.Equals(other.userIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      hash ^= userIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      userIds_.WriteTo(output, _repeated_userIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      userIds_.WriteTo(ref output, _repeated_userIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KickGroupUsersRequest other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      userIds_.Add(other.userIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 18: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 18: {
            userIds_.AddEntriesFrom(ref input, _repeated_userIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents a complete leaderboard record with all scores and associated metadata.
  /// </summary>
  public sealed partial class LeaderboardRecord : pb::IMessage<LeaderboardRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LeaderboardRecord> _parser = new pb::MessageParser<LeaderboardRecord>(() => new LeaderboardRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaderboardRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaderboardRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaderboardRecord(LeaderboardRecord other) : this() {
      leaderboardId_ = other.leaderboardId_;
      ownerId_ = other.ownerId_;
      Username = other.Username;
      score_ = other.score_;
      subscore_ = other.subscore_;
      numScore_ = other.numScore_;
      metadata_ = other.metadata_;
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      updateTime_ = other.updateTime_ != null ? other.updateTime_.Clone() : null;
      expiryTime_ = other.expiryTime_ != null ? other.expiryTime_.Clone() : null;
      rank_ = other.rank_;
      maxNumScore_ = other.maxNumScore_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaderboardRecord Clone() {
      return new LeaderboardRecord(this);
    }

    /// <summary>Field number for the "leaderboard_id" field.</summary>
    public const int LeaderboardIdFieldNumber = 1;
    private string leaderboardId_ = "";
    /// <summary>
    /// The ID of the leaderboard this score belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeaderboardId {
      get { return leaderboardId_; }
      set {
        leaderboardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 2;
    private string ownerId_ = "";
    /// <summary>
    /// The ID of the score owner, usually a user or group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_username_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string username_;
    /// <summary>
    /// The username of the score owner, if the owner is a user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = value;
      }
    }


    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private long score_;
    /// <summary>
    /// The score value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "subscore" field.</summary>
    public const int SubscoreFieldNumber = 5;
    private long subscore_;
    /// <summary>
    /// An optional subscore value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Subscore {
      get { return subscore_; }
      set {
        subscore_ = value;
      }
    }

    /// <summary>Field number for the "num_score" field.</summary>
    public const int NumScoreFieldNumber = 6;
    private int numScore_;
    /// <summary>
    /// The number of submissions to this score record.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumScore {
      get { return numScore_; }
      set {
        numScore_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 7;
    private string metadata_ = "";
    /// <summary>
    /// Metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// The UNIX time when the leaderboard record was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
    /// <summary>
    /// The UNIX time when the leaderboard record was updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "expiry_time" field.</summary>
    public const int ExpiryTimeFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expiryTime_;
    /// <summary>
    /// The UNIX time when the leaderboard record expires.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpiryTime {
      get { return expiryTime_; }
      set {
        expiryTime_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 11;
    private long rank_;
    /// <summary>
    /// The rank of this record.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "max_num_score" field.</summary>
    public const int MaxNumScoreFieldNumber = 12;
    private uint maxNumScore_;
    /// <summary>
    /// The maximum number of score updates allowed by the owner.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxNumScore {
      get { return maxNumScore_; }
      set {
        maxNumScore_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaderboardRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaderboardRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeaderboardId != other.LeaderboardId) return false;
      if (OwnerId != other.OwnerId) return false;
      if (Username != other.Username) return false;
      if (Score != other.Score) return false;
      if (Subscore != other.Subscore) return false;
      if (NumScore != other.NumScore) return false;
      if (Metadata != other.Metadata) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
      if (!object.Equals(ExpiryTime, other.ExpiryTime)) return false;
      if (Rank != other.Rank) return false;
      if (MaxNumScore != other.MaxNumScore) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeaderboardId.Length != 0) hash ^= LeaderboardId.GetHashCode();
      if (OwnerId.Length != 0) hash ^= OwnerId.GetHashCode();
      if (username_ != null) hash ^= Username.GetHashCode();
      if (Score != 0L) hash ^= Score.GetHashCode();
      if (Subscore != 0L) hash ^= Subscore.GetHashCode();
      if (NumScore != 0) hash ^= NumScore.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
      if (expiryTime_ != null) hash ^= ExpiryTime.GetHashCode();
      if (Rank != 0L) hash ^= Rank.GetHashCode();
      if (MaxNumScore != 0) hash ^= MaxNumScore.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LeaderboardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LeaderboardId);
      }
      if (OwnerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OwnerId);
      }
      if (username_ != null) {
        _single_username_codec.WriteTagAndValue(output, Username);
      }
      if (Score != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Score);
      }
      if (Subscore != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Subscore);
      }
      if (NumScore != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NumScore);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Metadata);
      }
      if (createTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(UpdateTime);
      }
      if (expiryTime_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ExpiryTime);
      }
      if (Rank != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Rank);
      }
      if (MaxNumScore != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(MaxNumScore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LeaderboardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LeaderboardId);
      }
      if (OwnerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OwnerId);
      }
      if (username_ != null) {
        _single_username_codec.WriteTagAndValue(ref output, Username);
      }
      if (Score != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Score);
      }
      if (Subscore != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Subscore);
      }
      if (NumScore != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NumScore);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Metadata);
      }
      if (createTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(UpdateTime);
      }
      if (expiryTime_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ExpiryTime);
      }
      if (Rank != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Rank);
      }
      if (MaxNumScore != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(MaxNumScore);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeaderboardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaderboardId);
      }
      if (OwnerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerId);
      }
      if (username_ != null) {
        size += _single_username_codec.CalculateSizeWithTag(Username);
      }
      if (Score != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
      }
      if (Subscore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Subscore);
      }
      if (NumScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumScore);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Metadata);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (updateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
      }
      if (expiryTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpiryTime);
      }
      if (Rank != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Rank);
      }
      if (MaxNumScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNumScore);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaderboardRecord other) {
      if (other == null) {
        return;
      }
      if (other.LeaderboardId.Length != 0) {
        LeaderboardId = other.LeaderboardId;
      }
      if (other.OwnerId.Length != 0) {
        OwnerId = other.OwnerId;
      }
      if (other.username_ != null) {
        if (username_ == null || other.Username != "") {
          Username = other.Username;
        }
      }
      if (other.Score != 0L) {
        Score = other.Score;
      }
      if (other.Subscore != 0L) {
        Subscore = other.Subscore;
      }
      if (other.NumScore != 0) {
        NumScore = other.NumScore;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.updateTime_ != null) {
        if (updateTime_ == null) {
          UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
      }
      if (other.expiryTime_ != null) {
        if (expiryTime_ == null) {
          ExpiryTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpiryTime.MergeFrom(other.ExpiryTime);
      }
      if (other.Rank != 0L) {
        Rank = other.Rank;
      }
      if (other.MaxNumScore != 0) {
        MaxNumScore = other.MaxNumScore;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LeaderboardId = input.ReadString();
            break;
          }
          case 18: {
            OwnerId = input.ReadString();
            break;
          }
          case 26: {
            string value = _single_username_codec.Read(input);
            if (username_ == null || value != "") {
              Username = value;
            }
            break;
          }
          case 32: {
            Score = input.ReadInt64();
            break;
          }
          case 40: {
            Subscore = input.ReadInt64();
            break;
          }
          case 48: {
            NumScore = input.ReadInt32();
            break;
          }
          case 58: {
            Metadata = input.ReadString();
            break;
          }
          case 66: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 74: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
          case 82: {
            if (expiryTime_ == null) {
              ExpiryTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpiryTime);
            break;
          }
          case 88: {
            Rank = input.ReadInt64();
            break;
          }
          case 96: {
            MaxNumScore = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            LeaderboardId = input.ReadString();
            break;
          }
          case 18: {
            OwnerId = input.ReadString();
            break;
          }
          case 26: {
            string value = _single_username_codec.Read(ref input);
            if (username_ == null || value != "") {
              Username = value;
            }
            break;
          }
          case 32: {
            Score = input.ReadInt64();
            break;
          }
          case 40: {
            Subscore = input.ReadInt64();
            break;
          }
          case 48: {
            NumScore = input.ReadInt32();
            break;
          }
          case 58: {
            Metadata = input.ReadString();
            break;
          }
          case 66: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 74: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
          case 82: {
            if (expiryTime_ == null) {
              ExpiryTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpiryTime);
            break;
          }
          case 88: {
            Rank = input.ReadInt64();
            break;
          }
          case 96: {
            MaxNumScore = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A set of leaderboard records, may be part of a leaderboard records page or a batch of individual records.
  /// </summary>
  public sealed partial class LeaderboardRecordList : pb::IMessage<LeaderboardRecordList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LeaderboardRecordList> _parser = new pb::MessageParser<LeaderboardRecordList>(() => new LeaderboardRecordList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaderboardRecordList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaderboardRecordList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaderboardRecordList(LeaderboardRecordList other) : this() {
      records_ = other.records_.Clone();
      ownerRecords_ = other.ownerRecords_.Clone();
      nextCursor_ = other.nextCursor_;
      prevCursor_ = other.prevCursor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaderboardRecordList Clone() {
      return new LeaderboardRecordList(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.LeaderboardRecord> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.LeaderboardRecord.Parser);
    private readonly pbc::RepeatedField<global::Nakama.LeaderboardRecord> records_ = new pbc::RepeatedField<global::Nakama.LeaderboardRecord>();
    /// <summary>
    /// A list of leaderboard records.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.LeaderboardRecord> Records {
      get { return records_; }
    }

    /// <summary>Field number for the "owner_records" field.</summary>
    public const int OwnerRecordsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nakama.LeaderboardRecord> _repeated_ownerRecords_codec
        = pb::FieldCodec.ForMessage(18, global::Nakama.LeaderboardRecord.Parser);
    private readonly pbc::RepeatedField<global::Nakama.LeaderboardRecord> ownerRecords_ = new pbc::RepeatedField<global::Nakama.LeaderboardRecord>();
    /// <summary>
    /// A batched set of leaderboard records belonging to specified owners.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.LeaderboardRecord> OwnerRecords {
      get { return ownerRecords_; }
    }

    /// <summary>Field number for the "next_cursor" field.</summary>
    public const int NextCursorFieldNumber = 3;
    private string nextCursor_ = "";
    /// <summary>
    /// The cursor to send when retrieving the next page, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextCursor {
      get { return nextCursor_; }
      set {
        nextCursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prev_cursor" field.</summary>
    public const int PrevCursorFieldNumber = 4;
    private string prevCursor_ = "";
    /// <summary>
    /// The cursor to send when retrieving the previous page, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrevCursor {
      get { return prevCursor_; }
      set {
        prevCursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaderboardRecordList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaderboardRecordList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      if(!ownerRecords_.Equals(other.ownerRecords_)) return false;
      if (NextCursor != other.NextCursor) return false;
      if (PrevCursor != other.PrevCursor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      hash ^= ownerRecords_.GetHashCode();
      if (NextCursor.Length != 0) hash ^= NextCursor.GetHashCode();
      if (PrevCursor.Length != 0) hash ^= PrevCursor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      records_.WriteTo(output, _repeated_records_codec);
      ownerRecords_.WriteTo(output, _repeated_ownerRecords_codec);
      if (NextCursor.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NextCursor);
      }
      if (PrevCursor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PrevCursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      records_.WriteTo(ref output, _repeated_records_codec);
      ownerRecords_.WriteTo(ref output, _repeated_ownerRecords_codec);
      if (NextCursor.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NextCursor);
      }
      if (PrevCursor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PrevCursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      size += ownerRecords_.CalculateSize(_repeated_ownerRecords_codec);
      if (NextCursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextCursor);
      }
      if (PrevCursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrevCursor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaderboardRecordList other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      ownerRecords_.Add(other.ownerRecords_);
      if (other.NextCursor.Length != 0) {
        NextCursor = other.NextCursor;
      }
      if (other.PrevCursor.Length != 0) {
        PrevCursor = other.PrevCursor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
          case 18: {
            ownerRecords_.AddEntriesFrom(input, _repeated_ownerRecords_codec);
            break;
          }
          case 26: {
            NextCursor = input.ReadString();
            break;
          }
          case 34: {
            PrevCursor = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            records_.AddEntriesFrom(ref input, _repeated_records_codec);
            break;
          }
          case 18: {
            ownerRecords_.AddEntriesFrom(ref input, _repeated_ownerRecords_codec);
            break;
          }
          case 26: {
            NextCursor = input.ReadString();
            break;
          }
          case 34: {
            PrevCursor = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Leave a group.
  /// </summary>
  public sealed partial class LeaveGroupRequest : pb::IMessage<LeaveGroupRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LeaveGroupRequest> _parser = new pb::MessageParser<LeaveGroupRequest>(() => new LeaveGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaveGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveGroupRequest(LeaveGroupRequest other) : this() {
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaveGroupRequest Clone() {
      return new LeaveGroupRequest(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    /// The group ID to leave.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaveGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaveGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaveGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Link Facebook to the current user's account.
  /// </summary>
  public sealed partial class LinkFacebookRequest : pb::IMessage<LinkFacebookRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LinkFacebookRequest> _parser = new pb::MessageParser<LinkFacebookRequest>(() => new LinkFacebookRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LinkFacebookRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinkFacebookRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinkFacebookRequest(LinkFacebookRequest other) : this() {
      account_ = other.account_ != null ? other.account_.Clone() : null;
      Sync = other.Sync;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinkFacebookRequest Clone() {
      return new LinkFacebookRequest(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::Nakama.AccountFacebook account_;
    /// <summary>
    /// The Facebook account details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.AccountFacebook Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "sync" field.</summary>
    public const int SyncFieldNumber = 4;
    private static readonly pb::FieldCodec<bool?> _single_sync_codec = pb::FieldCodec.ForStructWrapper<bool>(34);
    private bool? sync_;
    /// <summary>
    /// Import Facebook friends for the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Sync {
      get { return sync_; }
      set {
        sync_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LinkFacebookRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LinkFacebookRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if (Sync != other.Sync) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account_ != null) hash ^= Account.GetHashCode();
      if (sync_ != null) hash ^= Sync.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (sync_ != null) {
        _single_sync_codec.WriteTagAndValue(output, Sync);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (sync_ != null) {
        _single_sync_codec.WriteTagAndValue(ref output, Sync);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (sync_ != null) {
        size += _single_sync_codec.CalculateSizeWithTag(Sync);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LinkFacebookRequest other) {
      if (other == null) {
        return;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::Nakama.AccountFacebook();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.sync_ != null) {
        if (sync_ == null || other.Sync != false) {
          Sync = other.Sync;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountFacebook();
            }
            input.ReadMessage(Account);
            break;
          }
          case 34: {
            bool? value = _single_sync_codec.Read(input);
            if (sync_ == null || value != false) {
              Sync = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::Nakama.AccountFacebook();
            }
            input.ReadMessage(Account);
            break;
          }
          case 34: {
            bool? value = _single_sync_codec.Read(ref input);
            if (sync_ == null || value != false) {
              Sync = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// List a channel's message history.
  /// </summary>
  public sealed partial class ListChannelMessagesRequest : pb::IMessage<ListChannelMessagesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListChannelMessagesRequest> _parser = new pb::MessageParser<ListChannelMessagesRequest>(() => new ListChannelMessagesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListChannelMessagesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelMessagesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelMessagesRequest(ListChannelMessagesRequest other) : this() {
      channelId_ = other.channelId_;
      Limit = other.Limit;
      Forward = other.Forward;
      cursor_ = other.cursor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelMessagesRequest Clone() {
      return new ListChannelMessagesRequest(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private string channelId_ = "";
    /// <summary>
    /// The channel ID to list from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelId {
      get { return channelId_; }
      set {
        channelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private static readonly pb::FieldCodec<int?> _single_limit_codec = pb::FieldCodec.ForStructWrapper<int>(18);
    private int? limit_;
    /// <summary>
    /// Max number of records to return. Between 1 and 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }


    /// <summary>Field number for the "forward" field.</summary>
    public const int ForwardFieldNumber = 3;
    private static readonly pb::FieldCodec<bool?> _single_forward_codec = pb::FieldCodec.ForStructWrapper<bool>(26);
    private bool? forward_;
    /// <summary>
    /// True if listing should be older messages to newer, false if reverse.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Forward {
      get { return forward_; }
      set {
        forward_ = value;
      }
    }


    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 4;
    private string cursor_ = "";
    /// <summary>
    /// A pagination cursor, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListChannelMessagesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListChannelMessagesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      if (Limit != other.Limit) return false;
      if (Forward != other.Forward) return false;
      if (Cursor != other.Cursor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId.Length != 0) hash ^= ChannelId.GetHashCode();
      if (limit_ != null) hash ^= Limit.GetHashCode();
      if (forward_ != null) hash ^= Forward.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChannelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelId);
      }
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(output, Limit);
      }
      if (forward_ != null) {
        _single_forward_codec.WriteTagAndValue(output, Forward);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChannelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelId);
      }
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(ref output, Limit);
      }
      if (forward_ != null) {
        _single_forward_codec.WriteTagAndValue(ref output, Forward);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelId);
      }
      if (limit_ != null) {
        size += _single_limit_codec.CalculateSizeWithTag(Limit);
      }
      if (forward_ != null) {
        size += _single_forward_codec.CalculateSizeWithTag(Forward);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListChannelMessagesRequest other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId.Length != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.limit_ != null) {
        if (limit_ == null || other.Limit != 0) {
          Limit = other.Limit;
        }
      }
      if (other.forward_ != null) {
        if (forward_ == null || other.Forward != false) {
          Forward = other.Forward;
        }
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChannelId = input.ReadString();
            break;
          }
          case 18: {
            int? value = _single_limit_codec.Read(input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 26: {
            bool? value = _single_forward_codec.Read(input);
            if (forward_ == null || value != false) {
              Forward = value;
            }
            break;
          }
          case 34: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ChannelId = input.ReadString();
            break;
          }
          case 18: {
            int? value = _single_limit_codec.Read(ref input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 26: {
            bool? value = _single_forward_codec.Read(ref input);
            if (forward_ == null || value != false) {
              Forward = value;
            }
            break;
          }
          case 34: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// List friends for a user.
  /// </summary>
  public sealed partial class ListFriendsRequest : pb::IMessage<ListFriendsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListFriendsRequest> _parser = new pb::MessageParser<ListFriendsRequest>(() => new ListFriendsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListFriendsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFriendsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFriendsRequest(ListFriendsRequest other) : this() {
      Limit = other.Limit;
      State = other.State;
      cursor_ = other.cursor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFriendsRequest Clone() {
      return new ListFriendsRequest(this);
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 1;
    private static readonly pb::FieldCodec<int?> _single_limit_codec = pb::FieldCodec.ForStructWrapper<int>(10);
    private int? limit_;
    /// <summary>
    /// Max number of records to return. Between 1 and 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }


    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private static readonly pb::FieldCodec<int?> _single_state_codec = pb::FieldCodec.ForStructWrapper<int>(18);
    private int? state_;
    /// <summary>
    /// The friend state to list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? State {
      get { return state_; }
      set {
        state_ = value;
      }
    }


    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 3;
    private string cursor_ = "";
    /// <summary>
    /// An optional next page cursor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListFriendsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListFriendsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Limit != other.Limit) return false;
      if (State != other.State) return false;
      if (Cursor != other.Cursor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (limit_ != null) hash ^= Limit.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(output, Limit);
      }
      if (state_ != null) {
        _single_state_codec.WriteTagAndValue(output, State);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(ref output, Limit);
      }
      if (state_ != null) {
        _single_state_codec.WriteTagAndValue(ref output, State);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (limit_ != null) {
        size += _single_limit_codec.CalculateSizeWithTag(Limit);
      }
      if (state_ != null) {
        size += _single_state_codec.CalculateSizeWithTag(State);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListFriendsRequest other) {
      if (other == null) {
        return;
      }
      if (other.limit_ != null) {
        if (limit_ == null || other.Limit != 0) {
          Limit = other.Limit;
        }
      }
      if (other.state_ != null) {
        if (state_ == null || other.State != 0) {
          State = other.State;
        }
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            int? value = _single_limit_codec.Read(input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 18: {
            int? value = _single_state_codec.Read(input);
            if (state_ == null || value != 0) {
              State = value;
            }
            break;
          }
          case 26: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            int? value = _single_limit_codec.Read(ref input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 18: {
            int? value = _single_state_codec.Read(ref input);
            if (state_ == null || value != 0) {
              State = value;
            }
            break;
          }
          case 26: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// List groups based on given filters.
  /// </summary>
  public sealed partial class ListGroupsRequest : pb::IMessage<ListGroupsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListGroupsRequest> _parser = new pb::MessageParser<ListGroupsRequest>(() => new ListGroupsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListGroupsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListGroupsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListGroupsRequest(ListGroupsRequest other) : this() {
      name_ = other.name_;
      cursor_ = other.cursor_;
      Limit = other.Limit;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListGroupsRequest Clone() {
      return new ListGroupsRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// List groups that contain this value in their names.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private string cursor_ = "";
    /// <summary>
    /// Optional pagination cursor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 3;
    private static readonly pb::FieldCodec<int?> _single_limit_codec = pb::FieldCodec.ForStructWrapper<int>(26);
    private int? limit_;
    /// <summary>
    /// Max number of groups to return. Between 1 and 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListGroupsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListGroupsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Cursor != other.Cursor) return false;
      if (Limit != other.Limit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (limit_ != null) hash ^= Limit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(output, Limit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(ref output, Limit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      if (limit_ != null) {
        size += _single_limit_codec.CalculateSizeWithTag(Limit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListGroupsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      if (other.limit_ != null) {
        if (limit_ == null || other.Limit != 0) {
          Limit = other.Limit;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
          case 26: {
            int? value = _single_limit_codec.Read(input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
          case 26: {
            int? value = _single_limit_codec.Read(ref input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// List all users that are part of a group.
  /// </summary>
  public sealed partial class ListGroupUsersRequest : pb::IMessage<ListGroupUsersRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListGroupUsersRequest> _parser = new pb::MessageParser<ListGroupUsersRequest>(() => new ListGroupUsersRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListGroupUsersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListGroupUsersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListGroupUsersRequest(ListGroupUsersRequest other) : this() {
      groupId_ = other.groupId_;
      Limit = other.Limit;
      State = other.State;
      cursor_ = other.cursor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListGroupUsersRequest Clone() {
      return new ListGroupUsersRequest(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    /// The group ID to list from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private static readonly pb::FieldCodec<int?> _single_limit_codec = pb::FieldCodec.ForStructWrapper<int>(18);
    private int? limit_;
    /// <summary>
    /// Max number of records to return. Between 1 and 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }


    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private static readonly pb::FieldCodec<int?> _single_state_codec = pb::FieldCodec.ForStructWrapper<int>(26);
    private int? state_;
    /// <summary>
    /// The group user state to list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? State {
      get { return state_; }
      set {
        state_ = value;
      }
    }


    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 4;
    private string cursor_ = "";
    /// <summary>
    /// An optional next page cursor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListGroupUsersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListGroupUsersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (Limit != other.Limit) return false;
      if (State != other.State) return false;
      if (Cursor != other.Cursor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (limit_ != null) hash ^= Limit.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(output, Limit);
      }
      if (state_ != null) {
        _single_state_codec.WriteTagAndValue(output, State);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(ref output, Limit);
      }
      if (state_ != null) {
        _single_state_codec.WriteTagAndValue(ref output, State);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (limit_ != null) {
        size += _single_limit_codec.CalculateSizeWithTag(Limit);
      }
      if (state_ != null) {
        size += _single_state_codec.CalculateSizeWithTag(State);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListGroupUsersRequest other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      if (other.limit_ != null) {
        if (limit_ == null || other.Limit != 0) {
          Limit = other.Limit;
        }
      }
      if (other.state_ != null) {
        if (state_ == null || other.State != 0) {
          State = other.State;
        }
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 18: {
            int? value = _single_limit_codec.Read(input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 26: {
            int? value = _single_state_codec.Read(input);
            if (state_ == null || value != 0) {
              State = value;
            }
            break;
          }
          case 34: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 18: {
            int? value = _single_limit_codec.Read(ref input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 26: {
            int? value = _single_state_codec.Read(ref input);
            if (state_ == null || value != 0) {
              State = value;
            }
            break;
          }
          case 34: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// List leaerboard records from a given leaderboard around the owner.
  /// </summary>
  public sealed partial class ListLeaderboardRecordsAroundOwnerRequest : pb::IMessage<ListLeaderboardRecordsAroundOwnerRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListLeaderboardRecordsAroundOwnerRequest> _parser = new pb::MessageParser<ListLeaderboardRecordsAroundOwnerRequest>(() => new ListLeaderboardRecordsAroundOwnerRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListLeaderboardRecordsAroundOwnerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLeaderboardRecordsAroundOwnerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLeaderboardRecordsAroundOwnerRequest(ListLeaderboardRecordsAroundOwnerRequest other) : this() {
      leaderboardId_ = other.leaderboardId_;
      Limit = other.Limit;
      ownerId_ = other.ownerId_;
      Expiry = other.Expiry;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLeaderboardRecordsAroundOwnerRequest Clone() {
      return new ListLeaderboardRecordsAroundOwnerRequest(this);
    }

    /// <summary>Field number for the "leaderboard_id" field.</summary>
    public const int LeaderboardIdFieldNumber = 1;
    private string leaderboardId_ = "";
    /// <summary>
    /// The ID of the tournament to list for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeaderboardId {
      get { return leaderboardId_; }
      set {
        leaderboardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private static readonly pb::FieldCodec<uint?> _single_limit_codec = pb::FieldCodec.ForStructWrapper<uint>(18);
    private uint? limit_;
    /// <summary>
    /// Max number of records to return. Between 1 and 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }


    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 3;
    private string ownerId_ = "";
    /// <summary>
    /// The owner to retrieve records around.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 4;
    private static readonly pb::FieldCodec<long?> _single_expiry_codec = pb::FieldCodec.ForStructWrapper<long>(34);
    private long? expiry_;
    /// <summary>
    /// Expiry in seconds (since epoch) to begin fetching records from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListLeaderboardRecordsAroundOwnerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListLeaderboardRecordsAroundOwnerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeaderboardId != other.LeaderboardId) return false;
      if (Limit != other.Limit) return false;
      if (OwnerId != other.OwnerId) return false;
      if (Expiry != other.Expiry) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeaderboardId.Length != 0) hash ^= LeaderboardId.GetHashCode();
      if (limit_ != null) hash ^= Limit.GetHashCode();
      if (OwnerId.Length != 0) hash ^= OwnerId.GetHashCode();
      if (expiry_ != null) hash ^= Expiry.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LeaderboardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LeaderboardId);
      }
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(output, Limit);
      }
      if (OwnerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OwnerId);
      }
      if (expiry_ != null) {
        _single_expiry_codec.WriteTagAndValue(output, Expiry);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LeaderboardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LeaderboardId);
      }
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(ref output, Limit);
      }
      if (OwnerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OwnerId);
      }
      if (expiry_ != null) {
        _single_expiry_codec.WriteTagAndValue(ref output, Expiry);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeaderboardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaderboardId);
      }
      if (limit_ != null) {
        size += _single_limit_codec.CalculateSizeWithTag(Limit);
      }
      if (OwnerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerId);
      }
      if (expiry_ != null) {
        size += _single_expiry_codec.CalculateSizeWithTag(Expiry);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListLeaderboardRecordsAroundOwnerRequest other) {
      if (other == null) {
        return;
      }
      if (other.LeaderboardId.Length != 0) {
        LeaderboardId = other.LeaderboardId;
      }
      if (other.limit_ != null) {
        if (limit_ == null || other.Limit != 0) {
          Limit = other.Limit;
        }
      }
      if (other.OwnerId.Length != 0) {
        OwnerId = other.OwnerId;
      }
      if (other.expiry_ != null) {
        if (expiry_ == null || other.Expiry != 0L) {
          Expiry = other.Expiry;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LeaderboardId = input.ReadString();
            break;
          }
          case 18: {
            uint? value = _single_limit_codec.Read(input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 26: {
            OwnerId = input.ReadString();
            break;
          }
          case 34: {
            long? value = _single_expiry_codec.Read(input);
            if (expiry_ == null || value != 0L) {
              Expiry = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            LeaderboardId = input.ReadString();
            break;
          }
          case 18: {
            uint? value = _single_limit_codec.Read(ref input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 26: {
            OwnerId = input.ReadString();
            break;
          }
          case 34: {
            long? value = _single_expiry_codec.Read(ref input);
            if (expiry_ == null || value != 0L) {
              Expiry = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// List leaderboard records from a given leaderboard.
  /// </summary>
  public sealed partial class ListLeaderboardRecordsRequest : pb::IMessage<ListLeaderboardRecordsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListLeaderboardRecordsRequest> _parser = new pb::MessageParser<ListLeaderboardRecordsRequest>(() => new ListLeaderboardRecordsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListLeaderboardRecordsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLeaderboardRecordsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLeaderboardRecordsRequest(ListLeaderboardRecordsRequest other) : this() {
      leaderboardId_ = other.leaderboardId_;
      ownerIds_ = other.ownerIds_.Clone();
      Limit = other.Limit;
      cursor_ = other.cursor_;
      Expiry = other.Expiry;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListLeaderboardRecordsRequest Clone() {
      return new ListLeaderboardRecordsRequest(this);
    }

    /// <summary>Field number for the "leaderboard_id" field.</summary>
    public const int LeaderboardIdFieldNumber = 1;
    private string leaderboardId_ = "";
    /// <summary>
    /// The ID of the leaderboard to list for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeaderboardId {
      get { return leaderboardId_; }
      set {
        leaderboardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner_ids" field.</summary>
    public const int OwnerIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_ownerIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> ownerIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// One or more owners to retrieve records for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> OwnerIds {
      get { return ownerIds_; }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 3;
    private static readonly pb::FieldCodec<int?> _single_limit_codec = pb::FieldCodec.ForStructWrapper<int>(26);
    private int? limit_;
    /// <summary>
    /// Max number of records to return. Between 1 and 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }


    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 4;
    private string cursor_ = "";
    /// <summary>
    /// A next or previous page cursor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 5;
    private static readonly pb::FieldCodec<long?> _single_expiry_codec = pb::FieldCodec.ForStructWrapper<long>(42);
    private long? expiry_;
    /// <summary>
    /// Expiry in seconds (since epoch) to begin fetching records from. Optional. 0 means from current time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListLeaderboardRecordsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListLeaderboardRecordsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeaderboardId != other.LeaderboardId) return false;
      if(!ownerIds_.Equals(other.ownerIds_)) return false;
      if (Limit != other.Limit) return false;
      if (Cursor != other.Cursor) return false;
      if (Expiry != other.Expiry) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeaderboardId.Length != 0) hash ^= LeaderboardId.GetHashCode();
      hash ^= ownerIds_.GetHashCode();
      if (limit_ != null) hash ^= Limit.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (expiry_ != null) hash ^= Expiry.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LeaderboardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LeaderboardId);
      }
      ownerIds_.WriteTo(output, _repeated_ownerIds_codec);
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(output, Limit);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Cursor);
      }
      if (expiry_ != null) {
        _single_expiry_codec.WriteTagAndValue(output, Expiry);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LeaderboardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LeaderboardId);
      }
      ownerIds_.WriteTo(ref output, _repeated_ownerIds_codec);
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(ref output, Limit);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Cursor);
      }
      if (expiry_ != null) {
        _single_expiry_codec.WriteTagAndValue(ref output, Expiry);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeaderboardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaderboardId);
      }
      size += ownerIds_.CalculateSize(_repeated_ownerIds_codec);
      if (limit_ != null) {
        size += _single_limit_codec.CalculateSizeWithTag(Limit);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      if (expiry_ != null) {
        size += _single_expiry_codec.CalculateSizeWithTag(Expiry);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListLeaderboardRecordsRequest other) {
      if (other == null) {
        return;
      }
      if (other.LeaderboardId.Length != 0) {
        LeaderboardId = other.LeaderboardId;
      }
      ownerIds_.Add(other.ownerIds_);
      if (other.limit_ != null) {
        if (limit_ == null || other.Limit != 0) {
          Limit = other.Limit;
        }
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      if (other.expiry_ != null) {
        if (expiry_ == null || other.Expiry != 0L) {
          Expiry = other.Expiry;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LeaderboardId = input.ReadString();
            break;
          }
          case 18: {
            ownerIds_.AddEntriesFrom(input, _repeated_ownerIds_codec);
            break;
          }
          case 26: {
            int? value = _single_limit_codec.Read(input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 34: {
            Cursor = input.ReadString();
            break;
          }
          case 42: {
            long? value = _single_expiry_codec.Read(input);
            if (expiry_ == null || value != 0L) {
              Expiry = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            LeaderboardId = input.ReadString();
            break;
          }
          case 18: {
            ownerIds_.AddEntriesFrom(ref input, _repeated_ownerIds_codec);
            break;
          }
          case 26: {
            int? value = _single_limit_codec.Read(ref input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 34: {
            Cursor = input.ReadString();
            break;
          }
          case 42: {
            long? value = _single_expiry_codec.Read(ref input);
            if (expiry_ == null || value != 0L) {
              Expiry = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// List realtime matches.
  /// </summary>
  public sealed partial class ListMatchesRequest : pb::IMessage<ListMatchesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListMatchesRequest> _parser = new pb::MessageParser<ListMatchesRequest>(() => new ListMatchesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListMatchesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMatchesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMatchesRequest(ListMatchesRequest other) : this() {
      Limit = other.Limit;
      Authoritative = other.Authoritative;
      Label = other.Label;
      MinSize = other.MinSize;
      MaxSize = other.MaxSize;
      Query = other.Query;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMatchesRequest Clone() {
      return new ListMatchesRequest(this);
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 1;
    private static readonly pb::FieldCodec<int?> _single_limit_codec = pb::FieldCodec.ForStructWrapper<int>(10);
    private int? limit_;
    /// <summary>
    /// Limit the number of returned matches.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }


    /// <summary>Field number for the "authoritative" field.</summary>
    public const int AuthoritativeFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_authoritative_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? authoritative_;
    /// <summary>
    /// Authoritative or relayed matches.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Authoritative {
      get { return authoritative_; }
      set {
        authoritative_ = value;
      }
    }


    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_label_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string label_;
    /// <summary>
    /// Label filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = value;
      }
    }


    /// <summary>Field number for the "min_size" field.</summary>
    public const int MinSizeFieldNumber = 4;
    private static readonly pb::FieldCodec<int?> _single_minSize_codec = pb::FieldCodec.ForStructWrapper<int>(34);
    private int? minSize_;
    /// <summary>
    /// Minimum user count.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? MinSize {
      get { return minSize_; }
      set {
        minSize_ = value;
      }
    }


    /// <summary>Field number for the "max_size" field.</summary>
    public const int MaxSizeFieldNumber = 5;
    private static readonly pb::FieldCodec<int?> _single_maxSize_codec = pb::FieldCodec.ForStructWrapper<int>(42);
    private int? maxSize_;
    /// <summary>
    /// Maximum user count.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? MaxSize {
      get { return maxSize_; }
      set {
        maxSize_ = value;
      }
    }


    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_query_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string query_;
    /// <summary>
    /// Arbitrary label query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListMatchesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListMatchesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Limit != other.Limit) return false;
      if (Authoritative != other.Authoritative) return false;
      if (Label != other.Label) return false;
      if (MinSize != other.MinSize) return false;
      if (MaxSize != other.MaxSize) return false;
      if (Query != other.Query) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (limit_ != null) hash ^= Limit.GetHashCode();
      if (authoritative_ != null) hash ^= Authoritative.GetHashCode();
      if (label_ != null) hash ^= Label.GetHashCode();
      if (minSize_ != null) hash ^= MinSize.GetHashCode();
      if (maxSize_ != null) hash ^= MaxSize.GetHashCode();
      if (query_ != null) hash ^= Query.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(output, Limit);
      }
      if (authoritative_ != null) {
        _single_authoritative_codec.WriteTagAndValue(output, Authoritative);
      }
      if (label_ != null) {
        _single_label_codec.WriteTagAndValue(output, Label);
      }
      if (minSize_ != null) {
        _single_minSize_codec.WriteTagAndValue(output, MinSize);
      }
      if (maxSize_ != null) {
        _single_maxSize_codec.WriteTagAndValue(output, MaxSize);
      }
      if (query_ != null) {
        _single_query_codec.WriteTagAndValue(output, Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(ref output, Limit);
      }
      if (authoritative_ != null) {
        _single_authoritative_codec.WriteTagAndValue(ref output, Authoritative);
      }
      if (label_ != null) {
        _single_label_codec.WriteTagAndValue(ref output, Label);
      }
      if (minSize_ != null) {
        _single_minSize_codec.WriteTagAndValue(ref output, MinSize);
      }
      if (maxSize_ != null) {
        _single_maxSize_codec.WriteTagAndValue(ref output, MaxSize);
      }
      if (query_ != null) {
        _single_query_codec.WriteTagAndValue(ref output, Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (limit_ != null) {
        size += _single_limit_codec.CalculateSizeWithTag(Limit);
      }
      if (authoritative_ != null) {
        size += _single_authoritative_codec.CalculateSizeWithTag(Authoritative);
      }
      if (label_ != null) {
        size += _single_label_codec.CalculateSizeWithTag(Label);
      }
      if (minSize_ != null) {
        size += _single_minSize_codec.CalculateSizeWithTag(MinSize);
      }
      if (maxSize_ != null) {
        size += _single_maxSize_codec.CalculateSizeWithTag(MaxSize);
      }
      if (query_ != null) {
        size += _single_query_codec.CalculateSizeWithTag(Query);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListMatchesRequest other) {
      if (other == null) {
        return;
      }
      if (other.limit_ != null) {
        if (limit_ == null || other.Limit != 0) {
          Limit = other.Limit;
        }
      }
      if (other.authoritative_ != null) {
        if (authoritative_ == null || other.Authoritative != false) {
          Authoritative = other.Authoritative;
        }
      }
      if (other.label_ != null) {
        if (label_ == null || other.Label != "") {
          Label = other.Label;
        }
      }
      if (other.minSize_ != null) {
        if (minSize_ == null || other.MinSize != 0) {
          MinSize = other.MinSize;
        }
      }
      if (other.maxSize_ != null) {
        if (maxSize_ == null || other.MaxSize != 0) {
          MaxSize = other.MaxSize;
        }
      }
      if (other.query_ != null) {
        if (query_ == null || other.Query != "") {
          Query = other.Query;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            int? value = _single_limit_codec.Read(input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 18: {
            bool? value = _single_authoritative_codec.Read(input);
            if (authoritative_ == null || value != false) {
              Authoritative = value;
            }
            break;
          }
          case 26: {
            string value = _single_label_codec.Read(input);
            if (label_ == null || value != "") {
              Label = value;
            }
            break;
          }
          case 34: {
            int? value = _single_minSize_codec.Read(input);
            if (minSize_ == null || value != 0) {
              MinSize = value;
            }
            break;
          }
          case 42: {
            int? value = _single_maxSize_codec.Read(input);
            if (maxSize_ == null || value != 0) {
              MaxSize = value;
            }
            break;
          }
          case 50: {
            string value = _single_query_codec.Read(input);
            if (query_ == null || value != "") {
              Query = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            int? value = _single_limit_codec.Read(ref input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 18: {
            bool? value = _single_authoritative_codec.Read(ref input);
            if (authoritative_ == null || value != false) {
              Authoritative = value;
            }
            break;
          }
          case 26: {
            string value = _single_label_codec.Read(ref input);
            if (label_ == null || value != "") {
              Label = value;
            }
            break;
          }
          case 34: {
            int? value = _single_minSize_codec.Read(ref input);
            if (minSize_ == null || value != 0) {
              MinSize = value;
            }
            break;
          }
          case 42: {
            int? value = _single_maxSize_codec.Read(ref input);
            if (maxSize_ == null || value != 0) {
              MaxSize = value;
            }
            break;
          }
          case 50: {
            string value = _single_query_codec.Read(ref input);
            if (query_ == null || value != "") {
              Query = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Get a list of unexpired notifications.
  /// </summary>
  public sealed partial class ListNotificationsRequest : pb::IMessage<ListNotificationsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListNotificationsRequest> _parser = new pb::MessageParser<ListNotificationsRequest>(() => new ListNotificationsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNotificationsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotificationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotificationsRequest(ListNotificationsRequest other) : this() {
      Limit = other.Limit;
      cacheableCursor_ = other.cacheableCursor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotificationsRequest Clone() {
      return new ListNotificationsRequest(this);
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 1;
    private static readonly pb::FieldCodec<int?> _single_limit_codec = pb::FieldCodec.ForStructWrapper<int>(10);
    private int? limit_;
    /// <summary>
    /// The number of notifications to get. Between 1 and 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }


    /// <summary>Field number for the "cacheable_cursor" field.</summary>
    public const int CacheableCursorFieldNumber = 2;
    private string cacheableCursor_ = "";
    /// <summary>
    /// A cursor to page through notifications. May be cached by clients to get from point in time forwards.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CacheableCursor {
      get { return cacheableCursor_; }
      set {
        cacheableCursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNotificationsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNotificationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Limit != other.Limit) return false;
      if (CacheableCursor != other.CacheableCursor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (limit_ != null) hash ^= Limit.GetHashCode();
      if (CacheableCursor.Length != 0) hash ^= CacheableCursor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(output, Limit);
      }
      if (CacheableCursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CacheableCursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(ref output, Limit);
      }
      if (CacheableCursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CacheableCursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (limit_ != null) {
        size += _single_limit_codec.CalculateSizeWithTag(Limit);
      }
      if (CacheableCursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CacheableCursor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNotificationsRequest other) {
      if (other == null) {
        return;
      }
      if (other.limit_ != null) {
        if (limit_ == null || other.Limit != 0) {
          Limit = other.Limit;
        }
      }
      if (other.CacheableCursor.Length != 0) {
        CacheableCursor = other.CacheableCursor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            int? value = _single_limit_codec.Read(input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 18: {
            CacheableCursor = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            int? value = _single_limit_codec.Read(ref input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 18: {
            CacheableCursor = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// List publicly readable storage objects in a given collection.
  /// </summary>
  public sealed partial class ListStorageObjectsRequest : pb::IMessage<ListStorageObjectsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListStorageObjectsRequest> _parser = new pb::MessageParser<ListStorageObjectsRequest>(() => new ListStorageObjectsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListStorageObjectsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListStorageObjectsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListStorageObjectsRequest(ListStorageObjectsRequest other) : this() {
      userId_ = other.userId_;
      collection_ = other.collection_;
      Limit = other.Limit;
      cursor_ = other.cursor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListStorageObjectsRequest Clone() {
      return new ListStorageObjectsRequest(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    /// <summary>
    /// ID of the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 2;
    private string collection_ = "";
    /// <summary>
    /// The collection which stores the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Collection {
      get { return collection_; }
      set {
        collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 3;
    private static readonly pb::FieldCodec<int?> _single_limit_codec = pb::FieldCodec.ForStructWrapper<int>(26);
    private int? limit_;
    /// <summary>
    /// The number of storage objects to list. Between 1 and 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }


    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 4;
    private string cursor_ = "";
    /// <summary>
    /// The cursor to page through results from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListStorageObjectsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListStorageObjectsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Collection != other.Collection) return false;
      if (Limit != other.Limit) return false;
      if (Cursor != other.Cursor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Collection.Length != 0) hash ^= Collection.GetHashCode();
      if (limit_ != null) hash ^= Limit.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Collection.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Collection);
      }
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(output, Limit);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Collection.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Collection);
      }
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(ref output, Limit);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Collection.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
      }
      if (limit_ != null) {
        size += _single_limit_codec.CalculateSizeWithTag(Limit);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListStorageObjectsRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Collection.Length != 0) {
        Collection = other.Collection;
      }
      if (other.limit_ != null) {
        if (limit_ == null || other.Limit != 0) {
          Limit = other.Limit;
        }
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            Collection = input.ReadString();
            break;
          }
          case 26: {
            int? value = _single_limit_codec.Read(input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 34: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            Collection = input.ReadString();
            break;
          }
          case 26: {
            int? value = _single_limit_codec.Read(ref input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 34: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// List tournament records from a given tournament around the owner.
  /// </summary>
  public sealed partial class ListTournamentRecordsAroundOwnerRequest : pb::IMessage<ListTournamentRecordsAroundOwnerRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListTournamentRecordsAroundOwnerRequest> _parser = new pb::MessageParser<ListTournamentRecordsAroundOwnerRequest>(() => new ListTournamentRecordsAroundOwnerRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListTournamentRecordsAroundOwnerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTournamentRecordsAroundOwnerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTournamentRecordsAroundOwnerRequest(ListTournamentRecordsAroundOwnerRequest other) : this() {
      tournamentId_ = other.tournamentId_;
      Limit = other.Limit;
      ownerId_ = other.ownerId_;
      Expiry = other.Expiry;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTournamentRecordsAroundOwnerRequest Clone() {
      return new ListTournamentRecordsAroundOwnerRequest(this);
    }

    /// <summary>Field number for the "tournament_id" field.</summary>
    public const int TournamentIdFieldNumber = 1;
    private string tournamentId_ = "";
    /// <summary>
    /// The ID of the tournament to list for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TournamentId {
      get { return tournamentId_; }
      set {
        tournamentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private static readonly pb::FieldCodec<uint?> _single_limit_codec = pb::FieldCodec.ForStructWrapper<uint>(18);
    private uint? limit_;
    /// <summary>
    /// Max number of records to return. Between 1 and 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }


    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 3;
    private string ownerId_ = "";
    /// <summary>
    /// The owner to retrieve records around.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 4;
    private static readonly pb::FieldCodec<long?> _single_expiry_codec = pb::FieldCodec.ForStructWrapper<long>(34);
    private long? expiry_;
    /// <summary>
    /// Expiry in seconds (since epoch) to begin fetching records from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListTournamentRecordsAroundOwnerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListTournamentRecordsAroundOwnerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TournamentId != other.TournamentId) return false;
      if (Limit != other.Limit) return false;
      if (OwnerId != other.OwnerId) return false;
      if (Expiry != other.Expiry) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TournamentId.Length != 0) hash ^= TournamentId.GetHashCode();
      if (limit_ != null) hash ^= Limit.GetHashCode();
      if (OwnerId.Length != 0) hash ^= OwnerId.GetHashCode();
      if (expiry_ != null) hash ^= Expiry.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TournamentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TournamentId);
      }
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(output, Limit);
      }
      if (OwnerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OwnerId);
      }
      if (expiry_ != null) {
        _single_expiry_codec.WriteTagAndValue(output, Expiry);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TournamentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TournamentId);
      }
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(ref output, Limit);
      }
      if (OwnerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OwnerId);
      }
      if (expiry_ != null) {
        _single_expiry_codec.WriteTagAndValue(ref output, Expiry);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TournamentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TournamentId);
      }
      if (limit_ != null) {
        size += _single_limit_codec.CalculateSizeWithTag(Limit);
      }
      if (OwnerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerId);
      }
      if (expiry_ != null) {
        size += _single_expiry_codec.CalculateSizeWithTag(Expiry);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListTournamentRecordsAroundOwnerRequest other) {
      if (other == null) {
        return;
      }
      if (other.TournamentId.Length != 0) {
        TournamentId = other.TournamentId;
      }
      if (other.limit_ != null) {
        if (limit_ == null || other.Limit != 0) {
          Limit = other.Limit;
        }
      }
      if (other.OwnerId.Length != 0) {
        OwnerId = other.OwnerId;
      }
      if (other.expiry_ != null) {
        if (expiry_ == null || other.Expiry != 0L) {
          Expiry = other.Expiry;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TournamentId = input.ReadString();
            break;
          }
          case 18: {
            uint? value = _single_limit_codec.Read(input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 26: {
            OwnerId = input.ReadString();
            break;
          }
          case 34: {
            long? value = _single_expiry_codec.Read(input);
            if (expiry_ == null || value != 0L) {
              Expiry = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TournamentId = input.ReadString();
            break;
          }
          case 18: {
            uint? value = _single_limit_codec.Read(ref input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 26: {
            OwnerId = input.ReadString();
            break;
          }
          case 34: {
            long? value = _single_expiry_codec.Read(ref input);
            if (expiry_ == null || value != 0L) {
              Expiry = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// List tournament records from a given tournament.
  /// </summary>
  public sealed partial class ListTournamentRecordsRequest : pb::IMessage<ListTournamentRecordsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListTournamentRecordsRequest> _parser = new pb::MessageParser<ListTournamentRecordsRequest>(() => new ListTournamentRecordsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListTournamentRecordsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTournamentRecordsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTournamentRecordsRequest(ListTournamentRecordsRequest other) : this() {
      tournamentId_ = other.tournamentId_;
      ownerIds_ = other.ownerIds_.Clone();
      Limit = other.Limit;
      cursor_ = other.cursor_;
      Expiry = other.Expiry;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTournamentRecordsRequest Clone() {
      return new ListTournamentRecordsRequest(this);
    }

    /// <summary>Field number for the "tournament_id" field.</summary>
    public const int TournamentIdFieldNumber = 1;
    private string tournamentId_ = "";
    /// <summary>
    /// The ID of the tournament to list for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TournamentId {
      get { return tournamentId_; }
      set {
        tournamentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner_ids" field.</summary>
    public const int OwnerIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_ownerIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> ownerIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// One or more owners to retrieve records for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> OwnerIds {
      get { return ownerIds_; }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 3;
    private static readonly pb::FieldCodec<int?> _single_limit_codec = pb::FieldCodec.ForStructWrapper<int>(26);
    private int? limit_;
    /// <summary>
    /// Max number of records to return. Between 1 and 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }


    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 4;
    private string cursor_ = "";
    /// <summary>
    /// A next or previous page cursor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 5;
    private static readonly pb::FieldCodec<long?> _single_expiry_codec = pb::FieldCodec.ForStructWrapper<long>(42);
    private long? expiry_;
    /// <summary>
    /// Expiry in seconds (since epoch) to begin fetching records from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListTournamentRecordsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListTournamentRecordsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TournamentId != other.TournamentId) return false;
      if(!ownerIds_.Equals(other.ownerIds_)) return false;
      if (Limit != other.Limit) return false;
      if (Cursor != other.Cursor) return false;
      if (Expiry != other.Expiry) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TournamentId.Length != 0) hash ^= TournamentId.GetHashCode();
      hash ^= ownerIds_.GetHashCode();
      if (limit_ != null) hash ^= Limit.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (expiry_ != null) hash ^= Expiry.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TournamentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TournamentId);
      }
      ownerIds_.WriteTo(output, _repeated_ownerIds_codec);
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(output, Limit);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Cursor);
      }
      if (expiry_ != null) {
        _single_expiry_codec.WriteTagAndValue(output, Expiry);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TournamentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TournamentId);
      }
      ownerIds_.WriteTo(ref output, _repeated_ownerIds_codec);
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(ref output, Limit);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Cursor);
      }
      if (expiry_ != null) {
        _single_expiry_codec.WriteTagAndValue(ref output, Expiry);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TournamentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TournamentId);
      }
      size += ownerIds_.CalculateSize(_repeated_ownerIds_codec);
      if (limit_ != null) {
        size += _single_limit_codec.CalculateSizeWithTag(Limit);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      if (expiry_ != null) {
        size += _single_expiry_codec.CalculateSizeWithTag(Expiry);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListTournamentRecordsRequest other) {
      if (other == null) {
        return;
      }
      if (other.TournamentId.Length != 0) {
        TournamentId = other.TournamentId;
      }
      ownerIds_.Add(other.ownerIds_);
      if (other.limit_ != null) {
        if (limit_ == null || other.Limit != 0) {
          Limit = other.Limit;
        }
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      if (other.expiry_ != null) {
        if (expiry_ == null || other.Expiry != 0L) {
          Expiry = other.Expiry;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TournamentId = input.ReadString();
            break;
          }
          case 18: {
            ownerIds_.AddEntriesFrom(input, _repeated_ownerIds_codec);
            break;
          }
          case 26: {
            int? value = _single_limit_codec.Read(input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 34: {
            Cursor = input.ReadString();
            break;
          }
          case 42: {
            long? value = _single_expiry_codec.Read(input);
            if (expiry_ == null || value != 0L) {
              Expiry = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TournamentId = input.ReadString();
            break;
          }
          case 18: {
            ownerIds_.AddEntriesFrom(ref input, _repeated_ownerIds_codec);
            break;
          }
          case 26: {
            int? value = _single_limit_codec.Read(ref input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 34: {
            Cursor = input.ReadString();
            break;
          }
          case 42: {
            long? value = _single_expiry_codec.Read(ref input);
            if (expiry_ == null || value != 0L) {
              Expiry = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// List active/upcoming tournaments based on given filters.
  /// </summary>
  public sealed partial class ListTournamentsRequest : pb::IMessage<ListTournamentsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListTournamentsRequest> _parser = new pb::MessageParser<ListTournamentsRequest>(() => new ListTournamentsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListTournamentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTournamentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTournamentsRequest(ListTournamentsRequest other) : this() {
      CategoryStart = other.CategoryStart;
      CategoryEnd = other.CategoryEnd;
      StartTime = other.StartTime;
      EndTime = other.EndTime;
      Limit = other.Limit;
      cursor_ = other.cursor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListTournamentsRequest Clone() {
      return new ListTournamentsRequest(this);
    }

    /// <summary>Field number for the "category_start" field.</summary>
    public const int CategoryStartFieldNumber = 1;
    private static readonly pb::FieldCodec<uint?> _single_categoryStart_codec = pb::FieldCodec.ForStructWrapper<uint>(10);
    private uint? categoryStart_;
    /// <summary>
    /// The start of the categories to include. Defaults to 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? CategoryStart {
      get { return categoryStart_; }
      set {
        categoryStart_ = value;
      }
    }


    /// <summary>Field number for the "category_end" field.</summary>
    public const int CategoryEndFieldNumber = 2;
    private static readonly pb::FieldCodec<uint?> _single_categoryEnd_codec = pb::FieldCodec.ForStructWrapper<uint>(18);
    private uint? categoryEnd_;
    /// <summary>
    /// The end of the categories to include. Defaults to 128.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? CategoryEnd {
      get { return categoryEnd_; }
      set {
        categoryEnd_ = value;
      }
    }


    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 3;
    private static readonly pb::FieldCodec<uint?> _single_startTime_codec = pb::FieldCodec.ForStructWrapper<uint>(26);
    private uint? startTime_;
    /// <summary>
    /// The start time for tournaments. Defaults to epoch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }


    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private static readonly pb::FieldCodec<uint?> _single_endTime_codec = pb::FieldCodec.ForStructWrapper<uint>(34);
    private uint? endTime_;
    /// <summary>
    /// The end time for tournaments. Defaults to +1 year from current Unix time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint? EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }


    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 6;
    private static readonly pb::FieldCodec<int?> _single_limit_codec = pb::FieldCodec.ForStructWrapper<int>(50);
    private int? limit_;
    /// <summary>
    /// Max number of records to return. Between 1 and 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }


    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 8;
    private string cursor_ = "";
    /// <summary>
    /// A next page cursor for listings (optional).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListTournamentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListTournamentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CategoryStart != other.CategoryStart) return false;
      if (CategoryEnd != other.CategoryEnd) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (Limit != other.Limit) return false;
      if (Cursor != other.Cursor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (categoryStart_ != null) hash ^= CategoryStart.GetHashCode();
      if (categoryEnd_ != null) hash ^= CategoryEnd.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (limit_ != null) hash ^= Limit.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (categoryStart_ != null) {
        _single_categoryStart_codec.WriteTagAndValue(output, CategoryStart);
      }
      if (categoryEnd_ != null) {
        _single_categoryEnd_codec.WriteTagAndValue(output, CategoryEnd);
      }
      if (startTime_ != null) {
        _single_startTime_codec.WriteTagAndValue(output, StartTime);
      }
      if (endTime_ != null) {
        _single_endTime_codec.WriteTagAndValue(output, EndTime);
      }
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(output, Limit);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (categoryStart_ != null) {
        _single_categoryStart_codec.WriteTagAndValue(ref output, CategoryStart);
      }
      if (categoryEnd_ != null) {
        _single_categoryEnd_codec.WriteTagAndValue(ref output, CategoryEnd);
      }
      if (startTime_ != null) {
        _single_startTime_codec.WriteTagAndValue(ref output, StartTime);
      }
      if (endTime_ != null) {
        _single_endTime_codec.WriteTagAndValue(ref output, EndTime);
      }
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(ref output, Limit);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (categoryStart_ != null) {
        size += _single_categoryStart_codec.CalculateSizeWithTag(CategoryStart);
      }
      if (categoryEnd_ != null) {
        size += _single_categoryEnd_codec.CalculateSizeWithTag(CategoryEnd);
      }
      if (startTime_ != null) {
        size += _single_startTime_codec.CalculateSizeWithTag(StartTime);
      }
      if (endTime_ != null) {
        size += _single_endTime_codec.CalculateSizeWithTag(EndTime);
      }
      if (limit_ != null) {
        size += _single_limit_codec.CalculateSizeWithTag(Limit);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListTournamentsRequest other) {
      if (other == null) {
        return;
      }
      if (other.categoryStart_ != null) {
        if (categoryStart_ == null || other.CategoryStart != 0) {
          CategoryStart = other.CategoryStart;
        }
      }
      if (other.categoryEnd_ != null) {
        if (categoryEnd_ == null || other.CategoryEnd != 0) {
          CategoryEnd = other.CategoryEnd;
        }
      }
      if (other.startTime_ != null) {
        if (startTime_ == null || other.StartTime != 0) {
          StartTime = other.StartTime;
        }
      }
      if (other.endTime_ != null) {
        if (endTime_ == null || other.EndTime != 0) {
          EndTime = other.EndTime;
        }
      }
      if (other.limit_ != null) {
        if (limit_ == null || other.Limit != 0) {
          Limit = other.Limit;
        }
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            uint? value = _single_categoryStart_codec.Read(input);
            if (categoryStart_ == null || value != 0) {
              CategoryStart = value;
            }
            break;
          }
          case 18: {
            uint? value = _single_categoryEnd_codec.Read(input);
            if (categoryEnd_ == null || value != 0) {
              CategoryEnd = value;
            }
            break;
          }
          case 26: {
            uint? value = _single_startTime_codec.Read(input);
            if (startTime_ == null || value != 0) {
              StartTime = value;
            }
            break;
          }
          case 34: {
            uint? value = _single_endTime_codec.Read(input);
            if (endTime_ == null || value != 0) {
              EndTime = value;
            }
            break;
          }
          case 50: {
            int? value = _single_limit_codec.Read(input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 66: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            uint? value = _single_categoryStart_codec.Read(ref input);
            if (categoryStart_ == null || value != 0) {
              CategoryStart = value;
            }
            break;
          }
          case 18: {
            uint? value = _single_categoryEnd_codec.Read(ref input);
            if (categoryEnd_ == null || value != 0) {
              CategoryEnd = value;
            }
            break;
          }
          case 26: {
            uint? value = _single_startTime_codec.Read(ref input);
            if (startTime_ == null || value != 0) {
              StartTime = value;
            }
            break;
          }
          case 34: {
            uint? value = _single_endTime_codec.Read(ref input);
            if (endTime_ == null || value != 0) {
              EndTime = value;
            }
            break;
          }
          case 50: {
            int? value = _single_limit_codec.Read(ref input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 66: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// List the groups a user is part of, and their relationship to each.
  /// </summary>
  public sealed partial class ListUserGroupsRequest : pb::IMessage<ListUserGroupsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListUserGroupsRequest> _parser = new pb::MessageParser<ListUserGroupsRequest>(() => new ListUserGroupsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListUserGroupsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUserGroupsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUserGroupsRequest(ListUserGroupsRequest other) : this() {
      userId_ = other.userId_;
      Limit = other.Limit;
      State = other.State;
      cursor_ = other.cursor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUserGroupsRequest Clone() {
      return new ListUserGroupsRequest(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    /// <summary>
    /// ID of the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private static readonly pb::FieldCodec<int?> _single_limit_codec = pb::FieldCodec.ForStructWrapper<int>(18);
    private int? limit_;
    /// <summary>
    /// Max number of records to return. Between 1 and 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }


    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private static readonly pb::FieldCodec<int?> _single_state_codec = pb::FieldCodec.ForStructWrapper<int>(26);
    private int? state_;
    /// <summary>
    /// The user group state to list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? State {
      get { return state_; }
      set {
        state_ = value;
      }
    }


    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 4;
    private string cursor_ = "";
    /// <summary>
    /// An optional next page cursor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListUserGroupsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListUserGroupsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Limit != other.Limit) return false;
      if (State != other.State) return false;
      if (Cursor != other.Cursor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (limit_ != null) hash ^= Limit.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(output, Limit);
      }
      if (state_ != null) {
        _single_state_codec.WriteTagAndValue(output, State);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (limit_ != null) {
        _single_limit_codec.WriteTagAndValue(ref output, Limit);
      }
      if (state_ != null) {
        _single_state_codec.WriteTagAndValue(ref output, State);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (limit_ != null) {
        size += _single_limit_codec.CalculateSizeWithTag(Limit);
      }
      if (state_ != null) {
        size += _single_state_codec.CalculateSizeWithTag(State);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListUserGroupsRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.limit_ != null) {
        if (limit_ == null || other.Limit != 0) {
          Limit = other.Limit;
        }
      }
      if (other.state_ != null) {
        if (state_ == null || other.State != 0) {
          State = other.State;
        }
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            int? value = _single_limit_codec.Read(input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 26: {
            int? value = _single_state_codec.Read(input);
            if (state_ == null || value != 0) {
              State = value;
            }
            break;
          }
          case 34: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            int? value = _single_limit_codec.Read(ref input);
            if (limit_ == null || value != 0) {
              Limit = value;
            }
            break;
          }
          case 26: {
            int? value = _single_state_codec.Read(ref input);
            if (state_ == null || value != 0) {
              State = value;
            }
            break;
          }
          case 34: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents a realtime match.
  /// </summary>
  public sealed partial class Match : pb::IMessage<Match>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Match> _parser = new pb::MessageParser<Match>(() => new Match());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Match> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match(Match other) : this() {
      matchId_ = other.matchId_;
      authoritative_ = other.authoritative_;
      Label = other.Label;
      size_ = other.size_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match Clone() {
      return new Match(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    /// <summary>
    /// The ID of the match, can be used to join.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authoritative" field.</summary>
    public const int AuthoritativeFieldNumber = 2;
    private bool authoritative_;
    /// <summary>
    /// True if it's an server-managed authoritative match, false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Authoritative {
      get { return authoritative_; }
      set {
        authoritative_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_label_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string label_;
    /// <summary>
    /// Match label, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = value;
      }
    }


    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 4;
    private int size_;
    /// <summary>
    /// Current number of users in the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Match);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Match other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (Authoritative != other.Authoritative) return false;
      if (Label != other.Label) return false;
      if (Size != other.Size) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (Authoritative != false) hash ^= Authoritative.GetHashCode();
      if (label_ != null) hash ^= Label.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (Authoritative != false) {
        output.WriteRawTag(16);
        output.WriteBool(Authoritative);
      }
      if (label_ != null) {
        _single_label_codec.WriteTagAndValue(output, Label);
      }
      if (Size != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Size);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (Authoritative != false) {
        output.WriteRawTag(16);
        output.WriteBool(Authoritative);
      }
      if (label_ != null) {
        _single_label_codec.WriteTagAndValue(ref output, Label);
      }
      if (Size != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Size);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (Authoritative != false) {
        size += 1 + 1;
      }
      if (label_ != null) {
        size += _single_label_codec.CalculateSizeWithTag(Label);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Match other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.Authoritative != false) {
        Authoritative = other.Authoritative;
      }
      if (other.label_ != null) {
        if (label_ == null || other.Label != "") {
          Label = other.Label;
        }
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 16: {
            Authoritative = input.ReadBool();
            break;
          }
          case 26: {
            string value = _single_label_codec.Read(input);
            if (label_ == null || value != "") {
              Label = value;
            }
            break;
          }
          case 32: {
            Size = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 16: {
            Authoritative = input.ReadBool();
            break;
          }
          case 26: {
            string value = _single_label_codec.Read(ref input);
            if (label_ == null || value != "") {
              Label = value;
            }
            break;
          }
          case 32: {
            Size = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A list of realtime matches.
  /// </summary>
  public sealed partial class MatchList : pb::IMessage<MatchList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchList> _parser = new pb::MessageParser<MatchList>(() => new MatchList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchList(MatchList other) : this() {
      matches_ = other.matches_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchList Clone() {
      return new MatchList(this);
    }

    /// <summary>Field number for the "matches" field.</summary>
    public const int MatchesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.Match> _repeated_matches_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.Match.Parser);
    private readonly pbc::RepeatedField<global::Nakama.Match> matches_ = new pbc::RepeatedField<global::Nakama.Match>();
    /// <summary>
    /// A number of matches corresponding to a list operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.Match> Matches {
      get { return matches_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!matches_.Equals(other.matches_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= matches_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      matches_.WriteTo(output, _repeated_matches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      matches_.WriteTo(ref output, _repeated_matches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += matches_.CalculateSize(_repeated_matches_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchList other) {
      if (other == null) {
        return;
      }
      matches_.Add(other.matches_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            matches_.AddEntriesFrom(input, _repeated_matches_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            matches_.AddEntriesFrom(ref input, _repeated_matches_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A notification in the server.
  /// </summary>
  public sealed partial class Notification : pb::IMessage<Notification>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Notification> _parser = new pb::MessageParser<Notification>(() => new Notification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notification(Notification other) : this() {
      id_ = other.id_;
      subject_ = other.subject_;
      content_ = other.content_;
      code_ = other.code_;
      senderId_ = other.senderId_;
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      persistent_ = other.persistent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notification Clone() {
      return new Notification(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID of the Notification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 2;
    private string subject_ = "";
    /// <summary>
    /// Subject of the notification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subject {
      get { return subject_; }
      set {
        subject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    /// <summary>
    /// Content of the notification in JSON.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 4;
    private int code_;
    /// <summary>
    /// Category code for this notification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "sender_id" field.</summary>
    public const int SenderIdFieldNumber = 5;
    private string senderId_ = "";
    /// <summary>
    /// ID of the sender, if a user. Otherwise 'null'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderId {
      get { return senderId_; }
      set {
        senderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// The UNIX time when the notification was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "persistent" field.</summary>
    public const int PersistentFieldNumber = 7;
    private bool persistent_;
    /// <summary>
    /// True if this notification was persisted to the database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Persistent {
      get { return persistent_; }
      set {
        persistent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Subject != other.Subject) return false;
      if (Content != other.Content) return false;
      if (Code != other.Code) return false;
      if (SenderId != other.SenderId) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (Persistent != other.Persistent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Subject.Length != 0) hash ^= Subject.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (SenderId.Length != 0) hash ^= SenderId.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (Persistent != false) hash ^= Persistent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Subject.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Subject);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (Code != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Code);
      }
      if (SenderId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SenderId);
      }
      if (createTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreateTime);
      }
      if (Persistent != false) {
        output.WriteRawTag(56);
        output.WriteBool(Persistent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Subject.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Subject);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (Code != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Code);
      }
      if (SenderId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SenderId);
      }
      if (createTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreateTime);
      }
      if (Persistent != false) {
        output.WriteRawTag(56);
        output.WriteBool(Persistent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Subject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (SenderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderId);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (Persistent != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notification other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Subject.Length != 0) {
        Subject = other.Subject;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.SenderId.Length != 0) {
        SenderId = other.SenderId;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.Persistent != false) {
        Persistent = other.Persistent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Subject = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 32: {
            Code = input.ReadInt32();
            break;
          }
          case 42: {
            SenderId = input.ReadString();
            break;
          }
          case 50: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 56: {
            Persistent = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Subject = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 32: {
            Code = input.ReadInt32();
            break;
          }
          case 42: {
            SenderId = input.ReadString();
            break;
          }
          case 50: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 56: {
            Persistent = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A collection of zero or more notifications.
  /// </summary>
  public sealed partial class NotificationList : pb::IMessage<NotificationList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NotificationList> _parser = new pb::MessageParser<NotificationList>(() => new NotificationList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotificationList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotificationList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotificationList(NotificationList other) : this() {
      notifications_ = other.notifications_.Clone();
      cacheableCursor_ = other.cacheableCursor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotificationList Clone() {
      return new NotificationList(this);
    }

    /// <summary>Field number for the "notifications" field.</summary>
    public const int NotificationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.Notification> _repeated_notifications_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.Notification.Parser);
    private readonly pbc::RepeatedField<global::Nakama.Notification> notifications_ = new pbc::RepeatedField<global::Nakama.Notification>();
    /// <summary>
    /// Collection of notifications.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.Notification> Notifications {
      get { return notifications_; }
    }

    /// <summary>Field number for the "cacheable_cursor" field.</summary>
    public const int CacheableCursorFieldNumber = 2;
    private string cacheableCursor_ = "";
    /// <summary>
    /// Use this cursor to paginate notifications. Cache this to catch up to new notifications.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CacheableCursor {
      get { return cacheableCursor_; }
      set {
        cacheableCursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotificationList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotificationList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!notifications_.Equals(other.notifications_)) return false;
      if (CacheableCursor != other.CacheableCursor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= notifications_.GetHashCode();
      if (CacheableCursor.Length != 0) hash ^= CacheableCursor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      notifications_.WriteTo(output, _repeated_notifications_codec);
      if (CacheableCursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CacheableCursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      notifications_.WriteTo(ref output, _repeated_notifications_codec);
      if (CacheableCursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CacheableCursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += notifications_.CalculateSize(_repeated_notifications_codec);
      if (CacheableCursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CacheableCursor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotificationList other) {
      if (other == null) {
        return;
      }
      notifications_.Add(other.notifications_);
      if (other.CacheableCursor.Length != 0) {
        CacheableCursor = other.CacheableCursor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            notifications_.AddEntriesFrom(input, _repeated_notifications_codec);
            break;
          }
          case 18: {
            CacheableCursor = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            notifications_.AddEntriesFrom(ref input, _repeated_notifications_codec);
            break;
          }
          case 18: {
            CacheableCursor = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Promote a set of users in a group to the next role up.
  /// </summary>
  public sealed partial class PromoteGroupUsersRequest : pb::IMessage<PromoteGroupUsersRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PromoteGroupUsersRequest> _parser = new pb::MessageParser<PromoteGroupUsersRequest>(() => new PromoteGroupUsersRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PromoteGroupUsersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PromoteGroupUsersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PromoteGroupUsersRequest(PromoteGroupUsersRequest other) : this() {
      groupId_ = other.groupId_;
      userIds_ = other.userIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PromoteGroupUsersRequest Clone() {
      return new PromoteGroupUsersRequest(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    /// The group ID to promote in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_ids" field.</summary>
    public const int UserIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_userIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> userIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The users to promote.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UserIds {
      get { return userIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PromoteGroupUsersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PromoteGroupUsersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if(!userIds_.Equals(other.userIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      hash ^= userIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      userIds_.WriteTo(output, _repeated_userIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      userIds_.WriteTo(ref output, _repeated_userIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PromoteGroupUsersRequest other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      userIds_.Add(other.userIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 18: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 18: {
            userIds_.AddEntriesFrom(ref input, _repeated_userIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Storage objects to get.
  /// </summary>
  public sealed partial class ReadStorageObjectId : pb::IMessage<ReadStorageObjectId>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReadStorageObjectId> _parser = new pb::MessageParser<ReadStorageObjectId>(() => new ReadStorageObjectId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadStorageObjectId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadStorageObjectId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadStorageObjectId(ReadStorageObjectId other) : this() {
      collection_ = other.collection_;
      key_ = other.key_;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadStorageObjectId Clone() {
      return new ReadStorageObjectId(this);
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 1;
    private string collection_ = "";
    /// <summary>
    /// The collection which stores the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Collection {
      get { return collection_; }
      set {
        collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// The key of the object within the collection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 3;
    private string userId_ = "";
    /// <summary>
    /// The user owner of the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadStorageObjectId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadStorageObjectId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Collection != other.Collection) return false;
      if (Key != other.Key) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Collection.Length != 0) hash ^= Collection.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Collection.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Collection);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Collection.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Collection);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Collection.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadStorageObjectId other) {
      if (other == null) {
        return;
      }
      if (other.Collection.Length != 0) {
        Collection = other.Collection;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Collection = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            UserId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Collection = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            UserId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Batch get storage objects.
  /// </summary>
  public sealed partial class ReadStorageObjectsRequest : pb::IMessage<ReadStorageObjectsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReadStorageObjectsRequest> _parser = new pb::MessageParser<ReadStorageObjectsRequest>(() => new ReadStorageObjectsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadStorageObjectsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadStorageObjectsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadStorageObjectsRequest(ReadStorageObjectsRequest other) : this() {
      objectIds_ = other.objectIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadStorageObjectsRequest Clone() {
      return new ReadStorageObjectsRequest(this);
    }

    /// <summary>Field number for the "object_ids" field.</summary>
    public const int ObjectIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.ReadStorageObjectId> _repeated_objectIds_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.ReadStorageObjectId.Parser);
    private readonly pbc::RepeatedField<global::Nakama.ReadStorageObjectId> objectIds_ = new pbc::RepeatedField<global::Nakama.ReadStorageObjectId>();
    /// <summary>
    /// Batch of storage objects.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.ReadStorageObjectId> ObjectIds {
      get { return objectIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadStorageObjectsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadStorageObjectsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objectIds_.Equals(other.objectIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objectIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      objectIds_.WriteTo(output, _repeated_objectIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      objectIds_.WriteTo(ref output, _repeated_objectIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objectIds_.CalculateSize(_repeated_objectIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadStorageObjectsRequest other) {
      if (other == null) {
        return;
      }
      objectIds_.Add(other.objectIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objectIds_.AddEntriesFrom(input, _repeated_objectIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            objectIds_.AddEntriesFrom(ref input, _repeated_objectIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Execute an Lua function on the server.
  /// </summary>
  public sealed partial class Rpc : pb::IMessage<Rpc>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Rpc> _parser = new pb::MessageParser<Rpc>(() => new Rpc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rpc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rpc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rpc(Rpc other) : this() {
      id_ = other.id_;
      payload_ = other.payload_;
      httpKey_ = other.httpKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rpc Clone() {
      return new Rpc(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The identifier of the function.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private string payload_ = "";
    /// <summary>
    /// The payload of the function which must be a JSON object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "http_key" field.</summary>
    public const int HttpKeyFieldNumber = 3;
    private string httpKey_ = "";
    /// <summary>
    /// The authentication key used when executed as a non-client HTTP request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HttpKey {
      get { return httpKey_; }
      set {
        httpKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rpc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rpc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Payload != other.Payload) return false;
      if (HttpKey != other.HttpKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (HttpKey.Length != 0) hash ^= HttpKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Payload);
      }
      if (HttpKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HttpKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Payload);
      }
      if (HttpKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HttpKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Payload);
      }
      if (HttpKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HttpKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rpc other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.HttpKey.Length != 0) {
        HttpKey = other.HttpKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Payload = input.ReadString();
            break;
          }
          case 26: {
            HttpKey = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Payload = input.ReadString();
            break;
          }
          case 26: {
            HttpKey = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A user's session used to authenticate messages.
  /// </summary>
  public sealed partial class Session : pb::IMessage<Session>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Session> _parser = new pb::MessageParser<Session>(() => new Session());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Session> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session(Session other) : this() {
      created_ = other.created_;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session Clone() {
      return new Session(this);
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 1;
    private bool created_;
    /// <summary>
    /// True if the corresponding account was just created, false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    /// <summary>
    /// Authentication credentials.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Session);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Session other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Created != other.Created) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Created != false) hash ^= Created.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Created != false) {
        output.WriteRawTag(8);
        output.WriteBool(Created);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Created != false) {
        output.WriteRawTag(8);
        output.WriteBool(Created);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Created != false) {
        size += 1 + 1;
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Session other) {
      if (other == null) {
        return;
      }
      if (other.Created != false) {
        Created = other.Created;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Created = input.ReadBool();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Created = input.ReadBool();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// An object within the storage engine.
  /// </summary>
  public sealed partial class StorageObject : pb::IMessage<StorageObject>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StorageObject> _parser = new pb::MessageParser<StorageObject>(() => new StorageObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StorageObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageObject(StorageObject other) : this() {
      collection_ = other.collection_;
      key_ = other.key_;
      userId_ = other.userId_;
      value_ = other.value_;
      version_ = other.version_;
      permissionRead_ = other.permissionRead_;
      permissionWrite_ = other.permissionWrite_;
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      updateTime_ = other.updateTime_ != null ? other.updateTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageObject Clone() {
      return new StorageObject(this);
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 1;
    private string collection_ = "";
    /// <summary>
    /// The collection which stores the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Collection {
      get { return collection_; }
      set {
        collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// The key of the object within the collection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 3;
    private string userId_ = "";
    /// <summary>
    /// The user owner of the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private string value_ = "";
    /// <summary>
    /// The value of the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 5;
    private string version_ = "";
    /// <summary>
    /// The version hash of the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "permission_read" field.</summary>
    public const int PermissionReadFieldNumber = 6;
    private int permissionRead_;
    /// <summary>
    /// The read access permissions for the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PermissionRead {
      get { return permissionRead_; }
      set {
        permissionRead_ = value;
      }
    }

    /// <summary>Field number for the "permission_write" field.</summary>
    public const int PermissionWriteFieldNumber = 7;
    private int permissionWrite_;
    /// <summary>
    /// The write access permissions for the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PermissionWrite {
      get { return permissionWrite_; }
      set {
        permissionWrite_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// The UNIX time when the object was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
    /// <summary>
    /// The UNIX time when the object was last updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StorageObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StorageObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Collection != other.Collection) return false;
      if (Key != other.Key) return false;
      if (UserId != other.UserId) return false;
      if (Value != other.Value) return false;
      if (Version != other.Version) return false;
      if (PermissionRead != other.PermissionRead) return false;
      if (PermissionWrite != other.PermissionWrite) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Collection.Length != 0) hash ^= Collection.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (PermissionRead != 0) hash ^= PermissionRead.GetHashCode();
      if (PermissionWrite != 0) hash ^= PermissionWrite.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Collection.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Collection);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserId);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Value);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Version);
      }
      if (PermissionRead != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PermissionRead);
      }
      if (PermissionWrite != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PermissionWrite);
      }
      if (createTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(UpdateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Collection.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Collection);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserId);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Value);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Version);
      }
      if (PermissionRead != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PermissionRead);
      }
      if (PermissionWrite != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PermissionWrite);
      }
      if (createTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(UpdateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Collection.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (PermissionRead != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PermissionRead);
      }
      if (PermissionWrite != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PermissionWrite);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (updateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StorageObject other) {
      if (other == null) {
        return;
      }
      if (other.Collection.Length != 0) {
        Collection = other.Collection;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.PermissionRead != 0) {
        PermissionRead = other.PermissionRead;
      }
      if (other.PermissionWrite != 0) {
        PermissionWrite = other.PermissionWrite;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.updateTime_ != null) {
        if (updateTime_ == null) {
          UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Collection = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            UserId = input.ReadString();
            break;
          }
          case 34: {
            Value = input.ReadString();
            break;
          }
          case 42: {
            Version = input.ReadString();
            break;
          }
          case 48: {
            PermissionRead = input.ReadInt32();
            break;
          }
          case 56: {
            PermissionWrite = input.ReadInt32();
            break;
          }
          case 66: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 74: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Collection = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            UserId = input.ReadString();
            break;
          }
          case 34: {
            Value = input.ReadString();
            break;
          }
          case 42: {
            Version = input.ReadString();
            break;
          }
          case 48: {
            PermissionRead = input.ReadInt32();
            break;
          }
          case 56: {
            PermissionWrite = input.ReadInt32();
            break;
          }
          case 66: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 74: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A storage acknowledgement.
  /// </summary>
  public sealed partial class StorageObjectAck : pb::IMessage<StorageObjectAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StorageObjectAck> _parser = new pb::MessageParser<StorageObjectAck>(() => new StorageObjectAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StorageObjectAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageObjectAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageObjectAck(StorageObjectAck other) : this() {
      collection_ = other.collection_;
      key_ = other.key_;
      version_ = other.version_;
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageObjectAck Clone() {
      return new StorageObjectAck(this);
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 1;
    private string collection_ = "";
    /// <summary>
    /// The collection which stores the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Collection {
      get { return collection_; }
      set {
        collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// The key of the object within the collection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    /// <summary>
    /// The version hash of the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 4;
    private string userId_ = "";
    /// <summary>
    /// The owner of the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StorageObjectAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StorageObjectAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Collection != other.Collection) return false;
      if (Key != other.Key) return false;
      if (Version != other.Version) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Collection.Length != 0) hash ^= Collection.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Collection.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Collection);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Collection.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Collection);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Collection.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StorageObjectAck other) {
      if (other == null) {
        return;
      }
      if (other.Collection.Length != 0) {
        Collection = other.Collection;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Collection = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
          case 34: {
            UserId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Collection = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
          case 34: {
            UserId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Batch of acknowledgements for the storage object write.
  /// </summary>
  public sealed partial class StorageObjectAcks : pb::IMessage<StorageObjectAcks>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StorageObjectAcks> _parser = new pb::MessageParser<StorageObjectAcks>(() => new StorageObjectAcks());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StorageObjectAcks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageObjectAcks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageObjectAcks(StorageObjectAcks other) : this() {
      acks_ = other.acks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageObjectAcks Clone() {
      return new StorageObjectAcks(this);
    }

    /// <summary>Field number for the "acks" field.</summary>
    public const int AcksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.StorageObjectAck> _repeated_acks_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.StorageObjectAck.Parser);
    private readonly pbc::RepeatedField<global::Nakama.StorageObjectAck> acks_ = new pbc::RepeatedField<global::Nakama.StorageObjectAck>();
    /// <summary>
    /// Batch of storage write acknowledgements.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.StorageObjectAck> Acks {
      get { return acks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StorageObjectAcks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StorageObjectAcks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!acks_.Equals(other.acks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= acks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      acks_.WriteTo(output, _repeated_acks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      acks_.WriteTo(ref output, _repeated_acks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += acks_.CalculateSize(_repeated_acks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StorageObjectAcks other) {
      if (other == null) {
        return;
      }
      acks_.Add(other.acks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            acks_.AddEntriesFrom(input, _repeated_acks_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            acks_.AddEntriesFrom(ref input, _repeated_acks_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Batch of storage objects.
  /// </summary>
  public sealed partial class StorageObjects : pb::IMessage<StorageObjects>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StorageObjects> _parser = new pb::MessageParser<StorageObjects>(() => new StorageObjects());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StorageObjects> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageObjects() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageObjects(StorageObjects other) : this() {
      objects_ = other.objects_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageObjects Clone() {
      return new StorageObjects(this);
    }

    /// <summary>Field number for the "objects" field.</summary>
    public const int ObjectsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.StorageObject> _repeated_objects_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.StorageObject.Parser);
    private readonly pbc::RepeatedField<global::Nakama.StorageObject> objects_ = new pbc::RepeatedField<global::Nakama.StorageObject>();
    /// <summary>
    /// The batch of storage objects.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.StorageObject> Objects {
      get { return objects_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StorageObjects);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StorageObjects other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objects_.Equals(other.objects_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objects_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      objects_.WriteTo(output, _repeated_objects_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      objects_.WriteTo(ref output, _repeated_objects_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objects_.CalculateSize(_repeated_objects_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StorageObjects other) {
      if (other == null) {
        return;
      }
      objects_.Add(other.objects_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objects_.AddEntriesFrom(input, _repeated_objects_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            objects_.AddEntriesFrom(ref input, _repeated_objects_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// List of storage objects.
  /// </summary>
  public sealed partial class StorageObjectList : pb::IMessage<StorageObjectList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StorageObjectList> _parser = new pb::MessageParser<StorageObjectList>(() => new StorageObjectList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StorageObjectList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageObjectList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageObjectList(StorageObjectList other) : this() {
      objects_ = other.objects_.Clone();
      cursor_ = other.cursor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StorageObjectList Clone() {
      return new StorageObjectList(this);
    }

    /// <summary>Field number for the "objects" field.</summary>
    public const int ObjectsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.StorageObject> _repeated_objects_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.StorageObject.Parser);
    private readonly pbc::RepeatedField<global::Nakama.StorageObject> objects_ = new pbc::RepeatedField<global::Nakama.StorageObject>();
    /// <summary>
    /// The list of storage objects.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.StorageObject> Objects {
      get { return objects_; }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private string cursor_ = "";
    /// <summary>
    /// The cursor for the next page of results, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StorageObjectList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StorageObjectList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objects_.Equals(other.objects_)) return false;
      if (Cursor != other.Cursor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objects_.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      objects_.WriteTo(output, _repeated_objects_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      objects_.WriteTo(ref output, _repeated_objects_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objects_.CalculateSize(_repeated_objects_codec);
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StorageObjectList other) {
      if (other == null) {
        return;
      }
      objects_.Add(other.objects_);
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objects_.AddEntriesFrom(input, _repeated_objects_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            objects_.AddEntriesFrom(ref input, _repeated_objects_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A tournament on the server.
  /// </summary>
  public sealed partial class Tournament : pb::IMessage<Tournament>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Tournament> _parser = new pb::MessageParser<Tournament>(() => new Tournament());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tournament> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tournament() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tournament(Tournament other) : this() {
      id_ = other.id_;
      title_ = other.title_;
      description_ = other.description_;
      category_ = other.category_;
      sortOrder_ = other.sortOrder_;
      size_ = other.size_;
      maxSize_ = other.maxSize_;
      maxNumScore_ = other.maxNumScore_;
      canEnter_ = other.canEnter_;
      endActive_ = other.endActive_;
      nextReset_ = other.nextReset_;
      metadata_ = other.metadata_;
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      duration_ = other.duration_;
      startActive_ = other.startActive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tournament Clone() {
      return new Tournament(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The ID of the tournament.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    /// <summary>
    /// The title for the tournament.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// The description of the tournament. May be blank.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 4;
    private uint category_;
    /// <summary>
    /// The category of the tournament. e.g. "vip" could be category 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "sort_order" field.</summary>
    public const int SortOrderFieldNumber = 5;
    private uint sortOrder_;
    /// <summary>
    /// ASC or DESC sort mode of scores in the tournament.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SortOrder {
      get { return sortOrder_; }
      set {
        sortOrder_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 6;
    private uint size_;
    /// <summary>
    /// The current number of players in the tournament.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "max_size" field.</summary>
    public const int MaxSizeFieldNumber = 7;
    private uint maxSize_;
    /// <summary>
    /// The maximum number of players for the tournament.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxSize {
      get { return maxSize_; }
      set {
        maxSize_ = value;
      }
    }

    /// <summary>Field number for the "max_num_score" field.</summary>
    public const int MaxNumScoreFieldNumber = 8;
    private uint maxNumScore_;
    /// <summary>
    /// The maximum score updates allowed per player for the current tournament.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxNumScore {
      get { return maxNumScore_; }
      set {
        maxNumScore_ = value;
      }
    }

    /// <summary>Field number for the "can_enter" field.</summary>
    public const int CanEnterFieldNumber = 9;
    private bool canEnter_;
    /// <summary>
    /// True if the tournament is active and can enter. A computed value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanEnter {
      get { return canEnter_; }
      set {
        canEnter_ = value;
      }
    }

    /// <summary>Field number for the "end_active" field.</summary>
    public const int EndActiveFieldNumber = 10;
    private uint endActive_;
    /// <summary>
    /// The UNIX time when the tournament stops being active until next reset. A computed value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EndActive {
      get { return endActive_; }
      set {
        endActive_ = value;
      }
    }

    /// <summary>Field number for the "next_reset" field.</summary>
    public const int NextResetFieldNumber = 11;
    private uint nextReset_;
    /// <summary>
    /// The UNIX time when the tournament is next playable. A computed value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextReset {
      get { return nextReset_; }
      set {
        nextReset_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 12;
    private string metadata_ = "";
    /// <summary>
    /// Additional information stored as a JSON object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 13;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// The UNIX time when the tournament was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 14;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startTime_;
    /// <summary>
    /// The UNIX time when the tournament will start.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 15;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTime_;
    /// <summary>
    /// The UNIX time when the tournament will be stopped.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 16;
    private uint duration_;
    /// <summary>
    /// Duration of the tournament in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "start_active" field.</summary>
    public const int StartActiveFieldNumber = 17;
    private uint startActive_;
    /// <summary>
    /// The UNIX time when the tournament start being active. A computed value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartActive {
      get { return startActive_; }
      set {
        startActive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tournament);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tournament other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Title != other.Title) return false;
      if (Description != other.Description) return false;
      if (Category != other.Category) return false;
      if (SortOrder != other.SortOrder) return false;
      if (Size != other.Size) return false;
      if (MaxSize != other.MaxSize) return false;
      if (MaxNumScore != other.MaxNumScore) return false;
      if (CanEnter != other.CanEnter) return false;
      if (EndActive != other.EndActive) return false;
      if (NextReset != other.NextReset) return false;
      if (Metadata != other.Metadata) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (Duration != other.Duration) return false;
      if (StartActive != other.StartActive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Category != 0) hash ^= Category.GetHashCode();
      if (SortOrder != 0) hash ^= SortOrder.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (MaxSize != 0) hash ^= MaxSize.GetHashCode();
      if (MaxNumScore != 0) hash ^= MaxNumScore.GetHashCode();
      if (CanEnter != false) hash ^= CanEnter.GetHashCode();
      if (EndActive != 0) hash ^= EndActive.GetHashCode();
      if (NextReset != 0) hash ^= NextReset.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (StartActive != 0) hash ^= StartActive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Category != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Category);
      }
      if (SortOrder != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SortOrder);
      }
      if (Size != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Size);
      }
      if (MaxSize != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(MaxSize);
      }
      if (MaxNumScore != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(MaxNumScore);
      }
      if (CanEnter != false) {
        output.WriteRawTag(72);
        output.WriteBool(CanEnter);
      }
      if (EndActive != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(EndActive);
      }
      if (NextReset != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(NextReset);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Metadata);
      }
      if (createTime_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(CreateTime);
      }
      if (startTime_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(EndTime);
      }
      if (Duration != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Duration);
      }
      if (StartActive != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(StartActive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Category != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Category);
      }
      if (SortOrder != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SortOrder);
      }
      if (Size != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Size);
      }
      if (MaxSize != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(MaxSize);
      }
      if (MaxNumScore != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(MaxNumScore);
      }
      if (CanEnter != false) {
        output.WriteRawTag(72);
        output.WriteBool(CanEnter);
      }
      if (EndActive != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(EndActive);
      }
      if (NextReset != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(NextReset);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Metadata);
      }
      if (createTime_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(CreateTime);
      }
      if (startTime_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(EndTime);
      }
      if (Duration != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(Duration);
      }
      if (StartActive != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(StartActive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Category != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Category);
      }
      if (SortOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SortOrder);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Size);
      }
      if (MaxSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxSize);
      }
      if (MaxNumScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxNumScore);
      }
      if (CanEnter != false) {
        size += 1 + 1;
      }
      if (EndActive != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EndActive);
      }
      if (NextReset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextReset);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Metadata);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (Duration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
      }
      if (StartActive != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StartActive);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tournament other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Category != 0) {
        Category = other.Category;
      }
      if (other.SortOrder != 0) {
        SortOrder = other.SortOrder;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.MaxSize != 0) {
        MaxSize = other.MaxSize;
      }
      if (other.MaxNumScore != 0) {
        MaxNumScore = other.MaxNumScore;
      }
      if (other.CanEnter != false) {
        CanEnter = other.CanEnter;
      }
      if (other.EndActive != 0) {
        EndActive = other.EndActive;
      }
      if (other.NextReset != 0) {
        NextReset = other.NextReset;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.StartActive != 0) {
        StartActive = other.StartActive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            Category = input.ReadUInt32();
            break;
          }
          case 40: {
            SortOrder = input.ReadUInt32();
            break;
          }
          case 48: {
            Size = input.ReadUInt32();
            break;
          }
          case 56: {
            MaxSize = input.ReadUInt32();
            break;
          }
          case 64: {
            MaxNumScore = input.ReadUInt32();
            break;
          }
          case 72: {
            CanEnter = input.ReadBool();
            break;
          }
          case 80: {
            EndActive = input.ReadUInt32();
            break;
          }
          case 88: {
            NextReset = input.ReadUInt32();
            break;
          }
          case 98: {
            Metadata = input.ReadString();
            break;
          }
          case 106: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 114: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 122: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 128: {
            Duration = input.ReadUInt32();
            break;
          }
          case 136: {
            StartActive = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            Category = input.ReadUInt32();
            break;
          }
          case 40: {
            SortOrder = input.ReadUInt32();
            break;
          }
          case 48: {
            Size = input.ReadUInt32();
            break;
          }
          case 56: {
            MaxSize = input.ReadUInt32();
            break;
          }
          case 64: {
            MaxNumScore = input.ReadUInt32();
            break;
          }
          case 72: {
            CanEnter = input.ReadBool();
            break;
          }
          case 80: {
            EndActive = input.ReadUInt32();
            break;
          }
          case 88: {
            NextReset = input.ReadUInt32();
            break;
          }
          case 98: {
            Metadata = input.ReadString();
            break;
          }
          case 106: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 114: {
            if (startTime_ == null) {
              StartTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 122: {
            if (endTime_ == null) {
              EndTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 128: {
            Duration = input.ReadUInt32();
            break;
          }
          case 136: {
            StartActive = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A list of tournaments.
  /// </summary>
  public sealed partial class TournamentList : pb::IMessage<TournamentList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TournamentList> _parser = new pb::MessageParser<TournamentList>(() => new TournamentList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TournamentList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TournamentList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TournamentList(TournamentList other) : this() {
      tournaments_ = other.tournaments_.Clone();
      cursor_ = other.cursor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TournamentList Clone() {
      return new TournamentList(this);
    }

    /// <summary>Field number for the "tournaments" field.</summary>
    public const int TournamentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.Tournament> _repeated_tournaments_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.Tournament.Parser);
    private readonly pbc::RepeatedField<global::Nakama.Tournament> tournaments_ = new pbc::RepeatedField<global::Nakama.Tournament>();
    /// <summary>
    /// The list of tournaments returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.Tournament> Tournaments {
      get { return tournaments_; }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private string cursor_ = "";
    /// <summary>
    /// A pagination cursor (optional).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TournamentList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TournamentList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tournaments_.Equals(other.tournaments_)) return false;
      if (Cursor != other.Cursor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tournaments_.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      tournaments_.WriteTo(output, _repeated_tournaments_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      tournaments_.WriteTo(ref output, _repeated_tournaments_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tournaments_.CalculateSize(_repeated_tournaments_codec);
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TournamentList other) {
      if (other == null) {
        return;
      }
      tournaments_.Add(other.tournaments_);
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tournaments_.AddEntriesFrom(input, _repeated_tournaments_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            tournaments_.AddEntriesFrom(ref input, _repeated_tournaments_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A set of tournament records which may be part of a tournament records page or a batch of individual records.
  /// </summary>
  public sealed partial class TournamentRecordList : pb::IMessage<TournamentRecordList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TournamentRecordList> _parser = new pb::MessageParser<TournamentRecordList>(() => new TournamentRecordList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TournamentRecordList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TournamentRecordList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TournamentRecordList(TournamentRecordList other) : this() {
      records_ = other.records_.Clone();
      ownerRecords_ = other.ownerRecords_.Clone();
      nextCursor_ = other.nextCursor_;
      prevCursor_ = other.prevCursor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TournamentRecordList Clone() {
      return new TournamentRecordList(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.LeaderboardRecord> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.LeaderboardRecord.Parser);
    private readonly pbc::RepeatedField<global::Nakama.LeaderboardRecord> records_ = new pbc::RepeatedField<global::Nakama.LeaderboardRecord>();
    /// <summary>
    /// A list of tournament records.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.LeaderboardRecord> Records {
      get { return records_; }
    }

    /// <summary>Field number for the "owner_records" field.</summary>
    public const int OwnerRecordsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nakama.LeaderboardRecord> _repeated_ownerRecords_codec
        = pb::FieldCodec.ForMessage(18, global::Nakama.LeaderboardRecord.Parser);
    private readonly pbc::RepeatedField<global::Nakama.LeaderboardRecord> ownerRecords_ = new pbc::RepeatedField<global::Nakama.LeaderboardRecord>();
    /// <summary>
    /// A batched set of tournament records belonging to specified owners.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.LeaderboardRecord> OwnerRecords {
      get { return ownerRecords_; }
    }

    /// <summary>Field number for the "next_cursor" field.</summary>
    public const int NextCursorFieldNumber = 3;
    private string nextCursor_ = "";
    /// <summary>
    /// The cursor to send when retireving the next page (optional).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextCursor {
      get { return nextCursor_; }
      set {
        nextCursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prev_cursor" field.</summary>
    public const int PrevCursorFieldNumber = 4;
    private string prevCursor_ = "";
    /// <summary>
    /// The cursor to send when retrieving the previous page (optional).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrevCursor {
      get { return prevCursor_; }
      set {
        prevCursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TournamentRecordList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TournamentRecordList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      if(!ownerRecords_.Equals(other.ownerRecords_)) return false;
      if (NextCursor != other.NextCursor) return false;
      if (PrevCursor != other.PrevCursor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      hash ^= ownerRecords_.GetHashCode();
      if (NextCursor.Length != 0) hash ^= NextCursor.GetHashCode();
      if (PrevCursor.Length != 0) hash ^= PrevCursor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      records_.WriteTo(output, _repeated_records_codec);
      ownerRecords_.WriteTo(output, _repeated_ownerRecords_codec);
      if (NextCursor.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NextCursor);
      }
      if (PrevCursor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PrevCursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      records_.WriteTo(ref output, _repeated_records_codec);
      ownerRecords_.WriteTo(ref output, _repeated_ownerRecords_codec);
      if (NextCursor.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NextCursor);
      }
      if (PrevCursor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PrevCursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      size += ownerRecords_.CalculateSize(_repeated_ownerRecords_codec);
      if (NextCursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextCursor);
      }
      if (PrevCursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrevCursor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TournamentRecordList other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      ownerRecords_.Add(other.ownerRecords_);
      if (other.NextCursor.Length != 0) {
        NextCursor = other.NextCursor;
      }
      if (other.PrevCursor.Length != 0) {
        PrevCursor = other.PrevCursor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
          case 18: {
            ownerRecords_.AddEntriesFrom(input, _repeated_ownerRecords_codec);
            break;
          }
          case 26: {
            NextCursor = input.ReadString();
            break;
          }
          case 34: {
            PrevCursor = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            records_.AddEntriesFrom(ref input, _repeated_records_codec);
            break;
          }
          case 18: {
            ownerRecords_.AddEntriesFrom(ref input, _repeated_ownerRecords_codec);
            break;
          }
          case 26: {
            NextCursor = input.ReadString();
            break;
          }
          case 34: {
            PrevCursor = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Update a user's account details.
  /// </summary>
  public sealed partial class UpdateAccountRequest : pb::IMessage<UpdateAccountRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateAccountRequest> _parser = new pb::MessageParser<UpdateAccountRequest>(() => new UpdateAccountRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateAccountRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAccountRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAccountRequest(UpdateAccountRequest other) : this() {
      Username = other.Username;
      DisplayName = other.DisplayName;
      AvatarUrl = other.AvatarUrl;
      LangTag = other.LangTag;
      Location = other.Location;
      Timezone = other.Timezone;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAccountRequest Clone() {
      return new UpdateAccountRequest(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_username_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string username_;
    /// <summary>
    /// The username of the user's account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = value;
      }
    }


    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_displayName_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string displayName_;
    /// <summary>
    /// The display name of the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = value;
      }
    }


    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_avatarUrl_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string avatarUrl_;
    /// <summary>
    /// A URL for an avatar image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = value;
      }
    }


    /// <summary>Field number for the "lang_tag" field.</summary>
    public const int LangTagFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _single_langTag_codec = pb::FieldCodec.ForClassWrapper<string>(34);
    private string langTag_;
    /// <summary>
    /// The language expected to be a tag which follows the BCP-47 spec.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LangTag {
      get { return langTag_; }
      set {
        langTag_ = value;
      }
    }


    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_location_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string location_;
    /// <summary>
    /// The location set by the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }


    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_timezone_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string timezone_;
    /// <summary>
    /// The timezone set by the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_; }
      set {
        timezone_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateAccountRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateAccountRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (DisplayName != other.DisplayName) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (LangTag != other.LangTag) return false;
      if (Location != other.Location) return false;
      if (Timezone != other.Timezone) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (username_ != null) hash ^= Username.GetHashCode();
      if (displayName_ != null) hash ^= DisplayName.GetHashCode();
      if (avatarUrl_ != null) hash ^= AvatarUrl.GetHashCode();
      if (langTag_ != null) hash ^= LangTag.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (timezone_ != null) hash ^= Timezone.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (username_ != null) {
        _single_username_codec.WriteTagAndValue(output, Username);
      }
      if (displayName_ != null) {
        _single_displayName_codec.WriteTagAndValue(output, DisplayName);
      }
      if (avatarUrl_ != null) {
        _single_avatarUrl_codec.WriteTagAndValue(output, AvatarUrl);
      }
      if (langTag_ != null) {
        _single_langTag_codec.WriteTagAndValue(output, LangTag);
      }
      if (location_ != null) {
        _single_location_codec.WriteTagAndValue(output, Location);
      }
      if (timezone_ != null) {
        _single_timezone_codec.WriteTagAndValue(output, Timezone);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (username_ != null) {
        _single_username_codec.WriteTagAndValue(ref output, Username);
      }
      if (displayName_ != null) {
        _single_displayName_codec.WriteTagAndValue(ref output, DisplayName);
      }
      if (avatarUrl_ != null) {
        _single_avatarUrl_codec.WriteTagAndValue(ref output, AvatarUrl);
      }
      if (langTag_ != null) {
        _single_langTag_codec.WriteTagAndValue(ref output, LangTag);
      }
      if (location_ != null) {
        _single_location_codec.WriteTagAndValue(ref output, Location);
      }
      if (timezone_ != null) {
        _single_timezone_codec.WriteTagAndValue(ref output, Timezone);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (username_ != null) {
        size += _single_username_codec.CalculateSizeWithTag(Username);
      }
      if (displayName_ != null) {
        size += _single_displayName_codec.CalculateSizeWithTag(DisplayName);
      }
      if (avatarUrl_ != null) {
        size += _single_avatarUrl_codec.CalculateSizeWithTag(AvatarUrl);
      }
      if (langTag_ != null) {
        size += _single_langTag_codec.CalculateSizeWithTag(LangTag);
      }
      if (location_ != null) {
        size += _single_location_codec.CalculateSizeWithTag(Location);
      }
      if (timezone_ != null) {
        size += _single_timezone_codec.CalculateSizeWithTag(Timezone);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateAccountRequest other) {
      if (other == null) {
        return;
      }
      if (other.username_ != null) {
        if (username_ == null || other.Username != "") {
          Username = other.Username;
        }
      }
      if (other.displayName_ != null) {
        if (displayName_ == null || other.DisplayName != "") {
          DisplayName = other.DisplayName;
        }
      }
      if (other.avatarUrl_ != null) {
        if (avatarUrl_ == null || other.AvatarUrl != "") {
          AvatarUrl = other.AvatarUrl;
        }
      }
      if (other.langTag_ != null) {
        if (langTag_ == null || other.LangTag != "") {
          LangTag = other.LangTag;
        }
      }
      if (other.location_ != null) {
        if (location_ == null || other.Location != "") {
          Location = other.Location;
        }
      }
      if (other.timezone_ != null) {
        if (timezone_ == null || other.Timezone != "") {
          Timezone = other.Timezone;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_username_codec.Read(input);
            if (username_ == null || value != "") {
              Username = value;
            }
            break;
          }
          case 18: {
            string value = _single_displayName_codec.Read(input);
            if (displayName_ == null || value != "") {
              DisplayName = value;
            }
            break;
          }
          case 26: {
            string value = _single_avatarUrl_codec.Read(input);
            if (avatarUrl_ == null || value != "") {
              AvatarUrl = value;
            }
            break;
          }
          case 34: {
            string value = _single_langTag_codec.Read(input);
            if (langTag_ == null || value != "") {
              LangTag = value;
            }
            break;
          }
          case 42: {
            string value = _single_location_codec.Read(input);
            if (location_ == null || value != "") {
              Location = value;
            }
            break;
          }
          case 50: {
            string value = _single_timezone_codec.Read(input);
            if (timezone_ == null || value != "") {
              Timezone = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            string value = _single_username_codec.Read(ref input);
            if (username_ == null || value != "") {
              Username = value;
            }
            break;
          }
          case 18: {
            string value = _single_displayName_codec.Read(ref input);
            if (displayName_ == null || value != "") {
              DisplayName = value;
            }
            break;
          }
          case 26: {
            string value = _single_avatarUrl_codec.Read(ref input);
            if (avatarUrl_ == null || value != "") {
              AvatarUrl = value;
            }
            break;
          }
          case 34: {
            string value = _single_langTag_codec.Read(ref input);
            if (langTag_ == null || value != "") {
              LangTag = value;
            }
            break;
          }
          case 42: {
            string value = _single_location_codec.Read(ref input);
            if (location_ == null || value != "") {
              Location = value;
            }
            break;
          }
          case 50: {
            string value = _single_timezone_codec.Read(ref input);
            if (timezone_ == null || value != "") {
              Timezone = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Update fields in a given group.
  /// </summary>
  public sealed partial class UpdateGroupRequest : pb::IMessage<UpdateGroupRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateGroupRequest> _parser = new pb::MessageParser<UpdateGroupRequest>(() => new UpdateGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateGroupRequest(UpdateGroupRequest other) : this() {
      groupId_ = other.groupId_;
      Name = other.Name;
      Description = other.Description;
      LangTag = other.LangTag;
      AvatarUrl = other.AvatarUrl;
      Open = other.Open;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateGroupRequest Clone() {
      return new UpdateGroupRequest(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private string groupId_ = "";
    /// <summary>
    /// The ID of the group to update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _single_name_codec = pb::FieldCodec.ForClassWrapper<string>(18);
    private string name_;
    /// <summary>
    /// Name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }


    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_description_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string description_;
    /// <summary>
    /// Description string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = value;
      }
    }


    /// <summary>Field number for the "lang_tag" field.</summary>
    public const int LangTagFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _single_langTag_codec = pb::FieldCodec.ForClassWrapper<string>(34);
    private string langTag_;
    /// <summary>
    /// Lang tag.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LangTag {
      get { return langTag_; }
      set {
        langTag_ = value;
      }
    }


    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_avatarUrl_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string avatarUrl_;
    /// <summary>
    /// Avatar URL.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = value;
      }
    }


    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 6;
    private static readonly pb::FieldCodec<bool?> _single_open_codec = pb::FieldCodec.ForStructWrapper<bool>(50);
    private bool? open_;
    /// <summary>
    /// Open is true if anyone should be allowed to join, or false if joins must be approved by a group admin.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (LangTag != other.LangTag) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (Open != other.Open) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (name_ != null) hash ^= Name.GetHashCode();
      if (description_ != null) hash ^= Description.GetHashCode();
      if (langTag_ != null) hash ^= LangTag.GetHashCode();
      if (avatarUrl_ != null) hash ^= AvatarUrl.GetHashCode();
      if (open_ != null) hash ^= Open.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      if (name_ != null) {
        _single_name_codec.WriteTagAndValue(output, Name);
      }
      if (description_ != null) {
        _single_description_codec.WriteTagAndValue(output, Description);
      }
      if (langTag_ != null) {
        _single_langTag_codec.WriteTagAndValue(output, LangTag);
      }
      if (avatarUrl_ != null) {
        _single_avatarUrl_codec.WriteTagAndValue(output, AvatarUrl);
      }
      if (open_ != null) {
        _single_open_codec.WriteTagAndValue(output, Open);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GroupId);
      }
      if (name_ != null) {
        _single_name_codec.WriteTagAndValue(ref output, Name);
      }
      if (description_ != null) {
        _single_description_codec.WriteTagAndValue(ref output, Description);
      }
      if (langTag_ != null) {
        _single_langTag_codec.WriteTagAndValue(ref output, LangTag);
      }
      if (avatarUrl_ != null) {
        _single_avatarUrl_codec.WriteTagAndValue(ref output, AvatarUrl);
      }
      if (open_ != null) {
        _single_open_codec.WriteTagAndValue(ref output, Open);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (name_ != null) {
        size += _single_name_codec.CalculateSizeWithTag(Name);
      }
      if (description_ != null) {
        size += _single_description_codec.CalculateSizeWithTag(Description);
      }
      if (langTag_ != null) {
        size += _single_langTag_codec.CalculateSizeWithTag(LangTag);
      }
      if (avatarUrl_ != null) {
        size += _single_avatarUrl_codec.CalculateSizeWithTag(AvatarUrl);
      }
      if (open_ != null) {
        size += _single_open_codec.CalculateSizeWithTag(Open);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      if (other.name_ != null) {
        if (name_ == null || other.Name != "") {
          Name = other.Name;
        }
      }
      if (other.description_ != null) {
        if (description_ == null || other.Description != "") {
          Description = other.Description;
        }
      }
      if (other.langTag_ != null) {
        if (langTag_ == null || other.LangTag != "") {
          LangTag = other.LangTag;
        }
      }
      if (other.avatarUrl_ != null) {
        if (avatarUrl_ == null || other.AvatarUrl != "") {
          AvatarUrl = other.AvatarUrl;
        }
      }
      if (other.open_ != null) {
        if (open_ == null || other.Open != false) {
          Open = other.Open;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 18: {
            string value = _single_name_codec.Read(input);
            if (name_ == null || value != "") {
              Name = value;
            }
            break;
          }
          case 26: {
            string value = _single_description_codec.Read(input);
            if (description_ == null || value != "") {
              Description = value;
            }
            break;
          }
          case 34: {
            string value = _single_langTag_codec.Read(input);
            if (langTag_ == null || value != "") {
              LangTag = value;
            }
            break;
          }
          case 42: {
            string value = _single_avatarUrl_codec.Read(input);
            if (avatarUrl_ == null || value != "") {
              AvatarUrl = value;
            }
            break;
          }
          case 50: {
            bool? value = _single_open_codec.Read(input);
            if (open_ == null || value != false) {
              Open = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            GroupId = input.ReadString();
            break;
          }
          case 18: {
            string value = _single_name_codec.Read(ref input);
            if (name_ == null || value != "") {
              Name = value;
            }
            break;
          }
          case 26: {
            string value = _single_description_codec.Read(ref input);
            if (description_ == null || value != "") {
              Description = value;
            }
            break;
          }
          case 34: {
            string value = _single_langTag_codec.Read(ref input);
            if (langTag_ == null || value != "") {
              LangTag = value;
            }
            break;
          }
          case 42: {
            string value = _single_avatarUrl_codec.Read(ref input);
            if (avatarUrl_ == null || value != "") {
              AvatarUrl = value;
            }
            break;
          }
          case 50: {
            bool? value = _single_open_codec.Read(ref input);
            if (open_ == null || value != false) {
              Open = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A user in the server.
  /// </summary>
  public sealed partial class User : pb::IMessage<User>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      id_ = other.id_;
      username_ = other.username_;
      displayName_ = other.displayName_;
      avatarUrl_ = other.avatarUrl_;
      langTag_ = other.langTag_;
      location_ = other.location_;
      timezone_ = other.timezone_;
      metadata_ = other.metadata_;
      facebookId_ = other.facebookId_;
      googleId_ = other.googleId_;
      gamecenterId_ = other.gamecenterId_;
      steamId_ = other.steamId_;
      online_ = other.online_;
      edgeCount_ = other.edgeCount_;
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      updateTime_ = other.updateTime_ != null ? other.updateTime_.Clone() : null;
      facebookInstantGameId_ = other.facebookInstantGameId_;
      appleId_ = other.appleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The id of the user's account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    /// <summary>
    /// The username of the user's account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 3;
    private string displayName_ = "";
    /// <summary>
    /// The display name of the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 4;
    private string avatarUrl_ = "";
    /// <summary>
    /// A URL for an avatar image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lang_tag" field.</summary>
    public const int LangTagFieldNumber = 5;
    private string langTag_ = "";
    /// <summary>
    /// The language expected to be a tag which follows the BCP-47 spec.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LangTag {
      get { return langTag_; }
      set {
        langTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 6;
    private string location_ = "";
    /// <summary>
    /// The location set by the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 7;
    private string timezone_ = "";
    /// <summary>
    /// The timezone set by the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 8;
    private string metadata_ = "";
    /// <summary>
    /// Additional information stored as a JSON object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "facebook_id" field.</summary>
    public const int FacebookIdFieldNumber = 9;
    private string facebookId_ = "";
    /// <summary>
    /// The Facebook id in the user's account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FacebookId {
      get { return facebookId_; }
      set {
        facebookId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "google_id" field.</summary>
    public const int GoogleIdFieldNumber = 10;
    private string googleId_ = "";
    /// <summary>
    /// The Google id in the user's account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GoogleId {
      get { return googleId_; }
      set {
        googleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gamecenter_id" field.</summary>
    public const int GamecenterIdFieldNumber = 11;
    private string gamecenterId_ = "";
    /// <summary>
    /// The Apple Game Center in of the user's account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GamecenterId {
      get { return gamecenterId_; }
      set {
        gamecenterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "steam_id" field.</summary>
    public const int SteamIdFieldNumber = 12;
    private string steamId_ = "";
    /// <summary>
    /// The Steam id in the user's account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SteamId {
      get { return steamId_; }
      set {
        steamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "online" field.</summary>
    public const int OnlineFieldNumber = 13;
    private bool online_;
    /// <summary>
    /// Indicates whether the user is currently online.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    /// <summary>Field number for the "edge_count" field.</summary>
    public const int EdgeCountFieldNumber = 14;
    private int edgeCount_;
    /// <summary>
    /// Number of related edges to this user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EdgeCount {
      get { return edgeCount_; }
      set {
        edgeCount_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 15;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// The UNIX time when the user was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 16;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
    /// <summary>
    /// The UNIX time when the user was last updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "facebook_instant_game_id" field.</summary>
    public const int FacebookInstantGameIdFieldNumber = 17;
    private string facebookInstantGameId_ = "";
    /// <summary>
    /// The Facebook Instant Game ID in the user's account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FacebookInstantGameId {
      get { return facebookInstantGameId_; }
      set {
        facebookInstantGameId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "apple_id" field.</summary>
    public const int AppleIdFieldNumber = 18;
    private string appleId_ = "";
    /// <summary>
    /// The Apple Sign In ID in the user's account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppleId {
      get { return appleId_; }
      set {
        appleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Username != other.Username) return false;
      if (DisplayName != other.DisplayName) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      if (LangTag != other.LangTag) return false;
      if (Location != other.Location) return false;
      if (Timezone != other.Timezone) return false;
      if (Metadata != other.Metadata) return false;
      if (FacebookId != other.FacebookId) return false;
      if (GoogleId != other.GoogleId) return false;
      if (GamecenterId != other.GamecenterId) return false;
      if (SteamId != other.SteamId) return false;
      if (Online != other.Online) return false;
      if (EdgeCount != other.EdgeCount) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
      if (FacebookInstantGameId != other.FacebookInstantGameId) return false;
      if (AppleId != other.AppleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (LangTag.Length != 0) hash ^= LangTag.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Timezone.Length != 0) hash ^= Timezone.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (FacebookId.Length != 0) hash ^= FacebookId.GetHashCode();
      if (GoogleId.Length != 0) hash ^= GoogleId.GetHashCode();
      if (GamecenterId.Length != 0) hash ^= GamecenterId.GetHashCode();
      if (SteamId.Length != 0) hash ^= SteamId.GetHashCode();
      if (Online != false) hash ^= Online.GetHashCode();
      if (EdgeCount != 0) hash ^= EdgeCount.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
      if (FacebookInstantGameId.Length != 0) hash ^= FacebookInstantGameId.GetHashCode();
      if (AppleId.Length != 0) hash ^= AppleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DisplayName);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AvatarUrl);
      }
      if (LangTag.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LangTag);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Location);
      }
      if (Timezone.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Timezone);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Metadata);
      }
      if (FacebookId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(FacebookId);
      }
      if (GoogleId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(GoogleId);
      }
      if (GamecenterId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(GamecenterId);
      }
      if (SteamId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(SteamId);
      }
      if (Online != false) {
        output.WriteRawTag(104);
        output.WriteBool(Online);
      }
      if (EdgeCount != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(EdgeCount);
      }
      if (createTime_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(UpdateTime);
      }
      if (FacebookInstantGameId.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(FacebookInstantGameId);
      }
      if (AppleId.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(AppleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DisplayName);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AvatarUrl);
      }
      if (LangTag.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LangTag);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Location);
      }
      if (Timezone.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Timezone);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Metadata);
      }
      if (FacebookId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(FacebookId);
      }
      if (GoogleId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(GoogleId);
      }
      if (GamecenterId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(GamecenterId);
      }
      if (SteamId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(SteamId);
      }
      if (Online != false) {
        output.WriteRawTag(104);
        output.WriteBool(Online);
      }
      if (EdgeCount != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(EdgeCount);
      }
      if (createTime_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(UpdateTime);
      }
      if (FacebookInstantGameId.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(FacebookInstantGameId);
      }
      if (AppleId.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(AppleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (LangTag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LangTag);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Timezone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Metadata);
      }
      if (FacebookId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FacebookId);
      }
      if (GoogleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GoogleId);
      }
      if (GamecenterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GamecenterId);
      }
      if (SteamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SteamId);
      }
      if (Online != false) {
        size += 1 + 1;
      }
      if (EdgeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EdgeCount);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (updateTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
      }
      if (FacebookInstantGameId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FacebookInstantGameId);
      }
      if (AppleId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AppleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      if (other.LangTag.Length != 0) {
        LangTag = other.LangTag;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Timezone.Length != 0) {
        Timezone = other.Timezone;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.FacebookId.Length != 0) {
        FacebookId = other.FacebookId;
      }
      if (other.GoogleId.Length != 0) {
        GoogleId = other.GoogleId;
      }
      if (other.GamecenterId.Length != 0) {
        GamecenterId = other.GamecenterId;
      }
      if (other.SteamId.Length != 0) {
        SteamId = other.SteamId;
      }
      if (other.Online != false) {
        Online = other.Online;
      }
      if (other.EdgeCount != 0) {
        EdgeCount = other.EdgeCount;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.updateTime_ != null) {
        if (updateTime_ == null) {
          UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
      }
      if (other.FacebookInstantGameId.Length != 0) {
        FacebookInstantGameId = other.FacebookInstantGameId;
      }
      if (other.AppleId.Length != 0) {
        AppleId = other.AppleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            DisplayName = input.ReadString();
            break;
          }
          case 34: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 42: {
            LangTag = input.ReadString();
            break;
          }
          case 50: {
            Location = input.ReadString();
            break;
          }
          case 58: {
            Timezone = input.ReadString();
            break;
          }
          case 66: {
            Metadata = input.ReadString();
            break;
          }
          case 74: {
            FacebookId = input.ReadString();
            break;
          }
          case 82: {
            GoogleId = input.ReadString();
            break;
          }
          case 90: {
            GamecenterId = input.ReadString();
            break;
          }
          case 98: {
            SteamId = input.ReadString();
            break;
          }
          case 104: {
            Online = input.ReadBool();
            break;
          }
          case 112: {
            EdgeCount = input.ReadInt32();
            break;
          }
          case 122: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 130: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
          case 138: {
            FacebookInstantGameId = input.ReadString();
            break;
          }
          case 146: {
            AppleId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            DisplayName = input.ReadString();
            break;
          }
          case 34: {
            AvatarUrl = input.ReadString();
            break;
          }
          case 42: {
            LangTag = input.ReadString();
            break;
          }
          case 50: {
            Location = input.ReadString();
            break;
          }
          case 58: {
            Timezone = input.ReadString();
            break;
          }
          case 66: {
            Metadata = input.ReadString();
            break;
          }
          case 74: {
            FacebookId = input.ReadString();
            break;
          }
          case 82: {
            GoogleId = input.ReadString();
            break;
          }
          case 90: {
            GamecenterId = input.ReadString();
            break;
          }
          case 98: {
            SteamId = input.ReadString();
            break;
          }
          case 104: {
            Online = input.ReadBool();
            break;
          }
          case 112: {
            EdgeCount = input.ReadInt32();
            break;
          }
          case 122: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 130: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
          case 138: {
            FacebookInstantGameId = input.ReadString();
            break;
          }
          case 146: {
            AppleId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A list of groups belonging to a user, along with the user's role in each group.
  /// </summary>
  public sealed partial class UserGroupList : pb::IMessage<UserGroupList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserGroupList> _parser = new pb::MessageParser<UserGroupList>(() => new UserGroupList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserGroupList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserGroupList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserGroupList(UserGroupList other) : this() {
      userGroups_ = other.userGroups_.Clone();
      cursor_ = other.cursor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserGroupList Clone() {
      return new UserGroupList(this);
    }

    /// <summary>Field number for the "user_groups" field.</summary>
    public const int UserGroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.UserGroupList.Types.UserGroup> _repeated_userGroups_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.UserGroupList.Types.UserGroup.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserGroupList.Types.UserGroup> userGroups_ = new pbc::RepeatedField<global::Nakama.UserGroupList.Types.UserGroup>();
    /// <summary>
    /// Group-role pairs for a user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserGroupList.Types.UserGroup> UserGroups {
      get { return userGroups_; }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 2;
    private string cursor_ = "";
    /// <summary>
    /// Cursor for the next page of results, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserGroupList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserGroupList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userGroups_.Equals(other.userGroups_)) return false;
      if (Cursor != other.Cursor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userGroups_.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      userGroups_.WriteTo(output, _repeated_userGroups_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      userGroups_.WriteTo(ref output, _repeated_userGroups_codec);
      if (Cursor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Cursor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userGroups_.CalculateSize(_repeated_userGroups_codec);
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserGroupList other) {
      if (other == null) {
        return;
      }
      userGroups_.Add(other.userGroups_);
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            userGroups_.AddEntriesFrom(input, _repeated_userGroups_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            userGroups_.AddEntriesFrom(ref input, _repeated_userGroups_codec);
            break;
          }
          case 18: {
            Cursor = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the UserGroupList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A single group-role pair.
      /// </summary>
      public sealed partial class UserGroup : pb::IMessage<UserGroup>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<UserGroup> _parser = new pb::MessageParser<UserGroup>(() => new UserGroup());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UserGroup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.UserGroupList.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserGroup() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserGroup(UserGroup other) : this() {
          group_ = other.group_ != null ? other.group_.Clone() : null;
          State = other.State;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserGroup Clone() {
          return new UserGroup(this);
        }

        /// <summary>Field number for the "group" field.</summary>
        public const int GroupFieldNumber = 1;
        private global::Nakama.Group group_;
        /// <summary>
        /// Group.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Nakama.Group Group {
          get { return group_; }
          set {
            group_ = value;
          }
        }

        /// <summary>Field number for the "state" field.</summary>
        public const int StateFieldNumber = 2;
        private static readonly pb::FieldCodec<int?> _single_state_codec = pb::FieldCodec.ForStructWrapper<int>(18);
        private int? state_;
        /// <summary>
        /// The user's relationship to the group.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int? State {
          get { return state_; }
          set {
            state_ = value;
          }
        }


        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UserGroup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UserGroup other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Group, other.Group)) return false;
          if (State != other.State) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (group_ != null) hash ^= Group.GetHashCode();
          if (state_ != null) hash ^= State.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (group_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Group);
          }
          if (state_ != null) {
            _single_state_codec.WriteTagAndValue(output, State);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (group_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Group);
          }
          if (state_ != null) {
            _single_state_codec.WriteTagAndValue(ref output, State);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (group_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Group);
          }
          if (state_ != null) {
            size += _single_state_codec.CalculateSizeWithTag(State);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UserGroup other) {
          if (other == null) {
            return;
          }
          if (other.group_ != null) {
            if (group_ == null) {
              Group = new global::Nakama.Group();
            }
            Group.MergeFrom(other.Group);
          }
          if (other.state_ != null) {
            if (state_ == null || other.State != 0) {
              State = other.State;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (group_ == null) {
                  Group = new global::Nakama.Group();
                }
                input.ReadMessage(Group);
                break;
              }
              case 18: {
                int? value = _single_state_codec.Read(input);
                if (state_ == null || value != 0) {
                  State = value;
                }
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (group_ == null) {
                  Group = new global::Nakama.Group();
                }
                input.ReadMessage(Group);
                break;
              }
              case 18: {
                int? value = _single_state_codec.Read(ref input);
                if (state_ == null || value != 0) {
                  State = value;
                }
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the UserGroup message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// The group role status.
          /// </summary>
          public enum State {
            /// <summary>
            /// The user is a superadmin with full control of the group.
            /// </summary>
            [pbr::OriginalName("SUPERADMIN")] Superadmin = 0,
            /// <summary>
            /// The user is an admin with additional privileges.
            /// </summary>
            [pbr::OriginalName("ADMIN")] Admin = 1,
            /// <summary>
            /// The user is a regular member.
            /// </summary>
            [pbr::OriginalName("MEMBER")] Member = 2,
            /// <summary>
            /// The user has requested to join the group
            /// </summary>
            [pbr::OriginalName("JOIN_REQUEST")] JoinRequest = 3,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// A collection of zero or more users.
  /// </summary>
  public sealed partial class Users : pb::IMessage<Users>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Users> _parser = new pb::MessageParser<Users>(() => new Users());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Users> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Users() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Users(Users other) : this() {
      users_ = other.users_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Users Clone() {
      return new Users(this);
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int Users_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.User> _repeated_users_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.User.Parser);
    private readonly pbc::RepeatedField<global::Nakama.User> users_ = new pbc::RepeatedField<global::Nakama.User>();
    /// <summary>
    /// The User objects.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.User> Users_ {
      get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Users);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Users other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!users_.Equals(other.users_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= users_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      users_.WriteTo(output, _repeated_users_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      users_.WriteTo(ref output, _repeated_users_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += users_.CalculateSize(_repeated_users_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Users other) {
      if (other == null) {
        return;
      }
      users_.Add(other.users_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            users_.AddEntriesFrom(ref input, _repeated_users_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A request to submit a score to a leaderboard.
  /// </summary>
  public sealed partial class WriteLeaderboardRecordRequest : pb::IMessage<WriteLeaderboardRecordRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WriteLeaderboardRecordRequest> _parser = new pb::MessageParser<WriteLeaderboardRecordRequest>(() => new WriteLeaderboardRecordRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteLeaderboardRecordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteLeaderboardRecordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteLeaderboardRecordRequest(WriteLeaderboardRecordRequest other) : this() {
      leaderboardId_ = other.leaderboardId_;
      record_ = other.record_ != null ? other.record_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteLeaderboardRecordRequest Clone() {
      return new WriteLeaderboardRecordRequest(this);
    }

    /// <summary>Field number for the "leaderboard_id" field.</summary>
    public const int LeaderboardIdFieldNumber = 1;
    private string leaderboardId_ = "";
    /// <summary>
    /// The ID of the leaderboard to write to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeaderboardId {
      get { return leaderboardId_; }
      set {
        leaderboardId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 2;
    private global::Nakama.WriteLeaderboardRecordRequest.Types.LeaderboardRecordWrite record_;
    /// <summary>
    /// Record input.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.WriteLeaderboardRecordRequest.Types.LeaderboardRecordWrite Record {
      get { return record_; }
      set {
        record_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteLeaderboardRecordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteLeaderboardRecordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeaderboardId != other.LeaderboardId) return false;
      if (!object.Equals(Record, other.Record)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeaderboardId.Length != 0) hash ^= LeaderboardId.GetHashCode();
      if (record_ != null) hash ^= Record.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LeaderboardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LeaderboardId);
      }
      if (record_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Record);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LeaderboardId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LeaderboardId);
      }
      if (record_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Record);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeaderboardId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaderboardId);
      }
      if (record_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteLeaderboardRecordRequest other) {
      if (other == null) {
        return;
      }
      if (other.LeaderboardId.Length != 0) {
        LeaderboardId = other.LeaderboardId;
      }
      if (other.record_ != null) {
        if (record_ == null) {
          Record = new global::Nakama.WriteLeaderboardRecordRequest.Types.LeaderboardRecordWrite();
        }
        Record.MergeFrom(other.Record);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LeaderboardId = input.ReadString();
            break;
          }
          case 18: {
            if (record_ == null) {
              Record = new global::Nakama.WriteLeaderboardRecordRequest.Types.LeaderboardRecordWrite();
            }
            input.ReadMessage(Record);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            LeaderboardId = input.ReadString();
            break;
          }
          case 18: {
            if (record_ == null) {
              Record = new global::Nakama.WriteLeaderboardRecordRequest.Types.LeaderboardRecordWrite();
            }
            input.ReadMessage(Record);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the WriteLeaderboardRecordRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Record values to write.
      /// </summary>
      public sealed partial class LeaderboardRecordWrite : pb::IMessage<LeaderboardRecordWrite>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<LeaderboardRecordWrite> _parser = new pb::MessageParser<LeaderboardRecordWrite>(() => new LeaderboardRecordWrite());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LeaderboardRecordWrite> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.WriteLeaderboardRecordRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LeaderboardRecordWrite() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LeaderboardRecordWrite(LeaderboardRecordWrite other) : this() {
          score_ = other.score_;
          subscore_ = other.subscore_;
          metadata_ = other.metadata_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LeaderboardRecordWrite Clone() {
          return new LeaderboardRecordWrite(this);
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int ScoreFieldNumber = 1;
        private long score_;
        /// <summary>
        /// The score value to submit.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Score {
          get { return score_; }
          set {
            score_ = value;
          }
        }

        /// <summary>Field number for the "subscore" field.</summary>
        public const int SubscoreFieldNumber = 2;
        private long subscore_;
        /// <summary>
        /// An optional secondary value.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Subscore {
          get { return subscore_; }
          set {
            subscore_ = value;
          }
        }

        /// <summary>Field number for the "metadata" field.</summary>
        public const int MetadataFieldNumber = 3;
        private string metadata_ = "";
        /// <summary>
        /// Optional record metadata.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Metadata {
          get { return metadata_; }
          set {
            metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LeaderboardRecordWrite);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LeaderboardRecordWrite other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Score != other.Score) return false;
          if (Subscore != other.Subscore) return false;
          if (Metadata != other.Metadata) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Score != 0L) hash ^= Score.GetHashCode();
          if (Subscore != 0L) hash ^= Subscore.GetHashCode();
          if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Score != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Score);
          }
          if (Subscore != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Subscore);
          }
          if (Metadata.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Metadata);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Score != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Score);
          }
          if (Subscore != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Subscore);
          }
          if (Metadata.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Metadata);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Score != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
          }
          if (Subscore != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Subscore);
          }
          if (Metadata.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Metadata);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LeaderboardRecordWrite other) {
          if (other == null) {
            return;
          }
          if (other.Score != 0L) {
            Score = other.Score;
          }
          if (other.Subscore != 0L) {
            Subscore = other.Subscore;
          }
          if (other.Metadata.Length != 0) {
            Metadata = other.Metadata;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Score = input.ReadInt64();
                break;
              }
              case 16: {
                Subscore = input.ReadInt64();
                break;
              }
              case 26: {
                Metadata = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Score = input.ReadInt64();
                break;
              }
              case 16: {
                Subscore = input.ReadInt64();
                break;
              }
              case 26: {
                Metadata = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// The object to store.
  /// </summary>
  public sealed partial class WriteStorageObject : pb::IMessage<WriteStorageObject>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WriteStorageObject> _parser = new pb::MessageParser<WriteStorageObject>(() => new WriteStorageObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteStorageObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteStorageObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteStorageObject(WriteStorageObject other) : this() {
      collection_ = other.collection_;
      key_ = other.key_;
      value_ = other.value_;
      version_ = other.version_;
      PermissionRead = other.PermissionRead;
      PermissionWrite = other.PermissionWrite;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteStorageObject Clone() {
      return new WriteStorageObject(this);
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 1;
    private string collection_ = "";
    /// <summary>
    /// The collection to store the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Collection {
      get { return collection_; }
      set {
        collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    /// <summary>
    /// The key for the object within the collection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    /// <summary>
    /// The value of the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private string version_ = "";
    /// <summary>
    /// The version hash of the object to check. Possible values are: ["", "*", "#hash#"].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "permission_read" field.</summary>
    public const int PermissionReadFieldNumber = 5;
    private static readonly pb::FieldCodec<int?> _single_permissionRead_codec = pb::FieldCodec.ForStructWrapper<int>(42);
    private int? permissionRead_;
    /// <summary>
    /// The read access permissions for the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? PermissionRead {
      get { return permissionRead_; }
      set {
        permissionRead_ = value;
      }
    }


    /// <summary>Field number for the "permission_write" field.</summary>
    public const int PermissionWriteFieldNumber = 6;
    private static readonly pb::FieldCodec<int?> _single_permissionWrite_codec = pb::FieldCodec.ForStructWrapper<int>(50);
    private int? permissionWrite_;
    /// <summary>
    /// The write access permissions for the object.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? PermissionWrite {
      get { return permissionWrite_; }
      set {
        permissionWrite_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteStorageObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteStorageObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Collection != other.Collection) return false;
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      if (Version != other.Version) return false;
      if (PermissionRead != other.PermissionRead) return false;
      if (PermissionWrite != other.PermissionWrite) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Collection.Length != 0) hash ^= Collection.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (permissionRead_ != null) hash ^= PermissionRead.GetHashCode();
      if (permissionWrite_ != null) hash ^= PermissionWrite.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Collection.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Collection);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Version);
      }
      if (permissionRead_ != null) {
        _single_permissionRead_codec.WriteTagAndValue(output, PermissionRead);
      }
      if (permissionWrite_ != null) {
        _single_permissionWrite_codec.WriteTagAndValue(output, PermissionWrite);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Collection.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Collection);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Version);
      }
      if (permissionRead_ != null) {
        _single_permissionRead_codec.WriteTagAndValue(ref output, PermissionRead);
      }
      if (permissionWrite_ != null) {
        _single_permissionWrite_codec.WriteTagAndValue(ref output, PermissionWrite);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Collection.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (permissionRead_ != null) {
        size += _single_permissionRead_codec.CalculateSizeWithTag(PermissionRead);
      }
      if (permissionWrite_ != null) {
        size += _single_permissionWrite_codec.CalculateSizeWithTag(PermissionWrite);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteStorageObject other) {
      if (other == null) {
        return;
      }
      if (other.Collection.Length != 0) {
        Collection = other.Collection;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.permissionRead_ != null) {
        if (permissionRead_ == null || other.PermissionRead != 0) {
          PermissionRead = other.PermissionRead;
        }
      }
      if (other.permissionWrite_ != null) {
        if (permissionWrite_ == null || other.PermissionWrite != 0) {
          PermissionWrite = other.PermissionWrite;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Collection = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
          case 34: {
            Version = input.ReadString();
            break;
          }
          case 42: {
            int? value = _single_permissionRead_codec.Read(input);
            if (permissionRead_ == null || value != 0) {
              PermissionRead = value;
            }
            break;
          }
          case 50: {
            int? value = _single_permissionWrite_codec.Read(input);
            if (permissionWrite_ == null || value != 0) {
              PermissionWrite = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Collection = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
          case 34: {
            Version = input.ReadString();
            break;
          }
          case 42: {
            int? value = _single_permissionRead_codec.Read(ref input);
            if (permissionRead_ == null || value != 0) {
              PermissionRead = value;
            }
            break;
          }
          case 50: {
            int? value = _single_permissionWrite_codec.Read(ref input);
            if (permissionWrite_ == null || value != 0) {
              PermissionWrite = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Write objects to the storage engine.
  /// </summary>
  public sealed partial class WriteStorageObjectsRequest : pb::IMessage<WriteStorageObjectsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WriteStorageObjectsRequest> _parser = new pb::MessageParser<WriteStorageObjectsRequest>(() => new WriteStorageObjectsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteStorageObjectsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteStorageObjectsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteStorageObjectsRequest(WriteStorageObjectsRequest other) : this() {
      objects_ = other.objects_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteStorageObjectsRequest Clone() {
      return new WriteStorageObjectsRequest(this);
    }

    /// <summary>Field number for the "objects" field.</summary>
    public const int ObjectsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.WriteStorageObject> _repeated_objects_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.WriteStorageObject.Parser);
    private readonly pbc::RepeatedField<global::Nakama.WriteStorageObject> objects_ = new pbc::RepeatedField<global::Nakama.WriteStorageObject>();
    /// <summary>
    /// The objects to store on the server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.WriteStorageObject> Objects {
      get { return objects_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteStorageObjectsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteStorageObjectsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objects_.Equals(other.objects_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objects_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      objects_.WriteTo(output, _repeated_objects_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      objects_.WriteTo(ref output, _repeated_objects_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objects_.CalculateSize(_repeated_objects_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteStorageObjectsRequest other) {
      if (other == null) {
        return;
      }
      objects_.Add(other.objects_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objects_.AddEntriesFrom(input, _repeated_objects_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            objects_.AddEntriesFrom(ref input, _repeated_objects_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A request to submit a score to a tournament.
  /// </summary>
  public sealed partial class WriteTournamentRecordRequest : pb::IMessage<WriteTournamentRecordRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WriteTournamentRecordRequest> _parser = new pb::MessageParser<WriteTournamentRecordRequest>(() => new WriteTournamentRecordRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteTournamentRecordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.ApiReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteTournamentRecordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteTournamentRecordRequest(WriteTournamentRecordRequest other) : this() {
      tournamentId_ = other.tournamentId_;
      record_ = other.record_ != null ? other.record_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteTournamentRecordRequest Clone() {
      return new WriteTournamentRecordRequest(this);
    }

    /// <summary>Field number for the "tournament_id" field.</summary>
    public const int TournamentIdFieldNumber = 1;
    private string tournamentId_ = "";
    /// <summary>
    /// The tournament ID to write the record for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TournamentId {
      get { return tournamentId_; }
      set {
        tournamentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 2;
    private global::Nakama.WriteTournamentRecordRequest.Types.TournamentRecordWrite record_;
    /// <summary>
    /// Record input.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.WriteTournamentRecordRequest.Types.TournamentRecordWrite Record {
      get { return record_; }
      set {
        record_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteTournamentRecordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteTournamentRecordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TournamentId != other.TournamentId) return false;
      if (!object.Equals(Record, other.Record)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TournamentId.Length != 0) hash ^= TournamentId.GetHashCode();
      if (record_ != null) hash ^= Record.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TournamentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TournamentId);
      }
      if (record_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Record);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TournamentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TournamentId);
      }
      if (record_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Record);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TournamentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TournamentId);
      }
      if (record_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteTournamentRecordRequest other) {
      if (other == null) {
        return;
      }
      if (other.TournamentId.Length != 0) {
        TournamentId = other.TournamentId;
      }
      if (other.record_ != null) {
        if (record_ == null) {
          Record = new global::Nakama.WriteTournamentRecordRequest.Types.TournamentRecordWrite();
        }
        Record.MergeFrom(other.Record);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TournamentId = input.ReadString();
            break;
          }
          case 18: {
            if (record_ == null) {
              Record = new global::Nakama.WriteTournamentRecordRequest.Types.TournamentRecordWrite();
            }
            input.ReadMessage(Record);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TournamentId = input.ReadString();
            break;
          }
          case 18: {
            if (record_ == null) {
              Record = new global::Nakama.WriteTournamentRecordRequest.Types.TournamentRecordWrite();
            }
            input.ReadMessage(Record);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the WriteTournamentRecordRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Record values to write.
      /// </summary>
      public sealed partial class TournamentRecordWrite : pb::IMessage<TournamentRecordWrite>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TournamentRecordWrite> _parser = new pb::MessageParser<TournamentRecordWrite>(() => new TournamentRecordWrite());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TournamentRecordWrite> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.WriteTournamentRecordRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TournamentRecordWrite() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TournamentRecordWrite(TournamentRecordWrite other) : this() {
          score_ = other.score_;
          subscore_ = other.subscore_;
          metadata_ = other.metadata_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TournamentRecordWrite Clone() {
          return new TournamentRecordWrite(this);
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int ScoreFieldNumber = 1;
        private long score_;
        /// <summary>
        /// The score value to submit.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Score {
          get { return score_; }
          set {
            score_ = value;
          }
        }

        /// <summary>Field number for the "subscore" field.</summary>
        public const int SubscoreFieldNumber = 2;
        private long subscore_;
        /// <summary>
        /// An optional secondary value.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Subscore {
          get { return subscore_; }
          set {
            subscore_ = value;
          }
        }

        /// <summary>Field number for the "metadata" field.</summary>
        public const int MetadataFieldNumber = 3;
        private string metadata_ = "";
        /// <summary>
        /// A JSON object of additional properties (optional).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Metadata {
          get { return metadata_; }
          set {
            metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TournamentRecordWrite);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TournamentRecordWrite other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Score != other.Score) return false;
          if (Subscore != other.Subscore) return false;
          if (Metadata != other.Metadata) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Score != 0L) hash ^= Score.GetHashCode();
          if (Subscore != 0L) hash ^= Subscore.GetHashCode();
          if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Score != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Score);
          }
          if (Subscore != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Subscore);
          }
          if (Metadata.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Metadata);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Score != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Score);
          }
          if (Subscore != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Subscore);
          }
          if (Metadata.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Metadata);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Score != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
          }
          if (Subscore != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Subscore);
          }
          if (Metadata.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Metadata);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TournamentRecordWrite other) {
          if (other == null) {
            return;
          }
          if (other.Score != 0L) {
            Score = other.Score;
          }
          if (other.Subscore != 0L) {
            Subscore = other.Subscore;
          }
          if (other.Metadata.Length != 0) {
            Metadata = other.Metadata;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Score = input.ReadInt64();
                break;
              }
              case 16: {
                Subscore = input.ReadInt64();
                break;
              }
              case 26: {
                Metadata = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Score = input.ReadInt64();
                break;
              }
              case 16: {
                Subscore = input.ReadInt64();
                break;
              }
              case 26: {
                Metadata = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
