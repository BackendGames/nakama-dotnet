
/* Code generated by openapi-gen/main.go. DO NOT EDIT. */

// ReSharper disable UnusedAutoPropertyAccessor.Global
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMemberInSuper.Global
namespace Nakama
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Text;
    using System.Threading.Tasks;
    using TinyJson;

    /// <summary>
    /// A single user-role pair.
    /// </summary>
    public interface IGroupUserListGroupUser
    {

        /// <summary>
        /// Their relationship to the group.
        /// </summary>
        int State { get; }

        /// <summary>
        /// User.
        /// </summary>
        IApiUser User { get; }
    }

    /// <inheritdoc />
    internal class GroupUserListGroupUser : IGroupUserListGroupUser
    {

        /// <inheritdoc />
        [JsonProperty("state")]
        public int State { get; set; }

        /// <inheritdoc />
        [JsonProperty("user")]
        public IApiUser User { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "State: ", State, ", ");
            output += string.Concat(output, "User: ", User, ", ");
            return output;
        }
    }

    /// <summary>
    /// A single group-role pair.
    /// </summary>
    public interface IUserGroupListUserGroup
    {

        /// <summary>
        /// Group.
        /// </summary>
        IApiGroup Group { get; }

        /// <summary>
        /// The user's relationship to the group.
        /// </summary>
        int State { get; }
    }

    /// <inheritdoc />
    internal class UserGroupListUserGroup : IUserGroupListUserGroup
    {

        /// <inheritdoc />
        [JsonProperty("group")]
        public IApiGroup Group { get; set; }

        /// <inheritdoc />
        [JsonProperty("state")]
        public int State { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Group: ", Group, ", ");
            output += string.Concat(output, "State: ", State, ", ");
            return output;
        }
    }

    /// <summary>
    /// Record values to write.
    /// </summary>
    public interface IWriteLeaderboardRecordRequestLeaderboardRecordWrite
    {

        /// <summary>
        /// Optional record metadata.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// The score value to submit.
        /// </summary>
        string Score { get; }

        /// <summary>
        /// An optional secondary value.
        /// </summary>
        string Subscore { get; }
    }

    /// <inheritdoc />
    internal class WriteLeaderboardRecordRequestLeaderboardRecordWrite : IWriteLeaderboardRecordRequestLeaderboardRecordWrite
    {

        /// <inheritdoc />
        [JsonProperty("metadata")]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [JsonProperty("score")]
        public string Score { get; set; }

        /// <inheritdoc />
        [JsonProperty("subscore")]
        public string Subscore { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Metadata: ", Metadata, ", ");
            output += string.Concat(output, "Score: ", Score, ", ");
            output += string.Concat(output, "Subscore: ", Subscore, ", ");
            return output;
        }
    }

    /// <summary>
    /// A user with additional account details. Always the current user.
    /// </summary>
    public interface IApiAccount
    {

        /// <summary>
        /// The custom id in the user's account.
        /// </summary>
        string CustomId { get; }

        /// <summary>
        /// The devices which belong to the user's account.
        /// </summary>
        List<IApiAccountDevice> Devices { get; }

        /// <summary>
        /// The email address of the user.
        /// </summary>
        string Email { get; }

        /// <summary>
        /// The user object.
        /// </summary>
        IApiUser User { get; }

        /// <summary>
        /// The UNIX time when the user's email was verified.
        /// </summary>
        string VerifyTime { get; }

        /// <summary>
        /// The user's wallet data.
        /// </summary>
        string Wallet { get; }
    }

    /// <inheritdoc />
    internal class ApiAccount : IApiAccount
    {

        /// <inheritdoc />
        [JsonProperty("custom_id")]
        public string CustomId { get; set; }

        /// <inheritdoc />
        [JsonProperty("devices")]
        public List<IApiAccountDevice> Devices { get; set; }

        /// <inheritdoc />
        [JsonProperty("email")]
        public string Email { get; set; }

        /// <inheritdoc />
        [JsonProperty("user")]
        public IApiUser User { get; set; }

        /// <inheritdoc />
        [JsonProperty("verify_time")]
        public string VerifyTime { get; set; }

        /// <inheritdoc />
        [JsonProperty("wallet")]
        public string Wallet { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "CustomId: ", CustomId, ", ");
            output += string.Concat(output, "Devices: ", Devices, ", ");
            output += string.Concat(output, "Email: ", Email, ", ");
            output += string.Concat(output, "User: ", User, ", ");
            output += string.Concat(output, "VerifyTime: ", VerifyTime, ", ");
            output += string.Concat(output, "Wallet: ", Wallet, ", ");
            return output;
        }
    }

    /// <summary>
    /// Send a custom ID to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountCustom
    {

        /// <summary>
        /// A custom identifier.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountCustom : IApiAccountCustom
    {

        /// <inheritdoc />
        [JsonProperty("id")]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Id: ", Id, ", ");
            return output;
        }
    }

    /// <summary>
    /// Send a device to the server. Used with authenticate/link/unlink and user.
    /// </summary>
    public interface IApiAccountDevice
    {

        /// <summary>
        /// A device identifier. Should be obtained by a platform-specific device API.
        /// </summary>
        string Id { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountDevice : IApiAccountDevice
    {

        /// <inheritdoc />
        [JsonProperty("id")]
        public string Id { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Id: ", Id, ", ");
            return output;
        }
    }

    /// <summary>
    /// Send an email with password to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountEmail
    {

        /// <summary>
        /// A valid RFC-5322 email address.
        /// </summary>
        string Email { get; }

        /// <summary>
        /// A password for the user account.
        /// </summary>
        string Password { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountEmail : IApiAccountEmail
    {

        /// <inheritdoc />
        [JsonProperty("email")]
        public string Email { get; set; }

        /// <inheritdoc />
        [JsonProperty("password")]
        public string Password { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Email: ", Email, ", ");
            output += string.Concat(output, "Password: ", Password, ", ");
            return output;
        }
    }

    /// <summary>
    /// Send a Facebook token to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountFacebook
    {

        /// <summary>
        /// The OAuth token received from Facebook to access their profile API.
        /// </summary>
        string Token { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountFacebook : IApiAccountFacebook
    {

        /// <inheritdoc />
        [JsonProperty("token")]
        public string Token { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Token: ", Token, ", ");
            return output;
        }
    }

    /// <summary>
    /// Send Apple's Game Center account credentials to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountGameCenter
    {

        /// <summary>
        /// Bundle ID (generated by GameCenter).
        /// </summary>
        string BundleId { get; }

        /// <summary>
        /// Player ID (generated by GameCenter).
        /// </summary>
        string PlayerId { get; }

        /// <summary>
        /// The URL for the public encryption key.
        /// </summary>
        string PublicKeyUrl { get; }

        /// <summary>
        /// A random "NSString" used to compute the hash and keep it randomized.
        /// </summary>
        string Salt { get; }

        /// <summary>
        /// The verification signature data generated.
        /// </summary>
        string Signature { get; }

        /// <summary>
        /// Time since UNIX epoch when the signature was created.
        /// </summary>
        string TimestampSeconds { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountGameCenter : IApiAccountGameCenter
    {

        /// <inheritdoc />
        [JsonProperty("bundle_id")]
        public string BundleId { get; set; }

        /// <inheritdoc />
        [JsonProperty("player_id")]
        public string PlayerId { get; set; }

        /// <inheritdoc />
        [JsonProperty("public_key_url")]
        public string PublicKeyUrl { get; set; }

        /// <inheritdoc />
        [JsonProperty("salt")]
        public string Salt { get; set; }

        /// <inheritdoc />
        [JsonProperty("signature")]
        public string Signature { get; set; }

        /// <inheritdoc />
        [JsonProperty("timestamp_seconds")]
        public string TimestampSeconds { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "BundleId: ", BundleId, ", ");
            output += string.Concat(output, "PlayerId: ", PlayerId, ", ");
            output += string.Concat(output, "PublicKeyUrl: ", PublicKeyUrl, ", ");
            output += string.Concat(output, "Salt: ", Salt, ", ");
            output += string.Concat(output, "Signature: ", Signature, ", ");
            output += string.Concat(output, "TimestampSeconds: ", TimestampSeconds, ", ");
            return output;
        }
    }

    /// <summary>
    /// Send a Google token to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountGoogle
    {

        /// <summary>
        /// The OAuth token received from Google to access their profile API.
        /// </summary>
        string Token { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountGoogle : IApiAccountGoogle
    {

        /// <inheritdoc />
        [JsonProperty("token")]
        public string Token { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Token: ", Token, ", ");
            return output;
        }
    }

    /// <summary>
    /// Send a Steam token to the server. Used with authenticate/link/unlink.
    /// </summary>
    public interface IApiAccountSteam
    {

        /// <summary>
        /// The account token received from Steam to access their profile API.
        /// </summary>
        string Token { get; }
    }

    /// <inheritdoc />
    internal class ApiAccountSteam : IApiAccountSteam
    {

        /// <inheritdoc />
        [JsonProperty("token")]
        public string Token { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Token: ", Token, ", ");
            return output;
        }
    }

    /// <summary>
    /// Add users to a group.
    /// </summary>
    public interface IApiAddGroupUsersRequest
    {

        /// <summary>
        /// The group to add users to.
        /// </summary>
        string GroupId { get; }

        /// <summary>
        /// The users to add.
        /// </summary>
        List<string> UserIds { get; }
    }

    /// <inheritdoc />
    internal class ApiAddGroupUsersRequest : IApiAddGroupUsersRequest
    {

        /// <inheritdoc />
        [JsonProperty("group_id")]
        public string GroupId { get; set; }

        /// <inheritdoc />
        [JsonProperty("user_ids")]
        public List<string> UserIds { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "GroupId: ", GroupId, ", ");
            output += string.Concat(output, "UserIds: ", UserIds, ", ");
            return output;
        }
    }

    /// <summary>
    /// A message sent on a channel.
    /// </summary>
    public interface IApiChannelMessage
    {

        /// <summary>
        /// The channel this message belongs to.
        /// </summary>
        string ChannelId { get; }

        /// <summary>
        /// The code representing a message type or category.
        /// </summary>
        int Code { get; }

        /// <summary>
        /// The content payload.
        /// </summary>
        string Content { get; }

        /// <summary>
        /// The UNIX time when the message was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The unique ID of this message.
        /// </summary>
        string MessageId { get; }

        /// <summary>
        /// True if the message was persisted to the channel's history, false otherwise.
        /// </summary>
        bool Persistent { get; }

        /// <summary>
        /// Message sender, usually a user ID.
        /// </summary>
        string SenderId { get; }

        /// <summary>
        /// The UNIX time when the message was last updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The username of the message sender, if any.
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    internal class ApiChannelMessage : IApiChannelMessage
    {

        /// <inheritdoc />
        [JsonProperty("channel_id")]
        public string ChannelId { get; set; }

        /// <inheritdoc />
        [JsonProperty("code")]
        public int Code { get; set; }

        /// <inheritdoc />
        [JsonProperty("content")]
        public string Content { get; set; }

        /// <inheritdoc />
        [JsonProperty("create_time")]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [JsonProperty("message_id")]
        public string MessageId { get; set; }

        /// <inheritdoc />
        [JsonProperty("persistent")]
        public bool Persistent { get; set; }

        /// <inheritdoc />
        [JsonProperty("sender_id")]
        public string SenderId { get; set; }

        /// <inheritdoc />
        [JsonProperty("update_time")]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [JsonProperty("username")]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "ChannelId: ", ChannelId, ", ");
            output += string.Concat(output, "Code: ", Code, ", ");
            output += string.Concat(output, "Content: ", Content, ", ");
            output += string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output += string.Concat(output, "MessageId: ", MessageId, ", ");
            output += string.Concat(output, "Persistent: ", Persistent, ", ");
            output += string.Concat(output, "SenderId: ", SenderId, ", ");
            output += string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            output += string.Concat(output, "Username: ", Username, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of channel messages, usually a result of a list operation.
    /// </summary>
    public interface IApiChannelMessageList
    {

        /// <summary>
        /// A list of messages.
        /// </summary>
        List<IApiChannelMessage> Messages { get; }

        /// <summary>
        /// The cursor to send when retireving the next page, if any.
        /// </summary>
        string NextCursor { get; }

        /// <summary>
        /// The cursor to send when retrieving the previous page, if any.
        /// </summary>
        string PrevCursor { get; }
    }

    /// <inheritdoc />
    internal class ApiChannelMessageList : IApiChannelMessageList
    {

        /// <inheritdoc />
        [JsonProperty("messages")]
        public List<IApiChannelMessage> Messages { get; set; }

        /// <inheritdoc />
        [JsonProperty("next_cursor")]
        public string NextCursor { get; set; }

        /// <inheritdoc />
        [JsonProperty("prev_cursor")]
        public string PrevCursor { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Messages: ", Messages, ", ");
            output += string.Concat(output, "NextCursor: ", NextCursor, ", ");
            output += string.Concat(output, "PrevCursor: ", PrevCursor, ", ");
            return output;
        }
    }

    /// <summary>
    /// Create a group with the current user as owner.
    /// </summary>
    public interface IApiCreateGroupRequest
    {

        /// <summary>
        /// A URL for an avatar image.
        /// </summary>
        string AvatarUrl { get; }

        /// <summary>
        /// A description for the group.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// The language expected to be a tag which follows the BCP-47 spec.
        /// </summary>
        string LangTag { get; }

        /// <summary>
        /// A unique name for the group.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Mark a group as open or not where only admins can accept members.
        /// </summary>
        bool Open { get; }
    }

    /// <inheritdoc />
    internal class ApiCreateGroupRequest : IApiCreateGroupRequest
    {

        /// <inheritdoc />
        [JsonProperty("avatar_url")]
        public string AvatarUrl { get; set; }

        /// <inheritdoc />
        [JsonProperty("description")]
        public string Description { get; set; }

        /// <inheritdoc />
        [JsonProperty("lang_tag")]
        public string LangTag { get; set; }

        /// <inheritdoc />
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <inheritdoc />
        [JsonProperty("open")]
        public bool Open { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "AvatarUrl: ", AvatarUrl, ", ");
            output += string.Concat(output, "Description: ", Description, ", ");
            output += string.Concat(output, "LangTag: ", LangTag, ", ");
            output += string.Concat(output, "Name: ", Name, ", ");
            output += string.Concat(output, "Open: ", Open, ", ");
            return output;
        }
    }

    /// <summary>
    /// Storage objects to delete.
    /// </summary>
    public interface IApiDeleteStorageObjectId
    {

        /// <summary>
        /// The collection which stores the object.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// The key of the object within the collection.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// The version hash of the object.
        /// </summary>
        string Version { get; }
    }

    /// <inheritdoc />
    internal class ApiDeleteStorageObjectId : IApiDeleteStorageObjectId
    {

        /// <inheritdoc />
        [JsonProperty("collection")]
        public string Collection { get; set; }

        /// <inheritdoc />
        [JsonProperty("key")]
        public string Key { get; set; }

        /// <inheritdoc />
        [JsonProperty("version")]
        public string Version { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Collection: ", Collection, ", ");
            output += string.Concat(output, "Key: ", Key, ", ");
            output += string.Concat(output, "Version: ", Version, ", ");
            return output;
        }
    }

    /// <summary>
    /// Batch delete storage objects.
    /// </summary>
    public interface IApiDeleteStorageObjectsRequest
    {

        /// <summary>
        /// Batch of storage objects.
        /// </summary>
        List<IApiDeleteStorageObjectId> ObjectIds { get; }
    }

    /// <inheritdoc />
    internal class ApiDeleteStorageObjectsRequest : IApiDeleteStorageObjectsRequest
    {

        /// <inheritdoc />
        [JsonProperty("object_ids")]
        public List<IApiDeleteStorageObjectId> ObjectIds { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "ObjectIds: ", ObjectIds, ", ");
            return output;
        }
    }

    /// <summary>
    /// A friend of a user.
    /// </summary>
    public interface IApiFriend
    {

        /// <summary>
        /// The friend status.
        /// </summary>
        int State { get; }

        /// <summary>
        /// The user object.
        /// </summary>
        IApiUser User { get; }
    }

    /// <inheritdoc />
    internal class ApiFriend : IApiFriend
    {

        /// <inheritdoc />
        [JsonProperty("state")]
        public int State { get; set; }

        /// <inheritdoc />
        [JsonProperty("user")]
        public IApiUser User { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "State: ", State, ", ");
            output += string.Concat(output, "User: ", User, ", ");
            return output;
        }
    }

    /// <summary>
    /// A collection of zero or more friends of the user.
    /// </summary>
    public interface IApiFriends
    {

        /// <summary>
        /// The Friend objects.
        /// </summary>
        List<IApiFriend> Friends { get; }
    }

    /// <inheritdoc />
    internal class ApiFriends : IApiFriends
    {

        /// <inheritdoc />
        [JsonProperty("friends")]
        public List<IApiFriend> Friends { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Friends: ", Friends, ", ");
            return output;
        }
    }

    /// <summary>
    /// A group in the server.
    /// </summary>
    public interface IApiGroup
    {

        /// <summary>
        /// A URL for an avatar image.
        /// </summary>
        string AvatarUrl { get; }

        /// <summary>
        /// The UNIX time when the group was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The id of the user who created the group.
        /// </summary>
        string CreatorId { get; }

        /// <summary>
        /// A description for the group.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// The current count of all members in the group.
        /// </summary>
        int EdgeCount { get; }

        /// <summary>
        /// The id of a group.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The language expected to be a tag which follows the BCP-47 spec.
        /// </summary>
        string LangTag { get; }

        /// <summary>
        /// The maximum number of members allowed.
        /// </summary>
        int MaxCount { get; }

        /// <summary>
        /// Additional information stored as a JSON object.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// The unique name of the group.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Anyone can join open groups, otherwise only admins can accept members.
        /// </summary>
        bool Open { get; }

        /// <summary>
        /// The UNIX time when the group was last updated.
        /// </summary>
        string UpdateTime { get; }
    }

    /// <inheritdoc />
    internal class ApiGroup : IApiGroup
    {

        /// <inheritdoc />
        [JsonProperty("avatar_url")]
        public string AvatarUrl { get; set; }

        /// <inheritdoc />
        [JsonProperty("create_time")]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [JsonProperty("creator_id")]
        public string CreatorId { get; set; }

        /// <inheritdoc />
        [JsonProperty("description")]
        public string Description { get; set; }

        /// <inheritdoc />
        [JsonProperty("edge_count")]
        public int EdgeCount { get; set; }

        /// <inheritdoc />
        [JsonProperty("id")]
        public string Id { get; set; }

        /// <inheritdoc />
        [JsonProperty("lang_tag")]
        public string LangTag { get; set; }

        /// <inheritdoc />
        [JsonProperty("max_count")]
        public int MaxCount { get; set; }

        /// <inheritdoc />
        [JsonProperty("metadata")]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <inheritdoc />
        [JsonProperty("open")]
        public bool Open { get; set; }

        /// <inheritdoc />
        [JsonProperty("update_time")]
        public string UpdateTime { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "AvatarUrl: ", AvatarUrl, ", ");
            output += string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output += string.Concat(output, "CreatorId: ", CreatorId, ", ");
            output += string.Concat(output, "Description: ", Description, ", ");
            output += string.Concat(output, "EdgeCount: ", EdgeCount, ", ");
            output += string.Concat(output, "Id: ", Id, ", ");
            output += string.Concat(output, "LangTag: ", LangTag, ", ");
            output += string.Concat(output, "MaxCount: ", MaxCount, ", ");
            output += string.Concat(output, "Metadata: ", Metadata, ", ");
            output += string.Concat(output, "Name: ", Name, ", ");
            output += string.Concat(output, "Open: ", Open, ", ");
            output += string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of users belonging to a group, along with their role.
    /// </summary>
    public interface IApiGroupUserList
    {

        /// <summary>
        /// User-role pairs for a group.
        /// </summary>
        List<IGroupUserListGroupUser> GroupUsers { get; }
    }

    /// <inheritdoc />
    internal class ApiGroupUserList : IApiGroupUserList
    {

        /// <inheritdoc />
        [JsonProperty("group_users")]
        public List<IGroupUserListGroupUser> GroupUsers { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "GroupUsers: ", GroupUsers, ", ");
            return output;
        }
    }

    /// <summary>
    /// Immediately join an open group, or request to join a closed one.
    /// </summary>
    public interface IApiJoinGroupRequest
    {

        /// <summary>
        /// The group ID to join.
        /// </summary>
        string GroupId { get; }
    }

    /// <inheritdoc />
    internal class ApiJoinGroupRequest : IApiJoinGroupRequest
    {

        /// <inheritdoc />
        [JsonProperty("group_id")]
        public string GroupId { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "GroupId: ", GroupId, ", ");
            return output;
        }
    }

    /// <summary>
    /// Kick a set of users from a group.
    /// </summary>
    public interface IApiKickGroupUsersRequest
    {

        /// <summary>
        /// The group ID to kick from.
        /// </summary>
        string GroupId { get; }

        /// <summary>
        /// The users to kick.
        /// </summary>
        List<string> UserIds { get; }
    }

    /// <inheritdoc />
    internal class ApiKickGroupUsersRequest : IApiKickGroupUsersRequest
    {

        /// <inheritdoc />
        [JsonProperty("group_id")]
        public string GroupId { get; set; }

        /// <inheritdoc />
        [JsonProperty("user_ids")]
        public List<string> UserIds { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "GroupId: ", GroupId, ", ");
            output += string.Concat(output, "UserIds: ", UserIds, ", ");
            return output;
        }
    }

    /// <summary>
    /// Represents a complete leaderboard record with all scores and associated metadata.
    /// </summary>
    public interface IApiLeaderboardRecord
    {

        /// <summary>
        /// The UNIX time when the leaderboard record was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The UNIX time when the leaderboard record expires.
        /// </summary>
        string ExpiryTime { get; }

        /// <summary>
        /// The ID of the leaderboard this score belongs to.
        /// </summary>
        string LeaderboardId { get; }

        /// <summary>
        /// Metadata.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// The number of submissions to this score record.
        /// </summary>
        int NumScore { get; }

        /// <summary>
        /// The ID of the score owner, usually a user or group.
        /// </summary>
        string OwnerId { get; }

        /// <summary>
        /// The rank of this record.
        /// </summary>
        string Rank { get; }

        /// <summary>
        /// The score value.
        /// </summary>
        string Score { get; }

        /// <summary>
        /// An optional subscore value.
        /// </summary>
        string Subscore { get; }

        /// <summary>
        /// The UNIX time when the leaderboard record was updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The username of the score owner, if the owner is a user.
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    internal class ApiLeaderboardRecord : IApiLeaderboardRecord
    {

        /// <inheritdoc />
        [JsonProperty("create_time")]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [JsonProperty("expiry_time")]
        public string ExpiryTime { get; set; }

        /// <inheritdoc />
        [JsonProperty("leaderboard_id")]
        public string LeaderboardId { get; set; }

        /// <inheritdoc />
        [JsonProperty("metadata")]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [JsonProperty("num_score")]
        public int NumScore { get; set; }

        /// <inheritdoc />
        [JsonProperty("owner_id")]
        public string OwnerId { get; set; }

        /// <inheritdoc />
        [JsonProperty("rank")]
        public string Rank { get; set; }

        /// <inheritdoc />
        [JsonProperty("score")]
        public string Score { get; set; }

        /// <inheritdoc />
        [JsonProperty("subscore")]
        public string Subscore { get; set; }

        /// <inheritdoc />
        [JsonProperty("update_time")]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [JsonProperty("username")]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output += string.Concat(output, "ExpiryTime: ", ExpiryTime, ", ");
            output += string.Concat(output, "LeaderboardId: ", LeaderboardId, ", ");
            output += string.Concat(output, "Metadata: ", Metadata, ", ");
            output += string.Concat(output, "NumScore: ", NumScore, ", ");
            output += string.Concat(output, "OwnerId: ", OwnerId, ", ");
            output += string.Concat(output, "Rank: ", Rank, ", ");
            output += string.Concat(output, "Score: ", Score, ", ");
            output += string.Concat(output, "Subscore: ", Subscore, ", ");
            output += string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            output += string.Concat(output, "Username: ", Username, ", ");
            return output;
        }
    }

    /// <summary>
    /// A set of leaderboard records, may be part of a leaderboard records page or a batch of individual records.
    /// </summary>
    public interface IApiLeaderboardRecordList
    {

        /// <summary>
        /// The cursor to send when retireving the next page, if any.
        /// </summary>
        string NextCursor { get; }

        /// <summary>
        /// A batched set of leaderobard records belonging to specified owners.
        /// </summary>
        List<IApiLeaderboardRecord> OwnerRecords { get; }

        /// <summary>
        /// The cursor to send when retrieving the previous page, if any.
        /// </summary>
        string PrevCursor { get; }

        /// <summary>
        /// A list of leaderboard records.
        /// </summary>
        List<IApiLeaderboardRecord> Records { get; }
    }

    /// <inheritdoc />
    internal class ApiLeaderboardRecordList : IApiLeaderboardRecordList
    {

        /// <inheritdoc />
        [JsonProperty("next_cursor")]
        public string NextCursor { get; set; }

        /// <inheritdoc />
        [JsonProperty("owner_records")]
        public List<IApiLeaderboardRecord> OwnerRecords { get; set; }

        /// <inheritdoc />
        [JsonProperty("prev_cursor")]
        public string PrevCursor { get; set; }

        /// <inheritdoc />
        [JsonProperty("records")]
        public List<IApiLeaderboardRecord> Records { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "NextCursor: ", NextCursor, ", ");
            output += string.Concat(output, "OwnerRecords: ", OwnerRecords, ", ");
            output += string.Concat(output, "PrevCursor: ", PrevCursor, ", ");
            output += string.Concat(output, "Records: ", Records, ", ");
            return output;
        }
    }

    /// <summary>
    /// Leave a group.
    /// </summary>
    public interface IApiLeaveGroupRequest
    {

        /// <summary>
        /// The group ID to leave.
        /// </summary>
        string GroupId { get; }
    }

    /// <inheritdoc />
    internal class ApiLeaveGroupRequest : IApiLeaveGroupRequest
    {

        /// <inheritdoc />
        [JsonProperty("group_id")]
        public string GroupId { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "GroupId: ", GroupId, ", ");
            return output;
        }
    }

    /// <summary>
    /// Represents a realtime match.
    /// </summary>
    public interface IApiMatch
    {

        /// <summary>
        /// True if it's an server-managed authoritative match, false otherwise.
        /// </summary>
        bool Authoritative { get; }

        /// <summary>
        /// Match label, if any.
        /// </summary>
        string Label { get; }

        /// <summary>
        /// The ID of the match, can be used to join.
        /// </summary>
        string MatchId { get; }

        /// <summary>
        /// Current number of users in the match.
        /// </summary>
        int Size { get; }
    }

    /// <inheritdoc />
    internal class ApiMatch : IApiMatch
    {

        /// <inheritdoc />
        [JsonProperty("authoritative")]
        public bool Authoritative { get; set; }

        /// <inheritdoc />
        [JsonProperty("label")]
        public string Label { get; set; }

        /// <inheritdoc />
        [JsonProperty("match_id")]
        public string MatchId { get; set; }

        /// <inheritdoc />
        [JsonProperty("size")]
        public int Size { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Authoritative: ", Authoritative, ", ");
            output += string.Concat(output, "Label: ", Label, ", ");
            output += string.Concat(output, "MatchId: ", MatchId, ", ");
            output += string.Concat(output, "Size: ", Size, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of realtime matches.
    /// </summary>
    public interface IApiMatchList
    {

        /// <summary>
        /// A number of matches corresponding to a list operation.
        /// </summary>
        List<IApiMatch> Matches { get; }
    }

    /// <inheritdoc />
    internal class ApiMatchList : IApiMatchList
    {

        /// <inheritdoc />
        [JsonProperty("matches")]
        public List<IApiMatch> Matches { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Matches: ", Matches, ", ");
            return output;
        }
    }

    /// <summary>
    /// A notification in the server.
    /// </summary>
    public interface IApiNotification
    {

        /// <summary>
        /// Category code for this notification.
        /// </summary>
        int Code { get; }

        /// <summary>
        /// Content of the notification in JSON.
        /// </summary>
        string Content { get; }

        /// <summary>
        /// The UNIX time when the notification was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// ID of the Notification.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// True if this notification was persisted to the database.
        /// </summary>
        bool Persistent { get; }

        /// <summary>
        /// ID of the sender, if a user. Otherwise 'null'.
        /// </summary>
        string SenderId { get; }

        /// <summary>
        /// Subject of the notification.
        /// </summary>
        string Subject { get; }
    }

    /// <inheritdoc />
    internal class ApiNotification : IApiNotification
    {

        /// <inheritdoc />
        [JsonProperty("code")]
        public int Code { get; set; }

        /// <inheritdoc />
        [JsonProperty("content")]
        public string Content { get; set; }

        /// <inheritdoc />
        [JsonProperty("create_time")]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [JsonProperty("id")]
        public string Id { get; set; }

        /// <inheritdoc />
        [JsonProperty("persistent")]
        public bool Persistent { get; set; }

        /// <inheritdoc />
        [JsonProperty("sender_id")]
        public string SenderId { get; set; }

        /// <inheritdoc />
        [JsonProperty("subject")]
        public string Subject { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Code: ", Code, ", ");
            output += string.Concat(output, "Content: ", Content, ", ");
            output += string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output += string.Concat(output, "Id: ", Id, ", ");
            output += string.Concat(output, "Persistent: ", Persistent, ", ");
            output += string.Concat(output, "SenderId: ", SenderId, ", ");
            output += string.Concat(output, "Subject: ", Subject, ", ");
            return output;
        }
    }

    /// <summary>
    /// A collection of zero or more notifications.
    /// </summary>
    public interface IApiNotificationList
    {

        /// <summary>
        /// Use this cursor to paginate notifications. Cache this to catch up to new notifications.
        /// </summary>
        string CacheableCursor { get; }

        /// <summary>
        /// Collection of notifications.
        /// </summary>
        List<IApiNotification> Notifications { get; }
    }

    /// <inheritdoc />
    internal class ApiNotificationList : IApiNotificationList
    {

        /// <inheritdoc />
        [JsonProperty("cacheable_cursor")]
        public string CacheableCursor { get; set; }

        /// <inheritdoc />
        [JsonProperty("notifications")]
        public List<IApiNotification> Notifications { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "CacheableCursor: ", CacheableCursor, ", ");
            output += string.Concat(output, "Notifications: ", Notifications, ", ");
            return output;
        }
    }

    /// <summary>
    /// Promote a set of users in a group to the next role up.
    /// </summary>
    public interface IApiPromoteGroupUsersRequest
    {

        /// <summary>
        /// The group ID to promote in.
        /// </summary>
        string GroupId { get; }

        /// <summary>
        /// The users to promote.
        /// </summary>
        List<string> UserIds { get; }
    }

    /// <inheritdoc />
    internal class ApiPromoteGroupUsersRequest : IApiPromoteGroupUsersRequest
    {

        /// <inheritdoc />
        [JsonProperty("group_id")]
        public string GroupId { get; set; }

        /// <inheritdoc />
        [JsonProperty("user_ids")]
        public List<string> UserIds { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "GroupId: ", GroupId, ", ");
            output += string.Concat(output, "UserIds: ", UserIds, ", ");
            return output;
        }
    }

    /// <summary>
    /// Storage objects to get.
    /// </summary>
    public interface IApiReadStorageObjectId
    {

        /// <summary>
        /// The collection which stores the object.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// The key of the object within the collection.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// The user owner of the object.
        /// </summary>
        string UserId { get; }
    }

    /// <inheritdoc />
    internal class ApiReadStorageObjectId : IApiReadStorageObjectId
    {

        /// <inheritdoc />
        [JsonProperty("collection")]
        public string Collection { get; set; }

        /// <inheritdoc />
        [JsonProperty("key")]
        public string Key { get; set; }

        /// <inheritdoc />
        [JsonProperty("user_id")]
        public string UserId { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Collection: ", Collection, ", ");
            output += string.Concat(output, "Key: ", Key, ", ");
            output += string.Concat(output, "UserId: ", UserId, ", ");
            return output;
        }
    }

    /// <summary>
    /// Batch get storage objects.
    /// </summary>
    public interface IApiReadStorageObjectsRequest
    {

        /// <summary>
        /// Batch of storage objects.
        /// </summary>
        List<IApiReadStorageObjectId> ObjectIds { get; }
    }

    /// <inheritdoc />
    internal class ApiReadStorageObjectsRequest : IApiReadStorageObjectsRequest
    {

        /// <inheritdoc />
        [JsonProperty("object_ids")]
        public List<IApiReadStorageObjectId> ObjectIds { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "ObjectIds: ", ObjectIds, ", ");
            return output;
        }
    }

    /// <summary>
    /// Execute an Lua function on the server.
    /// </summary>
    public interface IApiRpc
    {

        /// <summary>
        /// The authentication key used when executed as a non-client HTTP request.
        /// </summary>
        string HttpKey { get; }

        /// <summary>
        /// The identifier of the function.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The payload of the function which must be a JSON object.
        /// </summary>
        string Payload { get; }
    }

    /// <inheritdoc />
    internal class ApiRpc : IApiRpc
    {

        /// <inheritdoc />
        [JsonProperty("http_key")]
        public string HttpKey { get; set; }

        /// <inheritdoc />
        [JsonProperty("id")]
        public string Id { get; set; }

        /// <inheritdoc />
        [JsonProperty("payload")]
        public string Payload { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "HttpKey: ", HttpKey, ", ");
            output += string.Concat(output, "Id: ", Id, ", ");
            output += string.Concat(output, "Payload: ", Payload, ", ");
            return output;
        }
    }

    /// <summary>
    /// A user's session used to authenticate messages.
    /// </summary>
    public interface IApiSession
    {

        /// <summary>
        /// True if the corresponding account was just created, false otherwise.
        /// </summary>
        bool Created { get; }

        /// <summary>
        /// Authentication credentials.
        /// </summary>
        string Token { get; }

        /// <summary>
        /// rUDP specific authentication credentials.
        /// </summary>
        string UdpToken { get; }
    }

    /// <inheritdoc />
    internal class ApiSession : IApiSession
    {

        /// <inheritdoc />
        [JsonProperty("created")]
        public bool Created { get; set; }

        /// <inheritdoc />
        [JsonProperty("token")]
        public string Token { get; set; }

        /// <inheritdoc />
        [JsonProperty("udp_token")]
        public string UdpToken { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Created: ", Created, ", ");
            output += string.Concat(output, "Token: ", Token, ", ");
            output += string.Concat(output, "UdpToken: ", UdpToken, ", ");
            return output;
        }
    }

    /// <summary>
    /// An object within the storage engine.
    /// </summary>
    public interface IApiStorageObject
    {

        /// <summary>
        /// The collection which stores the object.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// The UNIX time when the object was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The key of the object within the collection.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// The read access permissions for the object.
        /// </summary>
        int PermissionRead { get; }

        /// <summary>
        /// The write access permissions for the object.
        /// </summary>
        int PermissionWrite { get; }

        /// <summary>
        /// The UNIX time when the object was last updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The user owner of the object.
        /// </summary>
        string UserId { get; }

        /// <summary>
        /// The value of the object.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// The version hash of the object.
        /// </summary>
        string Version { get; }
    }

    /// <inheritdoc />
    internal class ApiStorageObject : IApiStorageObject
    {

        /// <inheritdoc />
        [JsonProperty("collection")]
        public string Collection { get; set; }

        /// <inheritdoc />
        [JsonProperty("create_time")]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [JsonProperty("key")]
        public string Key { get; set; }

        /// <inheritdoc />
        [JsonProperty("permission_read")]
        public int PermissionRead { get; set; }

        /// <inheritdoc />
        [JsonProperty("permission_write")]
        public int PermissionWrite { get; set; }

        /// <inheritdoc />
        [JsonProperty("update_time")]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [JsonProperty("user_id")]
        public string UserId { get; set; }

        /// <inheritdoc />
        [JsonProperty("value")]
        public string Value { get; set; }

        /// <inheritdoc />
        [JsonProperty("version")]
        public string Version { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Collection: ", Collection, ", ");
            output += string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output += string.Concat(output, "Key: ", Key, ", ");
            output += string.Concat(output, "PermissionRead: ", PermissionRead, ", ");
            output += string.Concat(output, "PermissionWrite: ", PermissionWrite, ", ");
            output += string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            output += string.Concat(output, "UserId: ", UserId, ", ");
            output += string.Concat(output, "Value: ", Value, ", ");
            output += string.Concat(output, "Version: ", Version, ", ");
            return output;
        }
    }

    /// <summary>
    /// A storage acknowledgement.
    /// </summary>
    public interface IApiStorageObjectAck
    {

        /// <summary>
        /// The collection which stores the object.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// The key of the object within the collection.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// The owner of the object.
        /// </summary>
        string UserId { get; }

        /// <summary>
        /// The version hash of the object.
        /// </summary>
        string Version { get; }
    }

    /// <inheritdoc />
    internal class ApiStorageObjectAck : IApiStorageObjectAck
    {

        /// <inheritdoc />
        [JsonProperty("collection")]
        public string Collection { get; set; }

        /// <inheritdoc />
        [JsonProperty("key")]
        public string Key { get; set; }

        /// <inheritdoc />
        [JsonProperty("user_id")]
        public string UserId { get; set; }

        /// <inheritdoc />
        [JsonProperty("version")]
        public string Version { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Collection: ", Collection, ", ");
            output += string.Concat(output, "Key: ", Key, ", ");
            output += string.Concat(output, "UserId: ", UserId, ", ");
            output += string.Concat(output, "Version: ", Version, ", ");
            return output;
        }
    }

    /// <summary>
    /// Batch of acknowledgements for the storage object write.
    /// </summary>
    public interface IApiStorageObjectAcks
    {

        /// <summary>
        /// Batch of storage write acknowledgements.
        /// </summary>
        List<IApiStorageObjectAck> Acks { get; }
    }

    /// <inheritdoc />
    internal class ApiStorageObjectAcks : IApiStorageObjectAcks
    {

        /// <inheritdoc />
        [JsonProperty("acks")]
        public List<IApiStorageObjectAck> Acks { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Acks: ", Acks, ", ");
            return output;
        }
    }

    /// <summary>
    /// List of storage objects.
    /// </summary>
    public interface IApiStorageObjectList
    {

        /// <summary>
        /// The cursor associated with the query a page of results.
        /// </summary>
        string Cursor { get; }

        /// <summary>
        /// The list of storage objects.
        /// </summary>
        List<IApiStorageObject> Objects { get; }
    }

    /// <inheritdoc />
    internal class ApiStorageObjectList : IApiStorageObjectList
    {

        /// <inheritdoc />
        [JsonProperty("cursor")]
        public string Cursor { get; set; }

        /// <inheritdoc />
        [JsonProperty("objects")]
        public List<IApiStorageObject> Objects { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Cursor: ", Cursor, ", ");
            output += string.Concat(output, "Objects: ", Objects, ", ");
            return output;
        }
    }

    /// <summary>
    /// Batch of storage objects.
    /// </summary>
    public interface IApiStorageObjects
    {

        /// <summary>
        /// The batch of storage objects.
        /// </summary>
        List<IApiStorageObject> Objects { get; }
    }

    /// <inheritdoc />
    internal class ApiStorageObjects : IApiStorageObjects
    {

        /// <inheritdoc />
        [JsonProperty("objects")]
        public List<IApiStorageObject> Objects { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Objects: ", Objects, ", ");
            return output;
        }
    }

    /// <summary>
    /// Update a user's account details.
    /// </summary>
    public interface IApiUpdateAccountRequest
    {

        /// <summary>
        /// A URL for an avatar image.
        /// </summary>
        string AvatarUrl { get; }

        /// <summary>
        /// The display name of the user.
        /// </summary>
        string DisplayName { get; }

        /// <summary>
        /// The language expected to be a tag which follows the BCP-47 spec.
        /// </summary>
        string LangTag { get; }

        /// <summary>
        /// The location set by the user.
        /// </summary>
        string Location { get; }

        /// <summary>
        /// The timezone set by the user.
        /// </summary>
        string Timezone { get; }

        /// <summary>
        /// The username of the user's account.
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    internal class ApiUpdateAccountRequest : IApiUpdateAccountRequest
    {

        /// <inheritdoc />
        [JsonProperty("avatar_url")]
        public string AvatarUrl { get; set; }

        /// <inheritdoc />
        [JsonProperty("display_name")]
        public string DisplayName { get; set; }

        /// <inheritdoc />
        [JsonProperty("lang_tag")]
        public string LangTag { get; set; }

        /// <inheritdoc />
        [JsonProperty("location")]
        public string Location { get; set; }

        /// <inheritdoc />
        [JsonProperty("timezone")]
        public string Timezone { get; set; }

        /// <inheritdoc />
        [JsonProperty("username")]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "AvatarUrl: ", AvatarUrl, ", ");
            output += string.Concat(output, "DisplayName: ", DisplayName, ", ");
            output += string.Concat(output, "LangTag: ", LangTag, ", ");
            output += string.Concat(output, "Location: ", Location, ", ");
            output += string.Concat(output, "Timezone: ", Timezone, ", ");
            output += string.Concat(output, "Username: ", Username, ", ");
            return output;
        }
    }

    /// <summary>
    /// Update fields in a given group.
    /// </summary>
    public interface IApiUpdateGroupRequest
    {

        /// <summary>
        /// Avatar URL.
        /// </summary>
        string AvatarUrl { get; }

        /// <summary>
        /// Description string.
        /// </summary>
        string Description { get; }

        /// <summary>
        /// The ID of the group to update.
        /// </summary>
        string GroupId { get; }

        /// <summary>
        /// Lang tag.
        /// </summary>
        string LangTag { get; }

        /// <summary>
        /// Name.
        /// </summary>
        string Name { get; }

        /// <summary>
        /// Open is true if anyone should be allowed to join, or false if joins must be approved by a group admin.
        /// </summary>
        bool Open { get; }
    }

    /// <inheritdoc />
    internal class ApiUpdateGroupRequest : IApiUpdateGroupRequest
    {

        /// <inheritdoc />
        [JsonProperty("avatar_url")]
        public string AvatarUrl { get; set; }

        /// <inheritdoc />
        [JsonProperty("description")]
        public string Description { get; set; }

        /// <inheritdoc />
        [JsonProperty("group_id")]
        public string GroupId { get; set; }

        /// <inheritdoc />
        [JsonProperty("lang_tag")]
        public string LangTag { get; set; }

        /// <inheritdoc />
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <inheritdoc />
        [JsonProperty("open")]
        public bool Open { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "AvatarUrl: ", AvatarUrl, ", ");
            output += string.Concat(output, "Description: ", Description, ", ");
            output += string.Concat(output, "GroupId: ", GroupId, ", ");
            output += string.Concat(output, "LangTag: ", LangTag, ", ");
            output += string.Concat(output, "Name: ", Name, ", ");
            output += string.Concat(output, "Open: ", Open, ", ");
            return output;
        }
    }

    /// <summary>
    /// A user in the server.
    /// </summary>
    public interface IApiUser
    {

        /// <summary>
        /// A URL for an avatar image.
        /// </summary>
        string AvatarUrl { get; }

        /// <summary>
        /// The UNIX time when the user was created.
        /// </summary>
        string CreateTime { get; }

        /// <summary>
        /// The display name of the user.
        /// </summary>
        string DisplayName { get; }

        /// <summary>
        /// Number of related edges to this user.
        /// </summary>
        int EdgeCount { get; }

        /// <summary>
        /// The Facebook id in the user's account.
        /// </summary>
        string FacebookId { get; }

        /// <summary>
        /// The Apple Game Center in of the user's account.
        /// </summary>
        string GamecenterId { get; }

        /// <summary>
        /// The Google id in the user's account.
        /// </summary>
        string GoogleId { get; }

        /// <summary>
        /// The id of the user's account.
        /// </summary>
        string Id { get; }

        /// <summary>
        /// The language expected to be a tag which follows the BCP-47 spec.
        /// </summary>
        string LangTag { get; }

        /// <summary>
        /// The location set by the user.
        /// </summary>
        string Location { get; }

        /// <summary>
        /// Additional information stored as a JSON object.
        /// </summary>
        string Metadata { get; }

        /// <summary>
        /// Indicates whether the user is currently online.
        /// </summary>
        bool Online { get; }

        /// <summary>
        /// The Steam id in the user's account.
        /// </summary>
        string SteamId { get; }

        /// <summary>
        /// The timezone set by the user.
        /// </summary>
        string Timezone { get; }

        /// <summary>
        /// The UNIX time when the user was last updated.
        /// </summary>
        string UpdateTime { get; }

        /// <summary>
        /// The username of the user's account.
        /// </summary>
        string Username { get; }
    }

    /// <inheritdoc />
    internal class ApiUser : IApiUser
    {

        /// <inheritdoc />
        [JsonProperty("avatar_url")]
        public string AvatarUrl { get; set; }

        /// <inheritdoc />
        [JsonProperty("create_time")]
        public string CreateTime { get; set; }

        /// <inheritdoc />
        [JsonProperty("display_name")]
        public string DisplayName { get; set; }

        /// <inheritdoc />
        [JsonProperty("edge_count")]
        public int EdgeCount { get; set; }

        /// <inheritdoc />
        [JsonProperty("facebook_id")]
        public string FacebookId { get; set; }

        /// <inheritdoc />
        [JsonProperty("gamecenter_id")]
        public string GamecenterId { get; set; }

        /// <inheritdoc />
        [JsonProperty("google_id")]
        public string GoogleId { get; set; }

        /// <inheritdoc />
        [JsonProperty("id")]
        public string Id { get; set; }

        /// <inheritdoc />
        [JsonProperty("lang_tag")]
        public string LangTag { get; set; }

        /// <inheritdoc />
        [JsonProperty("location")]
        public string Location { get; set; }

        /// <inheritdoc />
        [JsonProperty("metadata")]
        public string Metadata { get; set; }

        /// <inheritdoc />
        [JsonProperty("online")]
        public bool Online { get; set; }

        /// <inheritdoc />
        [JsonProperty("steam_id")]
        public string SteamId { get; set; }

        /// <inheritdoc />
        [JsonProperty("timezone")]
        public string Timezone { get; set; }

        /// <inheritdoc />
        [JsonProperty("update_time")]
        public string UpdateTime { get; set; }

        /// <inheritdoc />
        [JsonProperty("username")]
        public string Username { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "AvatarUrl: ", AvatarUrl, ", ");
            output += string.Concat(output, "CreateTime: ", CreateTime, ", ");
            output += string.Concat(output, "DisplayName: ", DisplayName, ", ");
            output += string.Concat(output, "EdgeCount: ", EdgeCount, ", ");
            output += string.Concat(output, "FacebookId: ", FacebookId, ", ");
            output += string.Concat(output, "GamecenterId: ", GamecenterId, ", ");
            output += string.Concat(output, "GoogleId: ", GoogleId, ", ");
            output += string.Concat(output, "Id: ", Id, ", ");
            output += string.Concat(output, "LangTag: ", LangTag, ", ");
            output += string.Concat(output, "Location: ", Location, ", ");
            output += string.Concat(output, "Metadata: ", Metadata, ", ");
            output += string.Concat(output, "Online: ", Online, ", ");
            output += string.Concat(output, "SteamId: ", SteamId, ", ");
            output += string.Concat(output, "Timezone: ", Timezone, ", ");
            output += string.Concat(output, "UpdateTime: ", UpdateTime, ", ");
            output += string.Concat(output, "Username: ", Username, ", ");
            return output;
        }
    }

    /// <summary>
    /// A list of groups belonging to a user, along with the user's role in each group.
    /// </summary>
    public interface IApiUserGroupList
    {

        /// <summary>
        /// Group-role pairs for a user.
        /// </summary>
        List<IUserGroupListUserGroup> UserGroups { get; }
    }

    /// <inheritdoc />
    internal class ApiUserGroupList : IApiUserGroupList
    {

        /// <inheritdoc />
        [JsonProperty("user_groups")]
        public List<IUserGroupListUserGroup> UserGroups { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "UserGroups: ", UserGroups, ", ");
            return output;
        }
    }

    /// <summary>
    /// A collection of zero or more users.
    /// </summary>
    public interface IApiUsers
    {

        /// <summary>
        /// The User objects.
        /// </summary>
        List<IApiUser> Users { get; }
    }

    /// <inheritdoc />
    internal class ApiUsers : IApiUsers
    {

        /// <inheritdoc />
        [JsonProperty("users")]
        public List<IApiUser> Users { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Users: ", Users, ", ");
            return output;
        }
    }

    /// <summary>
    /// The object to store.
    /// </summary>
    public interface IApiWriteStorageObject
    {

        /// <summary>
        /// The collection to store the object.
        /// </summary>
        string Collection { get; }

        /// <summary>
        /// The key for the object within the collection.
        /// </summary>
        string Key { get; }

        /// <summary>
        /// The read access permissions for the object.
        /// </summary>
        int PermissionRead { get; }

        /// <summary>
        /// The write access permissions for the object.
        /// </summary>
        int PermissionWrite { get; }

        /// <summary>
        /// The value of the object.
        /// </summary>
        string Value { get; }

        /// <summary>
        /// The version hash of the object to check. Possible values are: ["", "*", "#hash#"].
        /// </summary>
        string Version { get; }
    }

    /// <inheritdoc />
    internal class ApiWriteStorageObject : IApiWriteStorageObject
    {

        /// <inheritdoc />
        [JsonProperty("collection")]
        public string Collection { get; set; }

        /// <inheritdoc />
        [JsonProperty("key")]
        public string Key { get; set; }

        /// <inheritdoc />
        [JsonProperty("permission_read")]
        public int PermissionRead { get; set; }

        /// <inheritdoc />
        [JsonProperty("permission_write")]
        public int PermissionWrite { get; set; }

        /// <inheritdoc />
        [JsonProperty("value")]
        public string Value { get; set; }

        /// <inheritdoc />
        [JsonProperty("version")]
        public string Version { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Collection: ", Collection, ", ");
            output += string.Concat(output, "Key: ", Key, ", ");
            output += string.Concat(output, "PermissionRead: ", PermissionRead, ", ");
            output += string.Concat(output, "PermissionWrite: ", PermissionWrite, ", ");
            output += string.Concat(output, "Value: ", Value, ", ");
            output += string.Concat(output, "Version: ", Version, ", ");
            return output;
        }
    }

    /// <summary>
    /// Write objects to the storage engine.
    /// </summary>
    public interface IApiWriteStorageObjectsRequest
    {

        /// <summary>
        /// The objects to store on the server.
        /// </summary>
        List<IApiWriteStorageObject> Objects { get; }
    }

    /// <inheritdoc />
    internal class ApiWriteStorageObjectsRequest : IApiWriteStorageObjectsRequest
    {

        /// <inheritdoc />
        [JsonProperty("objects")]
        public List<IApiWriteStorageObject> Objects { get; set; }

        public override string ToString()
        {
            var output = "";
            output += string.Concat(output, "Objects: ", Objects, ", ");
            return output;
        }
    }

    /// <summary>
    /// service Foo {       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);     }  The JSON representation for `Empty` is empty JSON object `{}`.
    /// </summary>
    public interface IProtobufEmpty
    {
    }

    /// <inheritdoc />
    internal class ProtobufEmpty : IProtobufEmpty
    {

        public override string ToString()
        {
            var output = "";
            return output;
        }
    }

    /// <summary>
    /// </summary>
    public interface IRequestDispatcher {
    }

    /// <summary>
    /// The low level client for the Nakama API.
    /// </summary>
    internal class ApiClient
    {
        private readonly IRequestDispatcher _dispatcher;
        private readonly Uri _baseUri;

        public ApiClient(IRequestDispatcher dispatcher, Uri baseUri)
        {
        	_dispatcher = dispatcher;
        	_baseUri = baseUri;
        }

        /// <summary>
        /// A healthcheck which load balancers can use to check the service.
        /// </summary>
        public async Task<IProtobufEmpty> HealthcheckAsync(
            string bearerToken)
        {
        	HttpClient client = new HttpClient(); // FIXME

            var urlpath = "/healthcheck?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("GET"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Fetch the current user's account.
        /// </summary>
        public async Task<IApiAccount> GetAccountAsync(
            string bearerToken)
        {
        	HttpClient client = new HttpClient(); // FIXME

            var urlpath = "/v2/account?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("GET"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiAccount>();
        }

        /// <summary>
        /// Update fields in the current user's account.
        /// </summary>
        public async Task<IProtobufEmpty> UpdateAccountAsync(
            string bearerToken
            , ApiUpdateAccountRequest body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("PUT"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Authenticate a user with a custom id against the server.
        /// </summary>
        public async Task<IApiSession> AuthenticateCustomAsync(
            string username
            , string password
            , ApiAccountCustom body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/authenticate/custom?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")}
                }
            };
            var credentials = Encoding.UTF8.GetBytes(username + ":" + password);
            var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Authenticate a user with a device id against the server.
        /// </summary>
        public async Task<IApiSession> AuthenticateDeviceAsync(
            string username
            , string password
            , ApiAccountDevice body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/authenticate/device?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var credentials = Encoding.UTF8.GetBytes(username + ":" + password);
            var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Authenticate a user with an email+password against the server.
        /// </summary>
        public async Task<IApiSession> AuthenticateEmailAsync(
            string username
            , string password
            , ApiAccountEmail body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/authenticate/email?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var credentials = Encoding.UTF8.GetBytes(username + ":" + password);
            var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Authenticate a user with a Facebook OAuth token against the server.
        /// </summary>
        public async Task<IApiSession> AuthenticateFacebookAsync(
            string username
            , string password
            , ApiAccountFacebook body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/authenticate/facebook?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var credentials = Encoding.UTF8.GetBytes(username + ":" + password);
            var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Authenticate a user with Apple's GameCenter against the server.
        /// </summary>
        public async Task<IApiSession> AuthenticateGameCenterAsync(
            string username
            , string password
            , ApiAccountGameCenter body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/authenticate/gamecenter?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var credentials = Encoding.UTF8.GetBytes(username + ":" + password);
            var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Authenticate a user with Google against the server.
        /// </summary>
        public async Task<IApiSession> AuthenticateGoogleAsync(
            string username
            , string password
            , ApiAccountGoogle body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/authenticate/google?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var credentials = Encoding.UTF8.GetBytes(username + ":" + password);
            var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Authenticate a user with Steam against the server.
        /// </summary>
        public async Task<IApiSession> AuthenticateSteamAsync(
            string username
            , string password
            , ApiAccountSteam body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/authenticate/steam?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var credentials = Encoding.UTF8.GetBytes(username + ":" + password);
            var header = string.Concat("Basic ", Convert.ToBase64String(credentials));
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiSession>();
        }

        /// <summary>
        /// Add a custom ID to the social profiles on the current user's account.
        /// </summary>
        public async Task<IProtobufEmpty> LinkCustomAsync(
            string bearerToken
            , ApiAccountCustom body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/link/custom?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Add a device ID to the social profiles on the current user's account.
        /// </summary>
        public async Task<IProtobufEmpty> LinkDeviceAsync(
            string bearerToken
            , ApiAccountDevice body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/link/device?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Add an email+password to the social profiles on the current user's account.
        /// </summary>
        public async Task<IProtobufEmpty> LinkEmailAsync(
            string bearerToken
            , ApiAccountEmail body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/link/email?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Add Facebook to the social profiles on the current user's account.
        /// </summary>
        public async Task<IProtobufEmpty> LinkFacebookAsync(
            string bearerToken
            , ApiAccountFacebook body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/link/facebook?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Add Apple's GameCenter to the social profiles on the current user's account.
        /// </summary>
        public async Task<IProtobufEmpty> LinkGameCenterAsync(
            string bearerToken
            , ApiAccountGameCenter body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/link/gamecenter?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Add Google to the social profiles on the current user's account.
        /// </summary>
        public async Task<IProtobufEmpty> LinkGoogleAsync(
            string bearerToken
            , ApiAccountGoogle body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/link/google?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Add Steam to the social profiles on the current user's account.
        /// </summary>
        public async Task<IProtobufEmpty> LinkSteamAsync(
            string bearerToken
            , ApiAccountSteam body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/link/steam?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Remove the custom ID from the social profiles on the current user's account.
        /// </summary>
        public async Task<IProtobufEmpty> UnlinkCustomAsync(
            string bearerToken
            , ApiAccountCustom body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/unlink/custom?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Remove the device ID from the social profiles on the current user's account.
        /// </summary>
        public async Task<IProtobufEmpty> UnlinkDeviceAsync(
            string bearerToken
            , ApiAccountDevice body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/unlink/device?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Remove the email+password from the social profiles on the current user's account.
        /// </summary>
        public async Task<IProtobufEmpty> UnlinkEmailAsync(
            string bearerToken
            , ApiAccountEmail body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/unlink/email?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Remove Facebook from the social profiles on the current user's account.
        /// </summary>
        public async Task<IProtobufEmpty> UnlinkFacebookAsync(
            string bearerToken
            , ApiAccountFacebook body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/unlink/facebook?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Remove Apple's GameCenter from the social profiles on the current user's account.
        /// </summary>
        public async Task<IProtobufEmpty> UnlinkGameCenterAsync(
            string bearerToken
            , ApiAccountGameCenter body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/unlink/gamecenter?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Remove Google from the social profiles on the current user's account.
        /// </summary>
        public async Task<IProtobufEmpty> UnlinkGoogleAsync(
            string bearerToken
            , ApiAccountGoogle body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/unlink/google?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Remove Steam from the social profiles on the current user's account.
        /// </summary>
        public async Task<IProtobufEmpty> UnlinkSteamAsync(
            string bearerToken
            , ApiAccountSteam body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/account/unlink/steam?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// List a channel's message history.
        /// </summary>
        public async Task<IApiChannelMessageList> ListChannelMessagesAsync(
            string bearerToken
            , string channelId
            , int limit
            , bool forward
            , string cursor)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (channelId == null)
            {
                throw new ArgumentException("'channelId' is required but was null.");
            }

            var urlpath = "/v2/channel/{channel_id}?";
            urlpath = urlpath.Replace("{channel_id}", Uri.EscapeDataString(channelId));
            urlpath = string.Concat(urlpath, "limit=", limit, "&");
            urlpath = string.Concat(urlpath, "forward=", forward.ToString().ToLower(), "&");
            urlpath = string.Concat(urlpath, "cursor=", Uri.EscapeDataString(cursor), "&");

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("GET"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiChannelMessageList>();
        }

        /// <summary>
        /// Delete one or more users by ID or username.
        /// </summary>
        public async Task<IProtobufEmpty> DeleteFriendsAsync(
            string bearerToken
            , IEnumerable<string> ids
            , IEnumerable<string> usernames)
        {
        	HttpClient client = new HttpClient(); // FIXME

            var urlpath = "/v2/friend?";
            foreach (var elem in ids)
            {
                urlpath = string.Concat(urlpath, "ids=", elem, "&");
            }
            foreach (var elem in usernames)
            {
                urlpath = string.Concat(urlpath, "usernames=", elem, "&");
            }

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("DELETE"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// List all friends for the current user.
        /// </summary>
        public async Task<IApiFriends> ListFriendsAsync(
            string bearerToken)
        {
        	HttpClient client = new HttpClient(); // FIXME

            var urlpath = "/v2/friend?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("GET"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiFriends>();
        }

        /// <summary>
        /// Add friends by ID or username to a user's account.
        /// </summary>
        public async Task<IProtobufEmpty> AddFriendsAsync(
            string bearerToken)
        {
        	HttpClient client = new HttpClient(); // FIXME

            var urlpath = "/v2/friend?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Block one or more users by ID or username.
        /// </summary>
        public async Task<IProtobufEmpty> BlockFriendsAsync(
            string bearerToken)
        {
        	HttpClient client = new HttpClient(); // FIXME

            var urlpath = "/v2/friend/block?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Import Facebook friends and add them to a user's account.
        /// </summary>
        public async Task<IProtobufEmpty> ImportFacebookFriendsAsync(
            string bearerToken
            , ApiAccountFacebook body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/friend/facebook?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Create a new group with the current user as the owner.
        /// </summary>
        public async Task<IApiGroup> CreateGroupAsync(
            string bearerToken
            , ApiCreateGroupRequest body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/group?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiGroup>();
        }

        /// <summary>
        /// Delete one or more groups by ID.
        /// </summary>
        public async Task<IProtobufEmpty> DeleteGroupAsync(
            string bearerToken
            , string groupId)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (groupId == null)
            {
                throw new ArgumentException("'groupId' is required but was null.");
            }

            var urlpath = "/v2/group/{group_id}?";
            urlpath = urlpath.Replace("{group_id}", Uri.EscapeDataString(groupId));

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("DELETE"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Update fields in a given group.
        /// </summary>
        public async Task<IProtobufEmpty> UpdateGroupAsync(
            string bearerToken
            , string groupId
            , ApiUpdateGroupRequest body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (groupId == null)
            {
                throw new ArgumentException("'groupId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/group/{group_id}?";
            urlpath = urlpath.Replace("{group_id}", Uri.EscapeDataString(groupId));

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("PUT"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Add users to a group.
        /// </summary>
        public async Task<IProtobufEmpty> AddGroupUsersAsync(
            string bearerToken
            , string groupId
            , ApiAddGroupUsersRequest body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (groupId == null)
            {
                throw new ArgumentException("'groupId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/group/{group_id}/add?";
            urlpath = urlpath.Replace("{group_id}", Uri.EscapeDataString(groupId));

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Immediately join an open group, or request to join a closed one.
        /// </summary>
        public async Task<IProtobufEmpty> JoinGroupAsync(
            string bearerToken
            , string groupId
            , ApiJoinGroupRequest body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (groupId == null)
            {
                throw new ArgumentException("'groupId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/group/{group_id}/join?";
            urlpath = urlpath.Replace("{group_id}", Uri.EscapeDataString(groupId));

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Kick a set of users from a group.
        /// </summary>
        public async Task<IProtobufEmpty> KickGroupUsersAsync(
            string bearerToken
            , string groupId
            , ApiKickGroupUsersRequest body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (groupId == null)
            {
                throw new ArgumentException("'groupId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/group/{group_id}/kick?";
            urlpath = urlpath.Replace("{group_id}", Uri.EscapeDataString(groupId));

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Leave a group the user is a member of.
        /// </summary>
        public async Task<IProtobufEmpty> LeaveGroupAsync(
            string bearerToken
            , string groupId
            , ApiLeaveGroupRequest body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (groupId == null)
            {
                throw new ArgumentException("'groupId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/group/{group_id}/leave?";
            urlpath = urlpath.Replace("{group_id}", Uri.EscapeDataString(groupId));

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Promote a set of users in a group to the next role up.
        /// </summary>
        public async Task<IProtobufEmpty> PromoteGroupUsersAsync(
            string bearerToken
            , string groupId
            , ApiPromoteGroupUsersRequest body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (groupId == null)
            {
                throw new ArgumentException("'groupId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/group/{group_id}/promote?";
            urlpath = urlpath.Replace("{group_id}", Uri.EscapeDataString(groupId));

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// List all users that are part of a group.
        /// </summary>
        public async Task<IApiGroupUserList> ListGroupUsersAsync(
            string bearerToken
            , string groupId)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (groupId == null)
            {
                throw new ArgumentException("'groupId' is required but was null.");
            }

            var urlpath = "/v2/group/{group_id}/user?";
            urlpath = urlpath.Replace("{group_id}", Uri.EscapeDataString(groupId));

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("GET"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiGroupUserList>();
        }

        /// <summary>
        /// Delete a leaderboard record.
        /// </summary>
        public async Task<IProtobufEmpty> DeleteLeaderboardRecordAsync(
            string bearerToken
            , string leaderboardId)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (leaderboardId == null)
            {
                throw new ArgumentException("'leaderboardId' is required but was null.");
            }

            var urlpath = "/v2/leaderboard/{leaderboard_id}?";
            urlpath = urlpath.Replace("{leaderboard_id}", Uri.EscapeDataString(leaderboardId));

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("DELETE"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// List leaderboard records
        /// </summary>
        public async Task<IApiLeaderboardRecordList> ListLeaderboardRecordsAsync(
            string bearerToken
            , string leaderboardId
            , IEnumerable<string> ownerIds
            , int limit
            , string cursor)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (leaderboardId == null)
            {
                throw new ArgumentException("'leaderboardId' is required but was null.");
            }

            var urlpath = "/v2/leaderboard/{leaderboard_id}?";
            urlpath = urlpath.Replace("{leaderboard_id}", Uri.EscapeDataString(leaderboardId));
            foreach (var elem in ownerIds)
            {
                urlpath = string.Concat(urlpath, "owner_ids=", elem, "&");
            }
            urlpath = string.Concat(urlpath, "limit=", limit, "&");
            urlpath = string.Concat(urlpath, "cursor=", Uri.EscapeDataString(cursor), "&");

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("GET"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiLeaderboardRecordList>();
        }

        /// <summary>
        /// Write a record to a leaderboard.
        /// </summary>
        public async Task<IApiLeaderboardRecord> WriteLeaderboardRecordAsync(
            string bearerToken
            , string leaderboardId
            , WriteLeaderboardRecordRequestLeaderboardRecordWrite body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (leaderboardId == null)
            {
                throw new ArgumentException("'leaderboardId' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/leaderboard/{leaderboard_id}?";
            urlpath = urlpath.Replace("{leaderboard_id}", Uri.EscapeDataString(leaderboardId));

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiLeaderboardRecord>();
        }

        /// <summary>
        /// Fetch list of running matches.
        /// </summary>
        public async Task<IApiMatchList> ListMatchesAsync(
            string bearerToken
            , int limit
            , bool authoritative
            , string label
            , int minSize
            , int maxSize)
        {
        	HttpClient client = new HttpClient(); // FIXME

            var urlpath = "/v2/match?";
            urlpath = string.Concat(urlpath, "limit=", limit, "&");
            urlpath = string.Concat(urlpath, "authoritative=", authoritative.ToString().ToLower(), "&");
            urlpath = string.Concat(urlpath, "label=", Uri.EscapeDataString(label), "&");
            urlpath = string.Concat(urlpath, "min_size=", minSize, "&");
            urlpath = string.Concat(urlpath, "max_size=", maxSize, "&");

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("GET"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiMatchList>();
        }

        /// <summary>
        /// Delete one or more users by ID or username.
        /// </summary>
        public async Task<IProtobufEmpty> DeleteNotificationsAsync(
            string bearerToken
            , IEnumerable<string> ids)
        {
        	HttpClient client = new HttpClient(); // FIXME

            var urlpath = "/v2/notification?";
            foreach (var elem in ids)
            {
                urlpath = string.Concat(urlpath, "ids=", elem, "&");
            }

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("DELETE"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// Fetch list of notifications.
        /// </summary>
        public async Task<IApiNotificationList> ListNotificationsAsync(
            string bearerToken
            , int limit
            , string cacheableCursor)
        {
        	HttpClient client = new HttpClient(); // FIXME

            var urlpath = "/v2/notification?";
            urlpath = string.Concat(urlpath, "limit=", limit, "&");
            urlpath = string.Concat(urlpath, "cacheable_cursor=", Uri.EscapeDataString(cacheableCursor), "&");

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("GET"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiNotificationList>();
        }

        /// <summary>
        /// Execute a Lua function on the server.
        /// </summary>
        public async Task<IApiRpc> RpcFunc2Async(
            string bearerToken
            , string id
            , string payload
            , string httpKey)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }

            var urlpath = "/v2/rpc/{id}?";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));
            urlpath = string.Concat(urlpath, "payload=", Uri.EscapeDataString(payload), "&");
            urlpath = string.Concat(urlpath, "http_key=", Uri.EscapeDataString(httpKey), "&");

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("GET"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            if (!string.IsNullOrEmpty(bearerToken))
            {
                var header = string.Concat("Bearer ", bearerToken);
                request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            }

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiRpc>();
        }

        /// <summary>
        /// Execute a Lua function on the server.
        /// </summary>
        public async Task<IApiRpc> RpcFuncAsync(
            string bearerToken
            , string id
            , string body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (id == null)
            {
                throw new ArgumentException("'id' is required but was null.");
            }
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/rpc/{id}?";
            urlpath = urlpath.Replace("{id}", Uri.EscapeDataString(id));

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            if (!string.IsNullOrEmpty(bearerToken))
            {
                var header = string.Concat("Bearer ", bearerToken);
                request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            }
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiRpc>();
        }

        /// <summary>
        /// Get storage objects.
        /// </summary>
        public async Task<IApiStorageObjects> ReadStorageObjectsAsync(
            string bearerToken
            , ApiReadStorageObjectsRequest body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/storage?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("POST"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiStorageObjects>();
        }

        /// <summary>
        /// Write objects into the storage engine.
        /// </summary>
        public async Task<IApiStorageObjectAcks> WriteStorageObjectsAsync(
            string bearerToken
            , ApiWriteStorageObjectsRequest body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/storage?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("PUT"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiStorageObjectAcks>();
        }

        /// <summary>
        /// Delete one or more objects by ID or username.
        /// </summary>
        public async Task<IProtobufEmpty> DeleteStorageObjectsAsync(
            string bearerToken
            , ApiDeleteStorageObjectsRequest body)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (body == null)
            {
                throw new ArgumentException("'body' is required but was null.");
            }

            var urlpath = "/v2/storage/delete?";

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("PUT"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);
            request.Content = new StringContent(body.ToJson());

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ProtobufEmpty>();
        }

        /// <summary>
        /// List publicly readable storage objects in a given collection.
        /// </summary>
        public async Task<IApiStorageObjectList> ListStorageObjectsAsync(
            string bearerToken
            , string collection
            , string userId
            , int limit
            , string cursor)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (collection == null)
            {
                throw new ArgumentException("'collection' is required but was null.");
            }

            var urlpath = "/v2/storage/{collection}?";
            urlpath = urlpath.Replace("{collection}", Uri.EscapeDataString(collection));
            urlpath = string.Concat(urlpath, "user_id=", Uri.EscapeDataString(userId), "&");
            urlpath = string.Concat(urlpath, "limit=", limit, "&");
            urlpath = string.Concat(urlpath, "cursor=", Uri.EscapeDataString(cursor), "&");

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("GET"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiStorageObjectList>();
        }

        /// <summary>
        /// List publicly readable storage objects in a given collection.
        /// </summary>
        public async Task<IApiStorageObjectList> ListStorageObjects2Async(
            string bearerToken
            , string collection
            , string userId
            , int limit
            , string cursor)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (collection == null)
            {
                throw new ArgumentException("'collection' is required but was null.");
            }
            if (userId == null)
            {
                throw new ArgumentException("'userId' is required but was null.");
            }

            var urlpath = "/v2/storage/{collection}/{user_id}?";
            urlpath = urlpath.Replace("{collection}", Uri.EscapeDataString(collection));
            urlpath = urlpath.Replace("{user_id}", Uri.EscapeDataString(userId));
            urlpath = string.Concat(urlpath, "limit=", limit, "&");
            urlpath = string.Concat(urlpath, "cursor=", Uri.EscapeDataString(cursor), "&");

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("GET"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiStorageObjectList>();
        }

        /// <summary>
        /// Fetch zero or more users by ID and/or username.
        /// </summary>
        public async Task<IApiUsers> GetUsersAsync(
            string bearerToken
            , IEnumerable<string> ids
            , IEnumerable<string> usernames
            , IEnumerable<string> facebookIds)
        {
        	HttpClient client = new HttpClient(); // FIXME

            var urlpath = "/v2/user?";
            foreach (var elem in ids)
            {
                urlpath = string.Concat(urlpath, "ids=", elem, "&");
            }
            foreach (var elem in usernames)
            {
                urlpath = string.Concat(urlpath, "usernames=", elem, "&");
            }
            foreach (var elem in facebookIds)
            {
                urlpath = string.Concat(urlpath, "facebook_ids=", elem, "&");
            }

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("GET"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiUsers>();
        }

        /// <summary>
        /// List groups the current user belongs to.
        /// </summary>
        public async Task<IApiUserGroupList> ListUserGroupsAsync(
            string bearerToken
            , string userId)
        {
        	HttpClient client = new HttpClient(); // FIXME
            if (userId == null)
            {
                throw new ArgumentException("'userId' is required but was null.");
            }

            var urlpath = "/v2/user/{user_id}/group?";
            urlpath = urlpath.Replace("{user_id}", Uri.EscapeDataString(userId));

            var request = new HttpRequestMessage
            {
                RequestUri = new Uri(_baseUri, urlpath),
                Method = new HttpMethod("GET"),
                Headers =
                {
                    Accept = {new MediaTypeWithQualityHeaderValue("application/json")},
                    UserAgent = {new ProductInfoHeaderValue("nakama-dotnet", "")}
                }
            };
            var header = string.Concat("Bearer ", bearerToken);
            request.Headers.Authorization = AuthenticationHeaderValue.Parse(header);

            var response = await client.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var contents = await response.Content.ReadAsStringAsync();
            return contents.FromJson<ApiUserGroupList>();
        }
    }
}
