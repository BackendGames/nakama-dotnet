// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: github.com/heroiclabs/nakama-common/rtapi/realtime.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nakama {

  /// <summary>Holder for reflection information generated from github.com/heroiclabs/nakama-common/rtapi/realtime.proto</summary>
  public static partial class RealtimeReflection {

    #region Descriptor
    /// <summary>File descriptor for github.com/heroiclabs/nakama-common/rtapi/realtime.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RealtimeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjhnaXRodWIuY29tL2hlcm9pY2xhYnMvbmFrYW1hLWNvbW1vbi9ydGFwaS9y",
            "ZWFsdGltZS5wcm90bxIPbmFrYW1hLnJlYWx0aW1lGh9nb29nbGUvcHJvdG9i",
            "dWYvdGltZXN0YW1wLnByb3RvGh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMu",
            "cHJvdG8aMWdpdGh1Yi5jb20vaGVyb2ljbGFicy9uYWthbWEtY29tbW9uL2Fw",
            "aS9hcGkucHJvdG8isw4KCEVudmVsb3BlEgsKA2NpZBgBIAEoCRIrCgdjaGFu",
            "bmVsGAIgASgLMhgubmFrYW1hLnJlYWx0aW1lLkNoYW5uZWxIABI0CgxjaGFu",
            "bmVsX2pvaW4YAyABKAsyHC5uYWthbWEucmVhbHRpbWUuQ2hhbm5lbEpvaW5I",
            "ABI2Cg1jaGFubmVsX2xlYXZlGAQgASgLMh0ubmFrYW1hLnJlYWx0aW1lLkNo",
            "YW5uZWxMZWF2ZUgAEjUKD2NoYW5uZWxfbWVzc2FnZRgFIAEoCzIaLm5ha2Ft",
            "YS5hcGkuQ2hhbm5lbE1lc3NhZ2VIABJBChNjaGFubmVsX21lc3NhZ2VfYWNr",
            "GAYgASgLMiIubmFrYW1hLnJlYWx0aW1lLkNoYW5uZWxNZXNzYWdlQWNrSAAS",
            "QwoUY2hhbm5lbF9tZXNzYWdlX3NlbmQYByABKAsyIy5uYWthbWEucmVhbHRp",
            "bWUuQ2hhbm5lbE1lc3NhZ2VTZW5kSAASRwoWY2hhbm5lbF9tZXNzYWdlX3Vw",
            "ZGF0ZRgIIAEoCzIlLm5ha2FtYS5yZWFsdGltZS5DaGFubmVsTWVzc2FnZVVw",
            "ZGF0ZUgAEkcKFmNoYW5uZWxfbWVzc2FnZV9yZW1vdmUYCSABKAsyJS5uYWth",
            "bWEucmVhbHRpbWUuQ2hhbm5lbE1lc3NhZ2VSZW1vdmVIABJHChZjaGFubmVs",
            "X3ByZXNlbmNlX2V2ZW50GAogASgLMiUubmFrYW1hLnJlYWx0aW1lLkNoYW5u",
            "ZWxQcmVzZW5jZUV2ZW50SAASJwoFZXJyb3IYCyABKAsyFi5uYWthbWEucmVh",
            "bHRpbWUuRXJyb3JIABInCgVtYXRjaBgMIAEoCzIWLm5ha2FtYS5yZWFsdGlt",
            "ZS5NYXRjaEgAEjQKDG1hdGNoX2NyZWF0ZRgNIAEoCzIcLm5ha2FtYS5yZWFs",
            "dGltZS5NYXRjaENyZWF0ZUgAEjAKCm1hdGNoX2RhdGEYDiABKAsyGi5uYWth",
            "bWEucmVhbHRpbWUuTWF0Y2hEYXRhSAASOQoPbWF0Y2hfZGF0YV9zZW5kGA8g",
            "ASgLMh4ubmFrYW1hLnJlYWx0aW1lLk1hdGNoRGF0YVNlbmRIABIwCgptYXRj",
            "aF9qb2luGBAgASgLMhoubmFrYW1hLnJlYWx0aW1lLk1hdGNoSm9pbkgAEjIK",
            "C21hdGNoX2xlYXZlGBEgASgLMhsubmFrYW1hLnJlYWx0aW1lLk1hdGNoTGVh",
            "dmVIABJDChRtYXRjaF9wcmVzZW5jZV9ldmVudBgSIAEoCzIjLm5ha2FtYS5y",
            "ZWFsdGltZS5NYXRjaFByZXNlbmNlRXZlbnRIABI4Cg5tYXRjaG1ha2VyX2Fk",
            "ZBgTIAEoCzIeLm5ha2FtYS5yZWFsdGltZS5NYXRjaG1ha2VyQWRkSAASQAoS",
            "bWF0Y2htYWtlcl9tYXRjaGVkGBQgASgLMiIubmFrYW1hLnJlYWx0aW1lLk1h",
            "dGNobWFrZXJNYXRjaGVkSAASPgoRbWF0Y2htYWtlcl9yZW1vdmUYFSABKAsy",
            "IS5uYWthbWEucmVhbHRpbWUuTWF0Y2htYWtlclJlbW92ZUgAEj4KEW1hdGNo",
            "bWFrZXJfdGlja2V0GBYgASgLMiEubmFrYW1hLnJlYWx0aW1lLk1hdGNobWFr",
            "ZXJUaWNrZXRIABI3Cg1ub3RpZmljYXRpb25zGBcgASgLMh4ubmFrYW1hLnJl",
            "YWx0aW1lLk5vdGlmaWNhdGlvbnNIABIeCgNycGMYGCABKAsyDy5uYWthbWEu",
            "YXBpLlJwY0gAEikKBnN0YXR1cxgZIAEoCzIXLm5ha2FtYS5yZWFsdGltZS5T",
            "dGF0dXNIABI2Cg1zdGF0dXNfZm9sbG93GBogASgLMh0ubmFrYW1hLnJlYWx0",
            "aW1lLlN0YXR1c0ZvbGxvd0gAEkUKFXN0YXR1c19wcmVzZW5jZV9ldmVudBgb",
            "IAEoCzIkLm5ha2FtYS5yZWFsdGltZS5TdGF0dXNQcmVzZW5jZUV2ZW50SAAS",
            "OgoPc3RhdHVzX3VuZm9sbG93GBwgASgLMh8ubmFrYW1hLnJlYWx0aW1lLlN0",
            "YXR1c1VuZm9sbG93SAASNgoNc3RhdHVzX3VwZGF0ZRgdIAEoCzIdLm5ha2Ft",
            "YS5yZWFsdGltZS5TdGF0dXNVcGRhdGVIABIyCgtzdHJlYW1fZGF0YRgeIAEo",
            "CzIbLm5ha2FtYS5yZWFsdGltZS5TdHJlYW1EYXRhSAASRQoVc3RyZWFtX3By",
            "ZXNlbmNlX2V2ZW50GB8gASgLMiQubmFrYW1hLnJlYWx0aW1lLlN0cmVhbVBy",
            "ZXNlbmNlRXZlbnRIABIlCgRwaW5nGCAgASgLMhUubmFrYW1hLnJlYWx0aW1l",
            "LlBpbmdIABIlCgRwb25nGCEgASgLMhUubmFrYW1hLnJlYWx0aW1lLlBvbmdI",
            "AEIJCgdtZXNzYWdlIsMBCgdDaGFubmVsEgoKAmlkGAEgASgJEjAKCXByZXNl",
            "bmNlcxgCIAMoCzIdLm5ha2FtYS5yZWFsdGltZS5Vc2VyUHJlc2VuY2USKwoE",
            "c2VsZhgDIAEoCzIdLm5ha2FtYS5yZWFsdGltZS5Vc2VyUHJlc2VuY2USEQoJ",
            "cm9vbV9uYW1lGAQgASgJEhAKCGdyb3VwX2lkGAUgASgJEhMKC3VzZXJfaWRf",
            "b25lGAYgASgJEhMKC3VzZXJfaWRfdHdvGAcgASgJIs8BCgtDaGFubmVsSm9p",
            "bhIOCgZ0YXJnZXQYASABKAkSDAoEdHlwZRgCIAEoBRIvCgtwZXJzaXN0ZW5j",
            "ZRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSKgoGaGlkZGVu",
            "GAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZSJFCgRUeXBlEhQK",
            "EFRZUEVfVU5TUEVDSUZJRUQQABIICgRST09NEAESEgoORElSRUNUX01FU1NB",
            "R0UQAhIJCgVHUk9VUBADIiIKDENoYW5uZWxMZWF2ZRISCgpjaGFubmVsX2lk",
            "GAEgASgJItkCChFDaGFubmVsTWVzc2FnZUFjaxISCgpjaGFubmVsX2lkGAEg",
            "ASgJEhIKCm1lc3NhZ2VfaWQYAiABKAkSKQoEY29kZRgDIAEoCzIbLmdvb2ds",
            "ZS5wcm90b2J1Zi5JbnQzMlZhbHVlEhAKCHVzZXJuYW1lGAQgASgJEi8KC2Ny",
            "ZWF0ZV90aW1lGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIv",
            "Cgt1cGRhdGVfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3Rh",
            "bXASLgoKcGVyc2lzdGVudBgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29s",
            "VmFsdWUSEQoJcm9vbV9uYW1lGAggASgJEhAKCGdyb3VwX2lkGAkgASgJEhMK",
            "C3VzZXJfaWRfb25lGAogASgJEhMKC3VzZXJfaWRfdHdvGAsgASgJIjkKEkNo",
            "YW5uZWxNZXNzYWdlU2VuZBISCgpjaGFubmVsX2lkGAEgASgJEg8KB2NvbnRl",
            "bnQYAiABKAkiTwoUQ2hhbm5lbE1lc3NhZ2VVcGRhdGUSEgoKY2hhbm5lbF9p",
            "ZBgBIAEoCRISCgptZXNzYWdlX2lkGAIgASgJEg8KB2NvbnRlbnQYAyABKAki",
            "PgoUQ2hhbm5lbE1lc3NhZ2VSZW1vdmUSEgoKY2hhbm5lbF9pZBgBIAEoCRIS",
            "CgptZXNzYWdlX2lkGAIgASgJItYBChRDaGFubmVsUHJlc2VuY2VFdmVudBIS",
            "CgpjaGFubmVsX2lkGAEgASgJEiwKBWpvaW5zGAIgAygLMh0ubmFrYW1hLnJl",
            "YWx0aW1lLlVzZXJQcmVzZW5jZRItCgZsZWF2ZXMYAyADKAsyHS5uYWthbWEu",
            "cmVhbHRpbWUuVXNlclByZXNlbmNlEhEKCXJvb21fbmFtZRgEIAEoCRIQCghn",
            "cm91cF9pZBgFIAEoCRITCgt1c2VyX2lkX29uZRgGIAEoCRITCgt1c2VyX2lk",
            "X3R3bxgHIAEoCSLYAgoFRXJyb3ISDAoEY29kZRgBIAEoBRIPCgdtZXNzYWdl",
            "GAIgASgJEjQKB2NvbnRleHQYAyADKAsyIy5uYWthbWEucmVhbHRpbWUuRXJy",
            "b3IuQ29udGV4dEVudHJ5Gi4KDENvbnRleHRFbnRyeRILCgNrZXkYASABKAkS",
            "DQoFdmFsdWUYAiABKAk6AjgBIskBCgRDb2RlEhUKEVJVTlRJTUVfRVhDRVBU",
            "SU9OEAASGAoUVU5SRUNPR05JWkVEX1BBWUxPQUQQARITCg9NSVNTSU5HX1BB",
            "WUxPQUQQAhINCglCQURfSU5QVVQQAxITCg9NQVRDSF9OT1RfRk9VTkQQBBIX",
            "ChNNQVRDSF9KT0lOX1JFSkVDVEVEEAUSHgoaUlVOVElNRV9GVU5DVElPTl9O",
            "T1RfRk9VTkQQBhIeChpSVU5USU1FX0ZVTkNUSU9OX0VYQ0VQVElPThAHIsoB",
            "CgVNYXRjaBIQCghtYXRjaF9pZBgBIAEoCRIVCg1hdXRob3JpdGF0aXZlGAIg",
            "ASgIEisKBWxhYmVsGAMgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1Zh",
            "bHVlEgwKBHNpemUYBCABKAUSMAoJcHJlc2VuY2VzGAUgAygLMh0ubmFrYW1h",
            "LnJlYWx0aW1lLlVzZXJQcmVzZW5jZRIrCgRzZWxmGAYgASgLMh0ubmFrYW1h",
            "LnJlYWx0aW1lLlVzZXJQcmVzZW5jZSINCgtNYXRjaENyZWF0ZSJ/CglNYXRj",
            "aERhdGESEAoIbWF0Y2hfaWQYASABKAkSLwoIcHJlc2VuY2UYAiABKAsyHS5u",
            "YWthbWEucmVhbHRpbWUuVXNlclByZXNlbmNlEg8KB29wX2NvZGUYAyABKAMS",
            "DAoEZGF0YRgEIAEoDBIQCghyZWxpYWJsZRgFIAEoCCKEAQoNTWF0Y2hEYXRh",
            "U2VuZBIQCghtYXRjaF9pZBgBIAEoCRIPCgdvcF9jb2RlGAIgASgDEgwKBGRh",
            "dGEYAyABKAwSMAoJcHJlc2VuY2VzGAQgAygLMh0ubmFrYW1hLnJlYWx0aW1l",
            "LlVzZXJQcmVzZW5jZRIQCghyZWxpYWJsZRgFIAEoCCKjAQoJTWF0Y2hKb2lu",
            "EhIKCG1hdGNoX2lkGAEgASgJSAASDwoFdG9rZW4YAiABKAlIABI6CghtZXRh",
            "ZGF0YRgDIAMoCzIoLm5ha2FtYS5yZWFsdGltZS5NYXRjaEpvaW4uTWV0YWRh",
            "dGFFbnRyeRovCg1NZXRhZGF0YUVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1",
            "ZRgCIAEoCToCOAFCBAoCaWQiHgoKTWF0Y2hMZWF2ZRIQCghtYXRjaF9pZBgB",
            "IAEoCSKDAQoSTWF0Y2hQcmVzZW5jZUV2ZW50EhAKCG1hdGNoX2lkGAEgASgJ",
            "EiwKBWpvaW5zGAIgAygLMh0ubmFrYW1hLnJlYWx0aW1lLlVzZXJQcmVzZW5j",
            "ZRItCgZsZWF2ZXMYAyADKAsyHS5uYWthbWEucmVhbHRpbWUuVXNlclByZXNl",
            "bmNlItsCCg1NYXRjaG1ha2VyQWRkEhEKCW1pbl9jb3VudBgBIAEoBRIRCglt",
            "YXhfY291bnQYAiABKAUSDQoFcXVlcnkYAyABKAkSTwoRc3RyaW5nX3Byb3Bl",
            "cnRpZXMYBCADKAsyNC5uYWthbWEucmVhbHRpbWUuTWF0Y2htYWtlckFkZC5T",
            "dHJpbmdQcm9wZXJ0aWVzRW50cnkSUQoSbnVtZXJpY19wcm9wZXJ0aWVzGAUg",
            "AygLMjUubmFrYW1hLnJlYWx0aW1lLk1hdGNobWFrZXJBZGQuTnVtZXJpY1By",
            "b3BlcnRpZXNFbnRyeRo3ChVTdHJpbmdQcm9wZXJ0aWVzRW50cnkSCwoDa2V5",
            "GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ARo4ChZOdW1lcmljUHJvcGVydGll",
            "c0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoAToCOAEi0gQKEU1h",
            "dGNobWFrZXJNYXRjaGVkEg4KBnRpY2tldBgBIAEoCRISCghtYXRjaF9pZBgC",
            "IAEoCUgAEg8KBXRva2VuGAMgASgJSAASQAoFdXNlcnMYBCADKAsyMS5uYWth",
            "bWEucmVhbHRpbWUuTWF0Y2htYWtlck1hdGNoZWQuTWF0Y2htYWtlclVzZXIS",
            "PwoEc2VsZhgFIAEoCzIxLm5ha2FtYS5yZWFsdGltZS5NYXRjaG1ha2VyTWF0",
            "Y2hlZC5NYXRjaG1ha2VyVXNlchr+AgoOTWF0Y2htYWtlclVzZXISLwoIcHJl",
            "c2VuY2UYASABKAsyHS5uYWthbWEucmVhbHRpbWUuVXNlclByZXNlbmNlEmIK",
            "EXN0cmluZ19wcm9wZXJ0aWVzGAUgAygLMkcubmFrYW1hLnJlYWx0aW1lLk1h",
            "dGNobWFrZXJNYXRjaGVkLk1hdGNobWFrZXJVc2VyLlN0cmluZ1Byb3BlcnRp",
            "ZXNFbnRyeRJkChJudW1lcmljX3Byb3BlcnRpZXMYBiADKAsySC5uYWthbWEu",
            "cmVhbHRpbWUuTWF0Y2htYWtlck1hdGNoZWQuTWF0Y2htYWtlclVzZXIuTnVt",
            "ZXJpY1Byb3BlcnRpZXNFbnRyeRo3ChVTdHJpbmdQcm9wZXJ0aWVzRW50cnkS",
            "CwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ARo4ChZOdW1lcmljUHJv",
            "cGVydGllc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoAToCOAFC",
            "BAoCaWQiIgoQTWF0Y2htYWtlclJlbW92ZRIOCgZ0aWNrZXQYASABKAkiIgoQ",
            "TWF0Y2htYWtlclRpY2tldBIOCgZ0aWNrZXQYASABKAkiQAoNTm90aWZpY2F0",
            "aW9ucxIvCg1ub3RpZmljYXRpb25zGAEgAygLMhgubmFrYW1hLmFwaS5Ob3Rp",
            "ZmljYXRpb24iBgoEUGluZyIGCgRQb25nIjoKBlN0YXR1cxIwCglwcmVzZW5j",
            "ZXMYASADKAsyHS5uYWthbWEucmVhbHRpbWUuVXNlclByZXNlbmNlIjMKDFN0",
            "YXR1c0ZvbGxvdxIQCgh1c2VyX2lkcxgBIAMoCRIRCgl1c2VybmFtZXMYAiAD",
            "KAkicgoTU3RhdHVzUHJlc2VuY2VFdmVudBIsCgVqb2lucxgCIAMoCzIdLm5h",
            "a2FtYS5yZWFsdGltZS5Vc2VyUHJlc2VuY2USLQoGbGVhdmVzGAMgAygLMh0u",
            "bmFrYW1hLnJlYWx0aW1lLlVzZXJQcmVzZW5jZSIiCg5TdGF0dXNVbmZvbGxv",
            "dxIQCgh1c2VyX2lkcxgBIAMoCSI8CgxTdGF0dXNVcGRhdGUSLAoGc3RhdHVz",
            "GAEgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlIkoKBlN0cmVh",
            "bRIMCgRtb2RlGAEgASgFEg8KB3N1YmplY3QYAiABKAkSEgoKc3ViY29udGV4",
            "dBgDIAEoCRINCgVsYWJlbBgEIAEoCSKEAQoKU3RyZWFtRGF0YRInCgZzdHJl",
            "YW0YASABKAsyFy5uYWthbWEucmVhbHRpbWUuU3RyZWFtEi0KBnNlbmRlchgC",
            "IAEoCzIdLm5ha2FtYS5yZWFsdGltZS5Vc2VyUHJlc2VuY2USDAoEZGF0YRgD",
            "IAEoCRIQCghyZWxpYWJsZRgEIAEoCCKbAQoTU3RyZWFtUHJlc2VuY2VFdmVu",
            "dBInCgZzdHJlYW0YASABKAsyFy5uYWthbWEucmVhbHRpbWUuU3RyZWFtEiwK",
            "BWpvaW5zGAIgAygLMh0ubmFrYW1hLnJlYWx0aW1lLlVzZXJQcmVzZW5jZRIt",
            "CgZsZWF2ZXMYAyADKAsyHS5uYWthbWEucmVhbHRpbWUuVXNlclByZXNlbmNl",
            "IogBCgxVc2VyUHJlc2VuY2USDwoHdXNlcl9pZBgBIAEoCRISCgpzZXNzaW9u",
            "X2lkGAIgASgJEhAKCHVzZXJuYW1lGAMgASgJEhMKC3BlcnNpc3RlbmNlGAQg",
            "ASgIEiwKBnN0YXR1cxgFIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdW",
            "YWx1ZUJGChtjb20uaGVyb2ljbGFicy5uYWthbWEucnRhcGlCDk5ha2FtYVJl",
            "YWx0aW1lUAFaBXJ0YXBpogIETktQQqoCBk5ha2FtYWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Nakama.ApiReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Envelope), global::Nakama.Envelope.Parser, new[]{ "Cid", "Channel", "ChannelJoin", "ChannelLeave", "ChannelMessage", "ChannelMessageAck", "ChannelMessageSend", "ChannelMessageUpdate", "ChannelMessageRemove", "ChannelPresenceEvent", "Error", "Match", "MatchCreate", "MatchData", "MatchDataSend", "MatchJoin", "MatchLeave", "MatchPresenceEvent", "MatchmakerAdd", "MatchmakerMatched", "MatchmakerRemove", "MatchmakerTicket", "Notifications", "Rpc", "Status", "StatusFollow", "StatusPresenceEvent", "StatusUnfollow", "StatusUpdate", "StreamData", "StreamPresenceEvent", "Ping", "Pong" }, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Channel), global::Nakama.Channel.Parser, new[]{ "Id", "Presences", "Self", "RoomName", "GroupId", "UserIdOne", "UserIdTwo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ChannelJoin), global::Nakama.ChannelJoin.Parser, new[]{ "Target", "Type", "Persistence", "Hidden" }, null, new[]{ typeof(global::Nakama.ChannelJoin.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ChannelLeave), global::Nakama.ChannelLeave.Parser, new[]{ "ChannelId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ChannelMessageAck), global::Nakama.ChannelMessageAck.Parser, new[]{ "ChannelId", "MessageId", "Code", "Username", "CreateTime", "UpdateTime", "Persistent", "RoomName", "GroupId", "UserIdOne", "UserIdTwo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ChannelMessageSend), global::Nakama.ChannelMessageSend.Parser, new[]{ "ChannelId", "Content" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ChannelMessageUpdate), global::Nakama.ChannelMessageUpdate.Parser, new[]{ "ChannelId", "MessageId", "Content" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ChannelMessageRemove), global::Nakama.ChannelMessageRemove.Parser, new[]{ "ChannelId", "MessageId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.ChannelPresenceEvent), global::Nakama.ChannelPresenceEvent.Parser, new[]{ "ChannelId", "Joins", "Leaves", "RoomName", "GroupId", "UserIdOne", "UserIdTwo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Error), global::Nakama.Error.Parser, new[]{ "Code", "Message", "Context" }, null, new[]{ typeof(global::Nakama.Error.Types.Code) }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Match), global::Nakama.Match.Parser, new[]{ "MatchId", "Authoritative", "Label", "Size", "Presences", "Self" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchCreate), global::Nakama.MatchCreate.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchData), global::Nakama.MatchData.Parser, new[]{ "MatchId", "Presence", "OpCode", "Data", "Reliable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchDataSend), global::Nakama.MatchDataSend.Parser, new[]{ "MatchId", "OpCode", "Data", "Presences", "Reliable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchJoin), global::Nakama.MatchJoin.Parser, new[]{ "MatchId", "Token", "Metadata" }, new[]{ "Id" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchLeave), global::Nakama.MatchLeave.Parser, new[]{ "MatchId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchPresenceEvent), global::Nakama.MatchPresenceEvent.Parser, new[]{ "MatchId", "Joins", "Leaves" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchmakerAdd), global::Nakama.MatchmakerAdd.Parser, new[]{ "MinCount", "MaxCount", "Query", "StringProperties", "NumericProperties" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchmakerMatched), global::Nakama.MatchmakerMatched.Parser, new[]{ "Ticket", "MatchId", "Token", "Users", "Self" }, new[]{ "Id" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchmakerMatched.Types.MatchmakerUser), global::Nakama.MatchmakerMatched.Types.MatchmakerUser.Parser, new[]{ "Presence", "StringProperties", "NumericProperties" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchmakerRemove), global::Nakama.MatchmakerRemove.Parser, new[]{ "Ticket" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.MatchmakerTicket), global::Nakama.MatchmakerTicket.Parser, new[]{ "Ticket" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Notifications), global::Nakama.Notifications.Parser, new[]{ "Notifications_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Ping), global::Nakama.Ping.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Pong), global::Nakama.Pong.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Status), global::Nakama.Status.Parser, new[]{ "Presences" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.StatusFollow), global::Nakama.StatusFollow.Parser, new[]{ "UserIds", "Usernames" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.StatusPresenceEvent), global::Nakama.StatusPresenceEvent.Parser, new[]{ "Joins", "Leaves" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.StatusUnfollow), global::Nakama.StatusUnfollow.Parser, new[]{ "UserIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.StatusUpdate), global::Nakama.StatusUpdate.Parser, new[]{ "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.Stream), global::Nakama.Stream.Parser, new[]{ "Mode", "Subject", "Subcontext", "Label" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.StreamData), global::Nakama.StreamData.Parser, new[]{ "Stream", "Sender", "Data", "Reliable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.StreamPresenceEvent), global::Nakama.StreamPresenceEvent.Parser, new[]{ "Stream", "Joins", "Leaves" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nakama.UserPresence), global::Nakama.UserPresence.Parser, new[]{ "UserId", "SessionId", "Username", "Persistence", "Status" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// An envelope for a realtime message.
  /// </summary>
  public sealed partial class Envelope : pb::IMessage<Envelope>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Envelope> _parser = new pb::MessageParser<Envelope>(() => new Envelope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Envelope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope(Envelope other) : this() {
      cid_ = other.cid_;
      switch (other.MessageCase) {
        case MessageOneofCase.Channel:
          Channel = other.Channel.Clone();
          break;
        case MessageOneofCase.ChannelJoin:
          ChannelJoin = other.ChannelJoin.Clone();
          break;
        case MessageOneofCase.ChannelLeave:
          ChannelLeave = other.ChannelLeave.Clone();
          break;
        case MessageOneofCase.ChannelMessage:
          ChannelMessage = other.ChannelMessage.Clone();
          break;
        case MessageOneofCase.ChannelMessageAck:
          ChannelMessageAck = other.ChannelMessageAck.Clone();
          break;
        case MessageOneofCase.ChannelMessageSend:
          ChannelMessageSend = other.ChannelMessageSend.Clone();
          break;
        case MessageOneofCase.ChannelMessageUpdate:
          ChannelMessageUpdate = other.ChannelMessageUpdate.Clone();
          break;
        case MessageOneofCase.ChannelMessageRemove:
          ChannelMessageRemove = other.ChannelMessageRemove.Clone();
          break;
        case MessageOneofCase.ChannelPresenceEvent:
          ChannelPresenceEvent = other.ChannelPresenceEvent.Clone();
          break;
        case MessageOneofCase.Error:
          Error = other.Error.Clone();
          break;
        case MessageOneofCase.Match:
          Match = other.Match.Clone();
          break;
        case MessageOneofCase.MatchCreate:
          MatchCreate = other.MatchCreate.Clone();
          break;
        case MessageOneofCase.MatchData:
          MatchData = other.MatchData.Clone();
          break;
        case MessageOneofCase.MatchDataSend:
          MatchDataSend = other.MatchDataSend.Clone();
          break;
        case MessageOneofCase.MatchJoin:
          MatchJoin = other.MatchJoin.Clone();
          break;
        case MessageOneofCase.MatchLeave:
          MatchLeave = other.MatchLeave.Clone();
          break;
        case MessageOneofCase.MatchPresenceEvent:
          MatchPresenceEvent = other.MatchPresenceEvent.Clone();
          break;
        case MessageOneofCase.MatchmakerAdd:
          MatchmakerAdd = other.MatchmakerAdd.Clone();
          break;
        case MessageOneofCase.MatchmakerMatched:
          MatchmakerMatched = other.MatchmakerMatched.Clone();
          break;
        case MessageOneofCase.MatchmakerRemove:
          MatchmakerRemove = other.MatchmakerRemove.Clone();
          break;
        case MessageOneofCase.MatchmakerTicket:
          MatchmakerTicket = other.MatchmakerTicket.Clone();
          break;
        case MessageOneofCase.Notifications:
          Notifications = other.Notifications.Clone();
          break;
        case MessageOneofCase.Rpc:
          Rpc = other.Rpc.Clone();
          break;
        case MessageOneofCase.Status:
          Status = other.Status.Clone();
          break;
        case MessageOneofCase.StatusFollow:
          StatusFollow = other.StatusFollow.Clone();
          break;
        case MessageOneofCase.StatusPresenceEvent:
          StatusPresenceEvent = other.StatusPresenceEvent.Clone();
          break;
        case MessageOneofCase.StatusUnfollow:
          StatusUnfollow = other.StatusUnfollow.Clone();
          break;
        case MessageOneofCase.StatusUpdate:
          StatusUpdate = other.StatusUpdate.Clone();
          break;
        case MessageOneofCase.StreamData:
          StreamData = other.StreamData.Clone();
          break;
        case MessageOneofCase.StreamPresenceEvent:
          StreamPresenceEvent = other.StreamPresenceEvent.Clone();
          break;
        case MessageOneofCase.Ping:
          Ping = other.Ping.Clone();
          break;
        case MessageOneofCase.Pong:
          Pong = other.Pong.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Envelope Clone() {
      return new Envelope(this);
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 1;
    private string cid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cid {
      get { return cid_; }
      set {
        cid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    /// <summary>
    /// A response from a channel join operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Channel Channel {
      get { return messageCase_ == MessageOneofCase.Channel ? (global::Nakama.Channel) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Channel;
      }
    }

    /// <summary>Field number for the "channel_join" field.</summary>
    public const int ChannelJoinFieldNumber = 3;
    /// <summary>
    /// Join a realtime chat channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.ChannelJoin ChannelJoin {
      get { return messageCase_ == MessageOneofCase.ChannelJoin ? (global::Nakama.ChannelJoin) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ChannelJoin;
      }
    }

    /// <summary>Field number for the "channel_leave" field.</summary>
    public const int ChannelLeaveFieldNumber = 4;
    /// <summary>
    /// Leave a realtime chat channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.ChannelLeave ChannelLeave {
      get { return messageCase_ == MessageOneofCase.ChannelLeave ? (global::Nakama.ChannelLeave) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ChannelLeave;
      }
    }

    /// <summary>Field number for the "channel_message" field.</summary>
    public const int ChannelMessageFieldNumber = 5;
    /// <summary>
    /// An incoming message on a realtime chat channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.ChannelMessage ChannelMessage {
      get { return messageCase_ == MessageOneofCase.ChannelMessage ? (global::Nakama.ChannelMessage) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ChannelMessage;
      }
    }

    /// <summary>Field number for the "channel_message_ack" field.</summary>
    public const int ChannelMessageAckFieldNumber = 6;
    /// <summary>
    /// An acknowledgement received in response to sending a message on a chat channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.ChannelMessageAck ChannelMessageAck {
      get { return messageCase_ == MessageOneofCase.ChannelMessageAck ? (global::Nakama.ChannelMessageAck) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ChannelMessageAck;
      }
    }

    /// <summary>Field number for the "channel_message_send" field.</summary>
    public const int ChannelMessageSendFieldNumber = 7;
    /// <summary>
    /// Send a message to a realtime chat channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.ChannelMessageSend ChannelMessageSend {
      get { return messageCase_ == MessageOneofCase.ChannelMessageSend ? (global::Nakama.ChannelMessageSend) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ChannelMessageSend;
      }
    }

    /// <summary>Field number for the "channel_message_update" field.</summary>
    public const int ChannelMessageUpdateFieldNumber = 8;
    /// <summary>
    /// Update a message previously sent to a realtime chat channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.ChannelMessageUpdate ChannelMessageUpdate {
      get { return messageCase_ == MessageOneofCase.ChannelMessageUpdate ? (global::Nakama.ChannelMessageUpdate) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ChannelMessageUpdate;
      }
    }

    /// <summary>Field number for the "channel_message_remove" field.</summary>
    public const int ChannelMessageRemoveFieldNumber = 9;
    /// <summary>
    /// Remove a message previously sent to a realtime chat channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.ChannelMessageRemove ChannelMessageRemove {
      get { return messageCase_ == MessageOneofCase.ChannelMessageRemove ? (global::Nakama.ChannelMessageRemove) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ChannelMessageRemove;
      }
    }

    /// <summary>Field number for the "channel_presence_event" field.</summary>
    public const int ChannelPresenceEventFieldNumber = 10;
    /// <summary>
    /// Presence update for a particular realtime chat channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.ChannelPresenceEvent ChannelPresenceEvent {
      get { return messageCase_ == MessageOneofCase.ChannelPresenceEvent ? (global::Nakama.ChannelPresenceEvent) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ChannelPresenceEvent;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 11;
    /// <summary>
    /// Describes an error which occurred on the server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Error Error {
      get { return messageCase_ == MessageOneofCase.Error ? (global::Nakama.Error) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Error;
      }
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 12;
    /// <summary>
    /// Incoming information about a realtime match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Match Match {
      get { return messageCase_ == MessageOneofCase.Match ? (global::Nakama.Match) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Match;
      }
    }

    /// <summary>Field number for the "match_create" field.</summary>
    public const int MatchCreateFieldNumber = 13;
    /// <summary>
    /// A client to server request to create a realtime match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.MatchCreate MatchCreate {
      get { return messageCase_ == MessageOneofCase.MatchCreate ? (global::Nakama.MatchCreate) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchCreate;
      }
    }

    /// <summary>Field number for the "match_data" field.</summary>
    public const int MatchDataFieldNumber = 14;
    /// <summary>
    /// Incoming realtime match data delivered from the server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.MatchData MatchData {
      get { return messageCase_ == MessageOneofCase.MatchData ? (global::Nakama.MatchData) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchData;
      }
    }

    /// <summary>Field number for the "match_data_send" field.</summary>
    public const int MatchDataSendFieldNumber = 15;
    /// <summary>
    /// A client to server request to send data to a realtime match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.MatchDataSend MatchDataSend {
      get { return messageCase_ == MessageOneofCase.MatchDataSend ? (global::Nakama.MatchDataSend) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchDataSend;
      }
    }

    /// <summary>Field number for the "match_join" field.</summary>
    public const int MatchJoinFieldNumber = 16;
    /// <summary>
    /// A client to server request to join a realtime match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.MatchJoin MatchJoin {
      get { return messageCase_ == MessageOneofCase.MatchJoin ? (global::Nakama.MatchJoin) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchJoin;
      }
    }

    /// <summary>Field number for the "match_leave" field.</summary>
    public const int MatchLeaveFieldNumber = 17;
    /// <summary>
    /// A client to server request to leave a realtime match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.MatchLeave MatchLeave {
      get { return messageCase_ == MessageOneofCase.MatchLeave ? (global::Nakama.MatchLeave) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchLeave;
      }
    }

    /// <summary>Field number for the "match_presence_event" field.</summary>
    public const int MatchPresenceEventFieldNumber = 18;
    /// <summary>
    /// Presence update for a particular realtime match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.MatchPresenceEvent MatchPresenceEvent {
      get { return messageCase_ == MessageOneofCase.MatchPresenceEvent ? (global::Nakama.MatchPresenceEvent) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchPresenceEvent;
      }
    }

    /// <summary>Field number for the "matchmaker_add" field.</summary>
    public const int MatchmakerAddFieldNumber = 19;
    /// <summary>
    /// Submit a new matchmaking process request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.MatchmakerAdd MatchmakerAdd {
      get { return messageCase_ == MessageOneofCase.MatchmakerAdd ? (global::Nakama.MatchmakerAdd) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchmakerAdd;
      }
    }

    /// <summary>Field number for the "matchmaker_matched" field.</summary>
    public const int MatchmakerMatchedFieldNumber = 20;
    /// <summary>
    /// A successful matchmaking result.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.MatchmakerMatched MatchmakerMatched {
      get { return messageCase_ == MessageOneofCase.MatchmakerMatched ? (global::Nakama.MatchmakerMatched) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchmakerMatched;
      }
    }

    /// <summary>Field number for the "matchmaker_remove" field.</summary>
    public const int MatchmakerRemoveFieldNumber = 21;
    /// <summary>
    /// Cancel a matchmaking process using a ticket.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.MatchmakerRemove MatchmakerRemove {
      get { return messageCase_ == MessageOneofCase.MatchmakerRemove ? (global::Nakama.MatchmakerRemove) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchmakerRemove;
      }
    }

    /// <summary>Field number for the "matchmaker_ticket" field.</summary>
    public const int MatchmakerTicketFieldNumber = 22;
    /// <summary>
    /// A response from starting a new matchmaking process.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.MatchmakerTicket MatchmakerTicket {
      get { return messageCase_ == MessageOneofCase.MatchmakerTicket ? (global::Nakama.MatchmakerTicket) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MatchmakerTicket;
      }
    }

    /// <summary>Field number for the "notifications" field.</summary>
    public const int NotificationsFieldNumber = 23;
    /// <summary>
    /// Notifications send by the server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Notifications Notifications {
      get { return messageCase_ == MessageOneofCase.Notifications ? (global::Nakama.Notifications) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Notifications;
      }
    }

    /// <summary>Field number for the "rpc" field.</summary>
    public const int RpcFieldNumber = 24;
    /// <summary>
    /// RPC call or response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Rpc Rpc {
      get { return messageCase_ == MessageOneofCase.Rpc ? (global::Nakama.Rpc) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Rpc;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 25;
    /// <summary>
    /// An incoming status snapshot for some set of users.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Status Status {
      get { return messageCase_ == MessageOneofCase.Status ? (global::Nakama.Status) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Status;
      }
    }

    /// <summary>Field number for the "status_follow" field.</summary>
    public const int StatusFollowFieldNumber = 26;
    /// <summary>
    /// Start following some set of users to receive their status updates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.StatusFollow StatusFollow {
      get { return messageCase_ == MessageOneofCase.StatusFollow ? (global::Nakama.StatusFollow) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.StatusFollow;
      }
    }

    /// <summary>Field number for the "status_presence_event" field.</summary>
    public const int StatusPresenceEventFieldNumber = 27;
    /// <summary>
    /// An incoming status update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.StatusPresenceEvent StatusPresenceEvent {
      get { return messageCase_ == MessageOneofCase.StatusPresenceEvent ? (global::Nakama.StatusPresenceEvent) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.StatusPresenceEvent;
      }
    }

    /// <summary>Field number for the "status_unfollow" field.</summary>
    public const int StatusUnfollowFieldNumber = 28;
    /// <summary>
    /// Stop following some set of users to no longer receive their status updates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.StatusUnfollow StatusUnfollow {
      get { return messageCase_ == MessageOneofCase.StatusUnfollow ? (global::Nakama.StatusUnfollow) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.StatusUnfollow;
      }
    }

    /// <summary>Field number for the "status_update" field.</summary>
    public const int StatusUpdateFieldNumber = 29;
    /// <summary>
    /// Set the user's own status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.StatusUpdate StatusUpdate {
      get { return messageCase_ == MessageOneofCase.StatusUpdate ? (global::Nakama.StatusUpdate) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.StatusUpdate;
      }
    }

    /// <summary>Field number for the "stream_data" field.</summary>
    public const int StreamDataFieldNumber = 30;
    /// <summary>
    /// A data message delivered over a stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.StreamData StreamData {
      get { return messageCase_ == MessageOneofCase.StreamData ? (global::Nakama.StreamData) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.StreamData;
      }
    }

    /// <summary>Field number for the "stream_presence_event" field.</summary>
    public const int StreamPresenceEventFieldNumber = 31;
    /// <summary>
    /// Presence update for a particular stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.StreamPresenceEvent StreamPresenceEvent {
      get { return messageCase_ == MessageOneofCase.StreamPresenceEvent ? (global::Nakama.StreamPresenceEvent) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.StreamPresenceEvent;
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 32;
    /// <summary>
    /// Application-level heartbeat and connection check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Ping Ping {
      get { return messageCase_ == MessageOneofCase.Ping ? (global::Nakama.Ping) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Ping;
      }
    }

    /// <summary>Field number for the "pong" field.</summary>
    public const int PongFieldNumber = 33;
    /// <summary>
    /// Application-level heartbeat and connection check response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Pong Pong {
      get { return messageCase_ == MessageOneofCase.Pong ? (global::Nakama.Pong) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Pong;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      Channel = 2,
      ChannelJoin = 3,
      ChannelLeave = 4,
      ChannelMessage = 5,
      ChannelMessageAck = 6,
      ChannelMessageSend = 7,
      ChannelMessageUpdate = 8,
      ChannelMessageRemove = 9,
      ChannelPresenceEvent = 10,
      Error = 11,
      Match = 12,
      MatchCreate = 13,
      MatchData = 14,
      MatchDataSend = 15,
      MatchJoin = 16,
      MatchLeave = 17,
      MatchPresenceEvent = 18,
      MatchmakerAdd = 19,
      MatchmakerMatched = 20,
      MatchmakerRemove = 21,
      MatchmakerTicket = 22,
      Notifications = 23,
      Rpc = 24,
      Status = 25,
      StatusFollow = 26,
      StatusPresenceEvent = 27,
      StatusUnfollow = 28,
      StatusUpdate = 29,
      StreamData = 30,
      StreamPresenceEvent = 31,
      Ping = 32,
      Pong = 33,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Envelope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Envelope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cid != other.Cid) return false;
      if (!object.Equals(Channel, other.Channel)) return false;
      if (!object.Equals(ChannelJoin, other.ChannelJoin)) return false;
      if (!object.Equals(ChannelLeave, other.ChannelLeave)) return false;
      if (!object.Equals(ChannelMessage, other.ChannelMessage)) return false;
      if (!object.Equals(ChannelMessageAck, other.ChannelMessageAck)) return false;
      if (!object.Equals(ChannelMessageSend, other.ChannelMessageSend)) return false;
      if (!object.Equals(ChannelMessageUpdate, other.ChannelMessageUpdate)) return false;
      if (!object.Equals(ChannelMessageRemove, other.ChannelMessageRemove)) return false;
      if (!object.Equals(ChannelPresenceEvent, other.ChannelPresenceEvent)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (!object.Equals(Match, other.Match)) return false;
      if (!object.Equals(MatchCreate, other.MatchCreate)) return false;
      if (!object.Equals(MatchData, other.MatchData)) return false;
      if (!object.Equals(MatchDataSend, other.MatchDataSend)) return false;
      if (!object.Equals(MatchJoin, other.MatchJoin)) return false;
      if (!object.Equals(MatchLeave, other.MatchLeave)) return false;
      if (!object.Equals(MatchPresenceEvent, other.MatchPresenceEvent)) return false;
      if (!object.Equals(MatchmakerAdd, other.MatchmakerAdd)) return false;
      if (!object.Equals(MatchmakerMatched, other.MatchmakerMatched)) return false;
      if (!object.Equals(MatchmakerRemove, other.MatchmakerRemove)) return false;
      if (!object.Equals(MatchmakerTicket, other.MatchmakerTicket)) return false;
      if (!object.Equals(Notifications, other.Notifications)) return false;
      if (!object.Equals(Rpc, other.Rpc)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(StatusFollow, other.StatusFollow)) return false;
      if (!object.Equals(StatusPresenceEvent, other.StatusPresenceEvent)) return false;
      if (!object.Equals(StatusUnfollow, other.StatusUnfollow)) return false;
      if (!object.Equals(StatusUpdate, other.StatusUpdate)) return false;
      if (!object.Equals(StreamData, other.StreamData)) return false;
      if (!object.Equals(StreamPresenceEvent, other.StreamPresenceEvent)) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (!object.Equals(Pong, other.Pong)) return false;
      if (MessageCase != other.MessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cid.Length != 0) hash ^= Cid.GetHashCode();
      if (messageCase_ == MessageOneofCase.Channel) hash ^= Channel.GetHashCode();
      if (messageCase_ == MessageOneofCase.ChannelJoin) hash ^= ChannelJoin.GetHashCode();
      if (messageCase_ == MessageOneofCase.ChannelLeave) hash ^= ChannelLeave.GetHashCode();
      if (messageCase_ == MessageOneofCase.ChannelMessage) hash ^= ChannelMessage.GetHashCode();
      if (messageCase_ == MessageOneofCase.ChannelMessageAck) hash ^= ChannelMessageAck.GetHashCode();
      if (messageCase_ == MessageOneofCase.ChannelMessageSend) hash ^= ChannelMessageSend.GetHashCode();
      if (messageCase_ == MessageOneofCase.ChannelMessageUpdate) hash ^= ChannelMessageUpdate.GetHashCode();
      if (messageCase_ == MessageOneofCase.ChannelMessageRemove) hash ^= ChannelMessageRemove.GetHashCode();
      if (messageCase_ == MessageOneofCase.ChannelPresenceEvent) hash ^= ChannelPresenceEvent.GetHashCode();
      if (messageCase_ == MessageOneofCase.Error) hash ^= Error.GetHashCode();
      if (messageCase_ == MessageOneofCase.Match) hash ^= Match.GetHashCode();
      if (messageCase_ == MessageOneofCase.MatchCreate) hash ^= MatchCreate.GetHashCode();
      if (messageCase_ == MessageOneofCase.MatchData) hash ^= MatchData.GetHashCode();
      if (messageCase_ == MessageOneofCase.MatchDataSend) hash ^= MatchDataSend.GetHashCode();
      if (messageCase_ == MessageOneofCase.MatchJoin) hash ^= MatchJoin.GetHashCode();
      if (messageCase_ == MessageOneofCase.MatchLeave) hash ^= MatchLeave.GetHashCode();
      if (messageCase_ == MessageOneofCase.MatchPresenceEvent) hash ^= MatchPresenceEvent.GetHashCode();
      if (messageCase_ == MessageOneofCase.MatchmakerAdd) hash ^= MatchmakerAdd.GetHashCode();
      if (messageCase_ == MessageOneofCase.MatchmakerMatched) hash ^= MatchmakerMatched.GetHashCode();
      if (messageCase_ == MessageOneofCase.MatchmakerRemove) hash ^= MatchmakerRemove.GetHashCode();
      if (messageCase_ == MessageOneofCase.MatchmakerTicket) hash ^= MatchmakerTicket.GetHashCode();
      if (messageCase_ == MessageOneofCase.Notifications) hash ^= Notifications.GetHashCode();
      if (messageCase_ == MessageOneofCase.Rpc) hash ^= Rpc.GetHashCode();
      if (messageCase_ == MessageOneofCase.Status) hash ^= Status.GetHashCode();
      if (messageCase_ == MessageOneofCase.StatusFollow) hash ^= StatusFollow.GetHashCode();
      if (messageCase_ == MessageOneofCase.StatusPresenceEvent) hash ^= StatusPresenceEvent.GetHashCode();
      if (messageCase_ == MessageOneofCase.StatusUnfollow) hash ^= StatusUnfollow.GetHashCode();
      if (messageCase_ == MessageOneofCase.StatusUpdate) hash ^= StatusUpdate.GetHashCode();
      if (messageCase_ == MessageOneofCase.StreamData) hash ^= StreamData.GetHashCode();
      if (messageCase_ == MessageOneofCase.StreamPresenceEvent) hash ^= StreamPresenceEvent.GetHashCode();
      if (messageCase_ == MessageOneofCase.Ping) hash ^= Ping.GetHashCode();
      if (messageCase_ == MessageOneofCase.Pong) hash ^= Pong.GetHashCode();
      hash ^= (int) messageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Cid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Cid);
      }
      if (messageCase_ == MessageOneofCase.Channel) {
        output.WriteRawTag(18);
        output.WriteMessage(Channel);
      }
      if (messageCase_ == MessageOneofCase.ChannelJoin) {
        output.WriteRawTag(26);
        output.WriteMessage(ChannelJoin);
      }
      if (messageCase_ == MessageOneofCase.ChannelLeave) {
        output.WriteRawTag(34);
        output.WriteMessage(ChannelLeave);
      }
      if (messageCase_ == MessageOneofCase.ChannelMessage) {
        output.WriteRawTag(42);
        output.WriteMessage(ChannelMessage);
      }
      if (messageCase_ == MessageOneofCase.ChannelMessageAck) {
        output.WriteRawTag(50);
        output.WriteMessage(ChannelMessageAck);
      }
      if (messageCase_ == MessageOneofCase.ChannelMessageSend) {
        output.WriteRawTag(58);
        output.WriteMessage(ChannelMessageSend);
      }
      if (messageCase_ == MessageOneofCase.ChannelMessageUpdate) {
        output.WriteRawTag(66);
        output.WriteMessage(ChannelMessageUpdate);
      }
      if (messageCase_ == MessageOneofCase.ChannelMessageRemove) {
        output.WriteRawTag(74);
        output.WriteMessage(ChannelMessageRemove);
      }
      if (messageCase_ == MessageOneofCase.ChannelPresenceEvent) {
        output.WriteRawTag(82);
        output.WriteMessage(ChannelPresenceEvent);
      }
      if (messageCase_ == MessageOneofCase.Error) {
        output.WriteRawTag(90);
        output.WriteMessage(Error);
      }
      if (messageCase_ == MessageOneofCase.Match) {
        output.WriteRawTag(98);
        output.WriteMessage(Match);
      }
      if (messageCase_ == MessageOneofCase.MatchCreate) {
        output.WriteRawTag(106);
        output.WriteMessage(MatchCreate);
      }
      if (messageCase_ == MessageOneofCase.MatchData) {
        output.WriteRawTag(114);
        output.WriteMessage(MatchData);
      }
      if (messageCase_ == MessageOneofCase.MatchDataSend) {
        output.WriteRawTag(122);
        output.WriteMessage(MatchDataSend);
      }
      if (messageCase_ == MessageOneofCase.MatchJoin) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(MatchJoin);
      }
      if (messageCase_ == MessageOneofCase.MatchLeave) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(MatchLeave);
      }
      if (messageCase_ == MessageOneofCase.MatchPresenceEvent) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(MatchPresenceEvent);
      }
      if (messageCase_ == MessageOneofCase.MatchmakerAdd) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(MatchmakerAdd);
      }
      if (messageCase_ == MessageOneofCase.MatchmakerMatched) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(MatchmakerMatched);
      }
      if (messageCase_ == MessageOneofCase.MatchmakerRemove) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(MatchmakerRemove);
      }
      if (messageCase_ == MessageOneofCase.MatchmakerTicket) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(MatchmakerTicket);
      }
      if (messageCase_ == MessageOneofCase.Notifications) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Notifications);
      }
      if (messageCase_ == MessageOneofCase.Rpc) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(Rpc);
      }
      if (messageCase_ == MessageOneofCase.Status) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Status);
      }
      if (messageCase_ == MessageOneofCase.StatusFollow) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(StatusFollow);
      }
      if (messageCase_ == MessageOneofCase.StatusPresenceEvent) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(StatusPresenceEvent);
      }
      if (messageCase_ == MessageOneofCase.StatusUnfollow) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(StatusUnfollow);
      }
      if (messageCase_ == MessageOneofCase.StatusUpdate) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(StatusUpdate);
      }
      if (messageCase_ == MessageOneofCase.StreamData) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(StreamData);
      }
      if (messageCase_ == MessageOneofCase.StreamPresenceEvent) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(StreamPresenceEvent);
      }
      if (messageCase_ == MessageOneofCase.Ping) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(Ping);
      }
      if (messageCase_ == MessageOneofCase.Pong) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(Pong);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Cid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Cid);
      }
      if (messageCase_ == MessageOneofCase.Channel) {
        output.WriteRawTag(18);
        output.WriteMessage(Channel);
      }
      if (messageCase_ == MessageOneofCase.ChannelJoin) {
        output.WriteRawTag(26);
        output.WriteMessage(ChannelJoin);
      }
      if (messageCase_ == MessageOneofCase.ChannelLeave) {
        output.WriteRawTag(34);
        output.WriteMessage(ChannelLeave);
      }
      if (messageCase_ == MessageOneofCase.ChannelMessage) {
        output.WriteRawTag(42);
        output.WriteMessage(ChannelMessage);
      }
      if (messageCase_ == MessageOneofCase.ChannelMessageAck) {
        output.WriteRawTag(50);
        output.WriteMessage(ChannelMessageAck);
      }
      if (messageCase_ == MessageOneofCase.ChannelMessageSend) {
        output.WriteRawTag(58);
        output.WriteMessage(ChannelMessageSend);
      }
      if (messageCase_ == MessageOneofCase.ChannelMessageUpdate) {
        output.WriteRawTag(66);
        output.WriteMessage(ChannelMessageUpdate);
      }
      if (messageCase_ == MessageOneofCase.ChannelMessageRemove) {
        output.WriteRawTag(74);
        output.WriteMessage(ChannelMessageRemove);
      }
      if (messageCase_ == MessageOneofCase.ChannelPresenceEvent) {
        output.WriteRawTag(82);
        output.WriteMessage(ChannelPresenceEvent);
      }
      if (messageCase_ == MessageOneofCase.Error) {
        output.WriteRawTag(90);
        output.WriteMessage(Error);
      }
      if (messageCase_ == MessageOneofCase.Match) {
        output.WriteRawTag(98);
        output.WriteMessage(Match);
      }
      if (messageCase_ == MessageOneofCase.MatchCreate) {
        output.WriteRawTag(106);
        output.WriteMessage(MatchCreate);
      }
      if (messageCase_ == MessageOneofCase.MatchData) {
        output.WriteRawTag(114);
        output.WriteMessage(MatchData);
      }
      if (messageCase_ == MessageOneofCase.MatchDataSend) {
        output.WriteRawTag(122);
        output.WriteMessage(MatchDataSend);
      }
      if (messageCase_ == MessageOneofCase.MatchJoin) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(MatchJoin);
      }
      if (messageCase_ == MessageOneofCase.MatchLeave) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(MatchLeave);
      }
      if (messageCase_ == MessageOneofCase.MatchPresenceEvent) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(MatchPresenceEvent);
      }
      if (messageCase_ == MessageOneofCase.MatchmakerAdd) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(MatchmakerAdd);
      }
      if (messageCase_ == MessageOneofCase.MatchmakerMatched) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(MatchmakerMatched);
      }
      if (messageCase_ == MessageOneofCase.MatchmakerRemove) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(MatchmakerRemove);
      }
      if (messageCase_ == MessageOneofCase.MatchmakerTicket) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(MatchmakerTicket);
      }
      if (messageCase_ == MessageOneofCase.Notifications) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Notifications);
      }
      if (messageCase_ == MessageOneofCase.Rpc) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(Rpc);
      }
      if (messageCase_ == MessageOneofCase.Status) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Status);
      }
      if (messageCase_ == MessageOneofCase.StatusFollow) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(StatusFollow);
      }
      if (messageCase_ == MessageOneofCase.StatusPresenceEvent) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(StatusPresenceEvent);
      }
      if (messageCase_ == MessageOneofCase.StatusUnfollow) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(StatusUnfollow);
      }
      if (messageCase_ == MessageOneofCase.StatusUpdate) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(StatusUpdate);
      }
      if (messageCase_ == MessageOneofCase.StreamData) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(StreamData);
      }
      if (messageCase_ == MessageOneofCase.StreamPresenceEvent) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(StreamPresenceEvent);
      }
      if (messageCase_ == MessageOneofCase.Ping) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(Ping);
      }
      if (messageCase_ == MessageOneofCase.Pong) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(Pong);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cid);
      }
      if (messageCase_ == MessageOneofCase.Channel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
      }
      if (messageCase_ == MessageOneofCase.ChannelJoin) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelJoin);
      }
      if (messageCase_ == MessageOneofCase.ChannelLeave) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelLeave);
      }
      if (messageCase_ == MessageOneofCase.ChannelMessage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelMessage);
      }
      if (messageCase_ == MessageOneofCase.ChannelMessageAck) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelMessageAck);
      }
      if (messageCase_ == MessageOneofCase.ChannelMessageSend) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelMessageSend);
      }
      if (messageCase_ == MessageOneofCase.ChannelMessageUpdate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelMessageUpdate);
      }
      if (messageCase_ == MessageOneofCase.ChannelMessageRemove) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelMessageRemove);
      }
      if (messageCase_ == MessageOneofCase.ChannelPresenceEvent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelPresenceEvent);
      }
      if (messageCase_ == MessageOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (messageCase_ == MessageOneofCase.Match) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Match);
      }
      if (messageCase_ == MessageOneofCase.MatchCreate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchCreate);
      }
      if (messageCase_ == MessageOneofCase.MatchData) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchData);
      }
      if (messageCase_ == MessageOneofCase.MatchDataSend) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchDataSend);
      }
      if (messageCase_ == MessageOneofCase.MatchJoin) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchJoin);
      }
      if (messageCase_ == MessageOneofCase.MatchLeave) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchLeave);
      }
      if (messageCase_ == MessageOneofCase.MatchPresenceEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchPresenceEvent);
      }
      if (messageCase_ == MessageOneofCase.MatchmakerAdd) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchmakerAdd);
      }
      if (messageCase_ == MessageOneofCase.MatchmakerMatched) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchmakerMatched);
      }
      if (messageCase_ == MessageOneofCase.MatchmakerRemove) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchmakerRemove);
      }
      if (messageCase_ == MessageOneofCase.MatchmakerTicket) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MatchmakerTicket);
      }
      if (messageCase_ == MessageOneofCase.Notifications) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Notifications);
      }
      if (messageCase_ == MessageOneofCase.Rpc) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Rpc);
      }
      if (messageCase_ == MessageOneofCase.Status) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (messageCase_ == MessageOneofCase.StatusFollow) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusFollow);
      }
      if (messageCase_ == MessageOneofCase.StatusPresenceEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusPresenceEvent);
      }
      if (messageCase_ == MessageOneofCase.StatusUnfollow) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusUnfollow);
      }
      if (messageCase_ == MessageOneofCase.StatusUpdate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusUpdate);
      }
      if (messageCase_ == MessageOneofCase.StreamData) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StreamData);
      }
      if (messageCase_ == MessageOneofCase.StreamPresenceEvent) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StreamPresenceEvent);
      }
      if (messageCase_ == MessageOneofCase.Ping) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (messageCase_ == MessageOneofCase.Pong) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Pong);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Envelope other) {
      if (other == null) {
        return;
      }
      if (other.Cid.Length != 0) {
        Cid = other.Cid;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.Channel:
          if (Channel == null) {
            Channel = new global::Nakama.Channel();
          }
          Channel.MergeFrom(other.Channel);
          break;
        case MessageOneofCase.ChannelJoin:
          if (ChannelJoin == null) {
            ChannelJoin = new global::Nakama.ChannelJoin();
          }
          ChannelJoin.MergeFrom(other.ChannelJoin);
          break;
        case MessageOneofCase.ChannelLeave:
          if (ChannelLeave == null) {
            ChannelLeave = new global::Nakama.ChannelLeave();
          }
          ChannelLeave.MergeFrom(other.ChannelLeave);
          break;
        case MessageOneofCase.ChannelMessage:
          if (ChannelMessage == null) {
            ChannelMessage = new global::Nakama.ChannelMessage();
          }
          ChannelMessage.MergeFrom(other.ChannelMessage);
          break;
        case MessageOneofCase.ChannelMessageAck:
          if (ChannelMessageAck == null) {
            ChannelMessageAck = new global::Nakama.ChannelMessageAck();
          }
          ChannelMessageAck.MergeFrom(other.ChannelMessageAck);
          break;
        case MessageOneofCase.ChannelMessageSend:
          if (ChannelMessageSend == null) {
            ChannelMessageSend = new global::Nakama.ChannelMessageSend();
          }
          ChannelMessageSend.MergeFrom(other.ChannelMessageSend);
          break;
        case MessageOneofCase.ChannelMessageUpdate:
          if (ChannelMessageUpdate == null) {
            ChannelMessageUpdate = new global::Nakama.ChannelMessageUpdate();
          }
          ChannelMessageUpdate.MergeFrom(other.ChannelMessageUpdate);
          break;
        case MessageOneofCase.ChannelMessageRemove:
          if (ChannelMessageRemove == null) {
            ChannelMessageRemove = new global::Nakama.ChannelMessageRemove();
          }
          ChannelMessageRemove.MergeFrom(other.ChannelMessageRemove);
          break;
        case MessageOneofCase.ChannelPresenceEvent:
          if (ChannelPresenceEvent == null) {
            ChannelPresenceEvent = new global::Nakama.ChannelPresenceEvent();
          }
          ChannelPresenceEvent.MergeFrom(other.ChannelPresenceEvent);
          break;
        case MessageOneofCase.Error:
          if (Error == null) {
            Error = new global::Nakama.Error();
          }
          Error.MergeFrom(other.Error);
          break;
        case MessageOneofCase.Match:
          if (Match == null) {
            Match = new global::Nakama.Match();
          }
          Match.MergeFrom(other.Match);
          break;
        case MessageOneofCase.MatchCreate:
          if (MatchCreate == null) {
            MatchCreate = new global::Nakama.MatchCreate();
          }
          MatchCreate.MergeFrom(other.MatchCreate);
          break;
        case MessageOneofCase.MatchData:
          if (MatchData == null) {
            MatchData = new global::Nakama.MatchData();
          }
          MatchData.MergeFrom(other.MatchData);
          break;
        case MessageOneofCase.MatchDataSend:
          if (MatchDataSend == null) {
            MatchDataSend = new global::Nakama.MatchDataSend();
          }
          MatchDataSend.MergeFrom(other.MatchDataSend);
          break;
        case MessageOneofCase.MatchJoin:
          if (MatchJoin == null) {
            MatchJoin = new global::Nakama.MatchJoin();
          }
          MatchJoin.MergeFrom(other.MatchJoin);
          break;
        case MessageOneofCase.MatchLeave:
          if (MatchLeave == null) {
            MatchLeave = new global::Nakama.MatchLeave();
          }
          MatchLeave.MergeFrom(other.MatchLeave);
          break;
        case MessageOneofCase.MatchPresenceEvent:
          if (MatchPresenceEvent == null) {
            MatchPresenceEvent = new global::Nakama.MatchPresenceEvent();
          }
          MatchPresenceEvent.MergeFrom(other.MatchPresenceEvent);
          break;
        case MessageOneofCase.MatchmakerAdd:
          if (MatchmakerAdd == null) {
            MatchmakerAdd = new global::Nakama.MatchmakerAdd();
          }
          MatchmakerAdd.MergeFrom(other.MatchmakerAdd);
          break;
        case MessageOneofCase.MatchmakerMatched:
          if (MatchmakerMatched == null) {
            MatchmakerMatched = new global::Nakama.MatchmakerMatched();
          }
          MatchmakerMatched.MergeFrom(other.MatchmakerMatched);
          break;
        case MessageOneofCase.MatchmakerRemove:
          if (MatchmakerRemove == null) {
            MatchmakerRemove = new global::Nakama.MatchmakerRemove();
          }
          MatchmakerRemove.MergeFrom(other.MatchmakerRemove);
          break;
        case MessageOneofCase.MatchmakerTicket:
          if (MatchmakerTicket == null) {
            MatchmakerTicket = new global::Nakama.MatchmakerTicket();
          }
          MatchmakerTicket.MergeFrom(other.MatchmakerTicket);
          break;
        case MessageOneofCase.Notifications:
          if (Notifications == null) {
            Notifications = new global::Nakama.Notifications();
          }
          Notifications.MergeFrom(other.Notifications);
          break;
        case MessageOneofCase.Rpc:
          if (Rpc == null) {
            Rpc = new global::Nakama.Rpc();
          }
          Rpc.MergeFrom(other.Rpc);
          break;
        case MessageOneofCase.Status:
          if (Status == null) {
            Status = new global::Nakama.Status();
          }
          Status.MergeFrom(other.Status);
          break;
        case MessageOneofCase.StatusFollow:
          if (StatusFollow == null) {
            StatusFollow = new global::Nakama.StatusFollow();
          }
          StatusFollow.MergeFrom(other.StatusFollow);
          break;
        case MessageOneofCase.StatusPresenceEvent:
          if (StatusPresenceEvent == null) {
            StatusPresenceEvent = new global::Nakama.StatusPresenceEvent();
          }
          StatusPresenceEvent.MergeFrom(other.StatusPresenceEvent);
          break;
        case MessageOneofCase.StatusUnfollow:
          if (StatusUnfollow == null) {
            StatusUnfollow = new global::Nakama.StatusUnfollow();
          }
          StatusUnfollow.MergeFrom(other.StatusUnfollow);
          break;
        case MessageOneofCase.StatusUpdate:
          if (StatusUpdate == null) {
            StatusUpdate = new global::Nakama.StatusUpdate();
          }
          StatusUpdate.MergeFrom(other.StatusUpdate);
          break;
        case MessageOneofCase.StreamData:
          if (StreamData == null) {
            StreamData = new global::Nakama.StreamData();
          }
          StreamData.MergeFrom(other.StreamData);
          break;
        case MessageOneofCase.StreamPresenceEvent:
          if (StreamPresenceEvent == null) {
            StreamPresenceEvent = new global::Nakama.StreamPresenceEvent();
          }
          StreamPresenceEvent.MergeFrom(other.StreamPresenceEvent);
          break;
        case MessageOneofCase.Ping:
          if (Ping == null) {
            Ping = new global::Nakama.Ping();
          }
          Ping.MergeFrom(other.Ping);
          break;
        case MessageOneofCase.Pong:
          if (Pong == null) {
            Pong = new global::Nakama.Pong();
          }
          Pong.MergeFrom(other.Pong);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Cid = input.ReadString();
            break;
          }
          case 18: {
            global::Nakama.Channel subBuilder = new global::Nakama.Channel();
            if (messageCase_ == MessageOneofCase.Channel) {
              subBuilder.MergeFrom(Channel);
            }
            input.ReadMessage(subBuilder);
            Channel = subBuilder;
            break;
          }
          case 26: {
            global::Nakama.ChannelJoin subBuilder = new global::Nakama.ChannelJoin();
            if (messageCase_ == MessageOneofCase.ChannelJoin) {
              subBuilder.MergeFrom(ChannelJoin);
            }
            input.ReadMessage(subBuilder);
            ChannelJoin = subBuilder;
            break;
          }
          case 34: {
            global::Nakama.ChannelLeave subBuilder = new global::Nakama.ChannelLeave();
            if (messageCase_ == MessageOneofCase.ChannelLeave) {
              subBuilder.MergeFrom(ChannelLeave);
            }
            input.ReadMessage(subBuilder);
            ChannelLeave = subBuilder;
            break;
          }
          case 42: {
            global::Nakama.ChannelMessage subBuilder = new global::Nakama.ChannelMessage();
            if (messageCase_ == MessageOneofCase.ChannelMessage) {
              subBuilder.MergeFrom(ChannelMessage);
            }
            input.ReadMessage(subBuilder);
            ChannelMessage = subBuilder;
            break;
          }
          case 50: {
            global::Nakama.ChannelMessageAck subBuilder = new global::Nakama.ChannelMessageAck();
            if (messageCase_ == MessageOneofCase.ChannelMessageAck) {
              subBuilder.MergeFrom(ChannelMessageAck);
            }
            input.ReadMessage(subBuilder);
            ChannelMessageAck = subBuilder;
            break;
          }
          case 58: {
            global::Nakama.ChannelMessageSend subBuilder = new global::Nakama.ChannelMessageSend();
            if (messageCase_ == MessageOneofCase.ChannelMessageSend) {
              subBuilder.MergeFrom(ChannelMessageSend);
            }
            input.ReadMessage(subBuilder);
            ChannelMessageSend = subBuilder;
            break;
          }
          case 66: {
            global::Nakama.ChannelMessageUpdate subBuilder = new global::Nakama.ChannelMessageUpdate();
            if (messageCase_ == MessageOneofCase.ChannelMessageUpdate) {
              subBuilder.MergeFrom(ChannelMessageUpdate);
            }
            input.ReadMessage(subBuilder);
            ChannelMessageUpdate = subBuilder;
            break;
          }
          case 74: {
            global::Nakama.ChannelMessageRemove subBuilder = new global::Nakama.ChannelMessageRemove();
            if (messageCase_ == MessageOneofCase.ChannelMessageRemove) {
              subBuilder.MergeFrom(ChannelMessageRemove);
            }
            input.ReadMessage(subBuilder);
            ChannelMessageRemove = subBuilder;
            break;
          }
          case 82: {
            global::Nakama.ChannelPresenceEvent subBuilder = new global::Nakama.ChannelPresenceEvent();
            if (messageCase_ == MessageOneofCase.ChannelPresenceEvent) {
              subBuilder.MergeFrom(ChannelPresenceEvent);
            }
            input.ReadMessage(subBuilder);
            ChannelPresenceEvent = subBuilder;
            break;
          }
          case 90: {
            global::Nakama.Error subBuilder = new global::Nakama.Error();
            if (messageCase_ == MessageOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
          case 98: {
            global::Nakama.Match subBuilder = new global::Nakama.Match();
            if (messageCase_ == MessageOneofCase.Match) {
              subBuilder.MergeFrom(Match);
            }
            input.ReadMessage(subBuilder);
            Match = subBuilder;
            break;
          }
          case 106: {
            global::Nakama.MatchCreate subBuilder = new global::Nakama.MatchCreate();
            if (messageCase_ == MessageOneofCase.MatchCreate) {
              subBuilder.MergeFrom(MatchCreate);
            }
            input.ReadMessage(subBuilder);
            MatchCreate = subBuilder;
            break;
          }
          case 114: {
            global::Nakama.MatchData subBuilder = new global::Nakama.MatchData();
            if (messageCase_ == MessageOneofCase.MatchData) {
              subBuilder.MergeFrom(MatchData);
            }
            input.ReadMessage(subBuilder);
            MatchData = subBuilder;
            break;
          }
          case 122: {
            global::Nakama.MatchDataSend subBuilder = new global::Nakama.MatchDataSend();
            if (messageCase_ == MessageOneofCase.MatchDataSend) {
              subBuilder.MergeFrom(MatchDataSend);
            }
            input.ReadMessage(subBuilder);
            MatchDataSend = subBuilder;
            break;
          }
          case 130: {
            global::Nakama.MatchJoin subBuilder = new global::Nakama.MatchJoin();
            if (messageCase_ == MessageOneofCase.MatchJoin) {
              subBuilder.MergeFrom(MatchJoin);
            }
            input.ReadMessage(subBuilder);
            MatchJoin = subBuilder;
            break;
          }
          case 138: {
            global::Nakama.MatchLeave subBuilder = new global::Nakama.MatchLeave();
            if (messageCase_ == MessageOneofCase.MatchLeave) {
              subBuilder.MergeFrom(MatchLeave);
            }
            input.ReadMessage(subBuilder);
            MatchLeave = subBuilder;
            break;
          }
          case 146: {
            global::Nakama.MatchPresenceEvent subBuilder = new global::Nakama.MatchPresenceEvent();
            if (messageCase_ == MessageOneofCase.MatchPresenceEvent) {
              subBuilder.MergeFrom(MatchPresenceEvent);
            }
            input.ReadMessage(subBuilder);
            MatchPresenceEvent = subBuilder;
            break;
          }
          case 154: {
            global::Nakama.MatchmakerAdd subBuilder = new global::Nakama.MatchmakerAdd();
            if (messageCase_ == MessageOneofCase.MatchmakerAdd) {
              subBuilder.MergeFrom(MatchmakerAdd);
            }
            input.ReadMessage(subBuilder);
            MatchmakerAdd = subBuilder;
            break;
          }
          case 162: {
            global::Nakama.MatchmakerMatched subBuilder = new global::Nakama.MatchmakerMatched();
            if (messageCase_ == MessageOneofCase.MatchmakerMatched) {
              subBuilder.MergeFrom(MatchmakerMatched);
            }
            input.ReadMessage(subBuilder);
            MatchmakerMatched = subBuilder;
            break;
          }
          case 170: {
            global::Nakama.MatchmakerRemove subBuilder = new global::Nakama.MatchmakerRemove();
            if (messageCase_ == MessageOneofCase.MatchmakerRemove) {
              subBuilder.MergeFrom(MatchmakerRemove);
            }
            input.ReadMessage(subBuilder);
            MatchmakerRemove = subBuilder;
            break;
          }
          case 178: {
            global::Nakama.MatchmakerTicket subBuilder = new global::Nakama.MatchmakerTicket();
            if (messageCase_ == MessageOneofCase.MatchmakerTicket) {
              subBuilder.MergeFrom(MatchmakerTicket);
            }
            input.ReadMessage(subBuilder);
            MatchmakerTicket = subBuilder;
            break;
          }
          case 186: {
            global::Nakama.Notifications subBuilder = new global::Nakama.Notifications();
            if (messageCase_ == MessageOneofCase.Notifications) {
              subBuilder.MergeFrom(Notifications);
            }
            input.ReadMessage(subBuilder);
            Notifications = subBuilder;
            break;
          }
          case 194: {
            global::Nakama.Rpc subBuilder = new global::Nakama.Rpc();
            if (messageCase_ == MessageOneofCase.Rpc) {
              subBuilder.MergeFrom(Rpc);
            }
            input.ReadMessage(subBuilder);
            Rpc = subBuilder;
            break;
          }
          case 202: {
            global::Nakama.Status subBuilder = new global::Nakama.Status();
            if (messageCase_ == MessageOneofCase.Status) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder);
            Status = subBuilder;
            break;
          }
          case 210: {
            global::Nakama.StatusFollow subBuilder = new global::Nakama.StatusFollow();
            if (messageCase_ == MessageOneofCase.StatusFollow) {
              subBuilder.MergeFrom(StatusFollow);
            }
            input.ReadMessage(subBuilder);
            StatusFollow = subBuilder;
            break;
          }
          case 218: {
            global::Nakama.StatusPresenceEvent subBuilder = new global::Nakama.StatusPresenceEvent();
            if (messageCase_ == MessageOneofCase.StatusPresenceEvent) {
              subBuilder.MergeFrom(StatusPresenceEvent);
            }
            input.ReadMessage(subBuilder);
            StatusPresenceEvent = subBuilder;
            break;
          }
          case 226: {
            global::Nakama.StatusUnfollow subBuilder = new global::Nakama.StatusUnfollow();
            if (messageCase_ == MessageOneofCase.StatusUnfollow) {
              subBuilder.MergeFrom(StatusUnfollow);
            }
            input.ReadMessage(subBuilder);
            StatusUnfollow = subBuilder;
            break;
          }
          case 234: {
            global::Nakama.StatusUpdate subBuilder = new global::Nakama.StatusUpdate();
            if (messageCase_ == MessageOneofCase.StatusUpdate) {
              subBuilder.MergeFrom(StatusUpdate);
            }
            input.ReadMessage(subBuilder);
            StatusUpdate = subBuilder;
            break;
          }
          case 242: {
            global::Nakama.StreamData subBuilder = new global::Nakama.StreamData();
            if (messageCase_ == MessageOneofCase.StreamData) {
              subBuilder.MergeFrom(StreamData);
            }
            input.ReadMessage(subBuilder);
            StreamData = subBuilder;
            break;
          }
          case 250: {
            global::Nakama.StreamPresenceEvent subBuilder = new global::Nakama.StreamPresenceEvent();
            if (messageCase_ == MessageOneofCase.StreamPresenceEvent) {
              subBuilder.MergeFrom(StreamPresenceEvent);
            }
            input.ReadMessage(subBuilder);
            StreamPresenceEvent = subBuilder;
            break;
          }
          case 258: {
            global::Nakama.Ping subBuilder = new global::Nakama.Ping();
            if (messageCase_ == MessageOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
          case 266: {
            global::Nakama.Pong subBuilder = new global::Nakama.Pong();
            if (messageCase_ == MessageOneofCase.Pong) {
              subBuilder.MergeFrom(Pong);
            }
            input.ReadMessage(subBuilder);
            Pong = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Cid = input.ReadString();
            break;
          }
          case 18: {
            global::Nakama.Channel subBuilder = new global::Nakama.Channel();
            if (messageCase_ == MessageOneofCase.Channel) {
              subBuilder.MergeFrom(Channel);
            }
            input.ReadMessage(subBuilder);
            Channel = subBuilder;
            break;
          }
          case 26: {
            global::Nakama.ChannelJoin subBuilder = new global::Nakama.ChannelJoin();
            if (messageCase_ == MessageOneofCase.ChannelJoin) {
              subBuilder.MergeFrom(ChannelJoin);
            }
            input.ReadMessage(subBuilder);
            ChannelJoin = subBuilder;
            break;
          }
          case 34: {
            global::Nakama.ChannelLeave subBuilder = new global::Nakama.ChannelLeave();
            if (messageCase_ == MessageOneofCase.ChannelLeave) {
              subBuilder.MergeFrom(ChannelLeave);
            }
            input.ReadMessage(subBuilder);
            ChannelLeave = subBuilder;
            break;
          }
          case 42: {
            global::Nakama.ChannelMessage subBuilder = new global::Nakama.ChannelMessage();
            if (messageCase_ == MessageOneofCase.ChannelMessage) {
              subBuilder.MergeFrom(ChannelMessage);
            }
            input.ReadMessage(subBuilder);
            ChannelMessage = subBuilder;
            break;
          }
          case 50: {
            global::Nakama.ChannelMessageAck subBuilder = new global::Nakama.ChannelMessageAck();
            if (messageCase_ == MessageOneofCase.ChannelMessageAck) {
              subBuilder.MergeFrom(ChannelMessageAck);
            }
            input.ReadMessage(subBuilder);
            ChannelMessageAck = subBuilder;
            break;
          }
          case 58: {
            global::Nakama.ChannelMessageSend subBuilder = new global::Nakama.ChannelMessageSend();
            if (messageCase_ == MessageOneofCase.ChannelMessageSend) {
              subBuilder.MergeFrom(ChannelMessageSend);
            }
            input.ReadMessage(subBuilder);
            ChannelMessageSend = subBuilder;
            break;
          }
          case 66: {
            global::Nakama.ChannelMessageUpdate subBuilder = new global::Nakama.ChannelMessageUpdate();
            if (messageCase_ == MessageOneofCase.ChannelMessageUpdate) {
              subBuilder.MergeFrom(ChannelMessageUpdate);
            }
            input.ReadMessage(subBuilder);
            ChannelMessageUpdate = subBuilder;
            break;
          }
          case 74: {
            global::Nakama.ChannelMessageRemove subBuilder = new global::Nakama.ChannelMessageRemove();
            if (messageCase_ == MessageOneofCase.ChannelMessageRemove) {
              subBuilder.MergeFrom(ChannelMessageRemove);
            }
            input.ReadMessage(subBuilder);
            ChannelMessageRemove = subBuilder;
            break;
          }
          case 82: {
            global::Nakama.ChannelPresenceEvent subBuilder = new global::Nakama.ChannelPresenceEvent();
            if (messageCase_ == MessageOneofCase.ChannelPresenceEvent) {
              subBuilder.MergeFrom(ChannelPresenceEvent);
            }
            input.ReadMessage(subBuilder);
            ChannelPresenceEvent = subBuilder;
            break;
          }
          case 90: {
            global::Nakama.Error subBuilder = new global::Nakama.Error();
            if (messageCase_ == MessageOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
          case 98: {
            global::Nakama.Match subBuilder = new global::Nakama.Match();
            if (messageCase_ == MessageOneofCase.Match) {
              subBuilder.MergeFrom(Match);
            }
            input.ReadMessage(subBuilder);
            Match = subBuilder;
            break;
          }
          case 106: {
            global::Nakama.MatchCreate subBuilder = new global::Nakama.MatchCreate();
            if (messageCase_ == MessageOneofCase.MatchCreate) {
              subBuilder.MergeFrom(MatchCreate);
            }
            input.ReadMessage(subBuilder);
            MatchCreate = subBuilder;
            break;
          }
          case 114: {
            global::Nakama.MatchData subBuilder = new global::Nakama.MatchData();
            if (messageCase_ == MessageOneofCase.MatchData) {
              subBuilder.MergeFrom(MatchData);
            }
            input.ReadMessage(subBuilder);
            MatchData = subBuilder;
            break;
          }
          case 122: {
            global::Nakama.MatchDataSend subBuilder = new global::Nakama.MatchDataSend();
            if (messageCase_ == MessageOneofCase.MatchDataSend) {
              subBuilder.MergeFrom(MatchDataSend);
            }
            input.ReadMessage(subBuilder);
            MatchDataSend = subBuilder;
            break;
          }
          case 130: {
            global::Nakama.MatchJoin subBuilder = new global::Nakama.MatchJoin();
            if (messageCase_ == MessageOneofCase.MatchJoin) {
              subBuilder.MergeFrom(MatchJoin);
            }
            input.ReadMessage(subBuilder);
            MatchJoin = subBuilder;
            break;
          }
          case 138: {
            global::Nakama.MatchLeave subBuilder = new global::Nakama.MatchLeave();
            if (messageCase_ == MessageOneofCase.MatchLeave) {
              subBuilder.MergeFrom(MatchLeave);
            }
            input.ReadMessage(subBuilder);
            MatchLeave = subBuilder;
            break;
          }
          case 146: {
            global::Nakama.MatchPresenceEvent subBuilder = new global::Nakama.MatchPresenceEvent();
            if (messageCase_ == MessageOneofCase.MatchPresenceEvent) {
              subBuilder.MergeFrom(MatchPresenceEvent);
            }
            input.ReadMessage(subBuilder);
            MatchPresenceEvent = subBuilder;
            break;
          }
          case 154: {
            global::Nakama.MatchmakerAdd subBuilder = new global::Nakama.MatchmakerAdd();
            if (messageCase_ == MessageOneofCase.MatchmakerAdd) {
              subBuilder.MergeFrom(MatchmakerAdd);
            }
            input.ReadMessage(subBuilder);
            MatchmakerAdd = subBuilder;
            break;
          }
          case 162: {
            global::Nakama.MatchmakerMatched subBuilder = new global::Nakama.MatchmakerMatched();
            if (messageCase_ == MessageOneofCase.MatchmakerMatched) {
              subBuilder.MergeFrom(MatchmakerMatched);
            }
            input.ReadMessage(subBuilder);
            MatchmakerMatched = subBuilder;
            break;
          }
          case 170: {
            global::Nakama.MatchmakerRemove subBuilder = new global::Nakama.MatchmakerRemove();
            if (messageCase_ == MessageOneofCase.MatchmakerRemove) {
              subBuilder.MergeFrom(MatchmakerRemove);
            }
            input.ReadMessage(subBuilder);
            MatchmakerRemove = subBuilder;
            break;
          }
          case 178: {
            global::Nakama.MatchmakerTicket subBuilder = new global::Nakama.MatchmakerTicket();
            if (messageCase_ == MessageOneofCase.MatchmakerTicket) {
              subBuilder.MergeFrom(MatchmakerTicket);
            }
            input.ReadMessage(subBuilder);
            MatchmakerTicket = subBuilder;
            break;
          }
          case 186: {
            global::Nakama.Notifications subBuilder = new global::Nakama.Notifications();
            if (messageCase_ == MessageOneofCase.Notifications) {
              subBuilder.MergeFrom(Notifications);
            }
            input.ReadMessage(subBuilder);
            Notifications = subBuilder;
            break;
          }
          case 194: {
            global::Nakama.Rpc subBuilder = new global::Nakama.Rpc();
            if (messageCase_ == MessageOneofCase.Rpc) {
              subBuilder.MergeFrom(Rpc);
            }
            input.ReadMessage(subBuilder);
            Rpc = subBuilder;
            break;
          }
          case 202: {
            global::Nakama.Status subBuilder = new global::Nakama.Status();
            if (messageCase_ == MessageOneofCase.Status) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder);
            Status = subBuilder;
            break;
          }
          case 210: {
            global::Nakama.StatusFollow subBuilder = new global::Nakama.StatusFollow();
            if (messageCase_ == MessageOneofCase.StatusFollow) {
              subBuilder.MergeFrom(StatusFollow);
            }
            input.ReadMessage(subBuilder);
            StatusFollow = subBuilder;
            break;
          }
          case 218: {
            global::Nakama.StatusPresenceEvent subBuilder = new global::Nakama.StatusPresenceEvent();
            if (messageCase_ == MessageOneofCase.StatusPresenceEvent) {
              subBuilder.MergeFrom(StatusPresenceEvent);
            }
            input.ReadMessage(subBuilder);
            StatusPresenceEvent = subBuilder;
            break;
          }
          case 226: {
            global::Nakama.StatusUnfollow subBuilder = new global::Nakama.StatusUnfollow();
            if (messageCase_ == MessageOneofCase.StatusUnfollow) {
              subBuilder.MergeFrom(StatusUnfollow);
            }
            input.ReadMessage(subBuilder);
            StatusUnfollow = subBuilder;
            break;
          }
          case 234: {
            global::Nakama.StatusUpdate subBuilder = new global::Nakama.StatusUpdate();
            if (messageCase_ == MessageOneofCase.StatusUpdate) {
              subBuilder.MergeFrom(StatusUpdate);
            }
            input.ReadMessage(subBuilder);
            StatusUpdate = subBuilder;
            break;
          }
          case 242: {
            global::Nakama.StreamData subBuilder = new global::Nakama.StreamData();
            if (messageCase_ == MessageOneofCase.StreamData) {
              subBuilder.MergeFrom(StreamData);
            }
            input.ReadMessage(subBuilder);
            StreamData = subBuilder;
            break;
          }
          case 250: {
            global::Nakama.StreamPresenceEvent subBuilder = new global::Nakama.StreamPresenceEvent();
            if (messageCase_ == MessageOneofCase.StreamPresenceEvent) {
              subBuilder.MergeFrom(StreamPresenceEvent);
            }
            input.ReadMessage(subBuilder);
            StreamPresenceEvent = subBuilder;
            break;
          }
          case 258: {
            global::Nakama.Ping subBuilder = new global::Nakama.Ping();
            if (messageCase_ == MessageOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
          case 266: {
            global::Nakama.Pong subBuilder = new global::Nakama.Pong();
            if (messageCase_ == MessageOneofCase.Pong) {
              subBuilder.MergeFrom(Pong);
            }
            input.ReadMessage(subBuilder);
            Pong = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A realtime chat channel.
  /// </summary>
  public sealed partial class Channel : pb::IMessage<Channel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Channel> _parser = new pb::MessageParser<Channel>(() => new Channel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Channel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel(Channel other) : this() {
      id_ = other.id_;
      presences_ = other.presences_.Clone();
      self_ = other.self_ != null ? other.self_.Clone() : null;
      roomName_ = other.roomName_;
      groupId_ = other.groupId_;
      userIdOne_ = other.userIdOne_;
      userIdTwo_ = other.userIdTwo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel Clone() {
      return new Channel(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The ID of the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "presences" field.</summary>
    public const int PresencesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_presences_codec
        = pb::FieldCodec.ForMessage(18, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> presences_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    /// <summary>
    /// The users currently in the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Presences {
      get { return presences_; }
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 3;
    private global::Nakama.UserPresence self_;
    /// <summary>
    /// A reference to the current user's presence in the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.UserPresence Self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 4;
    private string roomName_ = "";
    /// <summary>
    /// The name of the chat room, or an empty string if this message was not sent through a chat room.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 5;
    private string groupId_ = "";
    /// <summary>
    /// The ID of the group, or an empty string if this message was not sent through a group channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id_one" field.</summary>
    public const int UserIdOneFieldNumber = 6;
    private string userIdOne_ = "";
    /// <summary>
    /// The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserIdOne {
      get { return userIdOne_; }
      set {
        userIdOne_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id_two" field.</summary>
    public const int UserIdTwoFieldNumber = 7;
    private string userIdTwo_ = "";
    /// <summary>
    /// The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserIdTwo {
      get { return userIdTwo_; }
      set {
        userIdTwo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Channel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Channel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!presences_.Equals(other.presences_)) return false;
      if (!object.Equals(Self, other.Self)) return false;
      if (RoomName != other.RoomName) return false;
      if (GroupId != other.GroupId) return false;
      if (UserIdOne != other.UserIdOne) return false;
      if (UserIdTwo != other.UserIdTwo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      hash ^= presences_.GetHashCode();
      if (self_ != null) hash ^= Self.GetHashCode();
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (UserIdOne.Length != 0) hash ^= UserIdOne.GetHashCode();
      if (UserIdTwo.Length != 0) hash ^= UserIdTwo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      presences_.WriteTo(output, _repeated_presences_codec);
      if (self_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Self);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RoomName);
      }
      if (GroupId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GroupId);
      }
      if (UserIdOne.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UserIdOne);
      }
      if (UserIdTwo.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UserIdTwo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      presences_.WriteTo(ref output, _repeated_presences_codec);
      if (self_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Self);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RoomName);
      }
      if (GroupId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GroupId);
      }
      if (UserIdOne.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UserIdOne);
      }
      if (UserIdTwo.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UserIdTwo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      size += presences_.CalculateSize(_repeated_presences_codec);
      if (self_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
      }
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (UserIdOne.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserIdOne);
      }
      if (UserIdTwo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserIdTwo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Channel other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      presences_.Add(other.presences_);
      if (other.self_ != null) {
        if (self_ == null) {
          Self = new global::Nakama.UserPresence();
        }
        Self.MergeFrom(other.Self);
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      if (other.UserIdOne.Length != 0) {
        UserIdOne = other.UserIdOne;
      }
      if (other.UserIdTwo.Length != 0) {
        UserIdTwo = other.UserIdTwo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            presences_.AddEntriesFrom(input, _repeated_presences_codec);
            break;
          }
          case 26: {
            if (self_ == null) {
              Self = new global::Nakama.UserPresence();
            }
            input.ReadMessage(Self);
            break;
          }
          case 34: {
            RoomName = input.ReadString();
            break;
          }
          case 42: {
            GroupId = input.ReadString();
            break;
          }
          case 50: {
            UserIdOne = input.ReadString();
            break;
          }
          case 58: {
            UserIdTwo = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            presences_.AddEntriesFrom(ref input, _repeated_presences_codec);
            break;
          }
          case 26: {
            if (self_ == null) {
              Self = new global::Nakama.UserPresence();
            }
            input.ReadMessage(Self);
            break;
          }
          case 34: {
            RoomName = input.ReadString();
            break;
          }
          case 42: {
            GroupId = input.ReadString();
            break;
          }
          case 50: {
            UserIdOne = input.ReadString();
            break;
          }
          case 58: {
            UserIdTwo = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Join operation for a realtime chat channel.
  /// </summary>
  public sealed partial class ChannelJoin : pb::IMessage<ChannelJoin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelJoin> _parser = new pb::MessageParser<ChannelJoin>(() => new ChannelJoin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelJoin(ChannelJoin other) : this() {
      target_ = other.target_;
      type_ = other.type_;
      Persistence = other.Persistence;
      Hidden = other.Hidden;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelJoin Clone() {
      return new ChannelJoin(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private string target_ = "";
    /// <summary>
    /// The user ID to DM with, group ID to chat with, or room channel name to join.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Target {
      get { return target_; }
      set {
        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    /// The type of the chat channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "persistence" field.</summary>
    public const int PersistenceFieldNumber = 3;
    private static readonly pb::FieldCodec<bool?> _single_persistence_codec = pb::FieldCodec.ForStructWrapper<bool>(26);
    private bool? persistence_;
    /// <summary>
    /// Whether messages sent on this channel should be persistent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Persistence {
      get { return persistence_; }
      set {
        persistence_ = value;
      }
    }


    /// <summary>Field number for the "hidden" field.</summary>
    public const int HiddenFieldNumber = 4;
    private static readonly pb::FieldCodec<bool?> _single_hidden_codec = pb::FieldCodec.ForStructWrapper<bool>(34);
    private bool? hidden_;
    /// <summary>
    /// Whether the user should appear in the channel's presence list and events.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Hidden {
      get { return hidden_; }
      set {
        hidden_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Target != other.Target) return false;
      if (Type != other.Type) return false;
      if (Persistence != other.Persistence) return false;
      if (Hidden != other.Hidden) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Target.Length != 0) hash ^= Target.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (persistence_ != null) hash ^= Persistence.GetHashCode();
      if (hidden_ != null) hash ^= Hidden.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Target.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Target);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (persistence_ != null) {
        _single_persistence_codec.WriteTagAndValue(output, Persistence);
      }
      if (hidden_ != null) {
        _single_hidden_codec.WriteTagAndValue(output, Hidden);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Target.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Target);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (persistence_ != null) {
        _single_persistence_codec.WriteTagAndValue(ref output, Persistence);
      }
      if (hidden_ != null) {
        _single_hidden_codec.WriteTagAndValue(ref output, Hidden);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Target.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (persistence_ != null) {
        size += _single_persistence_codec.CalculateSizeWithTag(Persistence);
      }
      if (hidden_ != null) {
        size += _single_hidden_codec.CalculateSizeWithTag(Hidden);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelJoin other) {
      if (other == null) {
        return;
      }
      if (other.Target.Length != 0) {
        Target = other.Target;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.persistence_ != null) {
        if (persistence_ == null || other.Persistence != false) {
          Persistence = other.Persistence;
        }
      }
      if (other.hidden_ != null) {
        if (hidden_ == null || other.Hidden != false) {
          Hidden = other.Hidden;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Target = input.ReadString();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 26: {
            bool? value = _single_persistence_codec.Read(input);
            if (persistence_ == null || value != false) {
              Persistence = value;
            }
            break;
          }
          case 34: {
            bool? value = _single_hidden_codec.Read(input);
            if (hidden_ == null || value != false) {
              Hidden = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Target = input.ReadString();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 26: {
            bool? value = _single_persistence_codec.Read(ref input);
            if (persistence_ == null || value != false) {
              Persistence = value;
            }
            break;
          }
          case 34: {
            bool? value = _single_hidden_codec.Read(ref input);
            if (hidden_ == null || value != false) {
              Hidden = value;
            }
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ChannelJoin message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The type of chat channel.
      /// </summary>
      public enum Type {
        /// <summary>
        /// Default case. Assumed as ROOM type.
        /// </summary>
        [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// A room which anyone can join to chat.
        /// </summary>
        [pbr::OriginalName("ROOM")] Room = 1,
        /// <summary>
        /// A private channel for 1-on-1 chat.
        /// </summary>
        [pbr::OriginalName("DIRECT_MESSAGE")] DirectMessage = 2,
        /// <summary>
        /// A channel for group chat.
        /// </summary>
        [pbr::OriginalName("GROUP")] Group = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Leave a realtime channel.
  /// </summary>
  public sealed partial class ChannelLeave : pb::IMessage<ChannelLeave>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelLeave> _parser = new pb::MessageParser<ChannelLeave>(() => new ChannelLeave());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelLeave> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelLeave() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelLeave(ChannelLeave other) : this() {
      channelId_ = other.channelId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelLeave Clone() {
      return new ChannelLeave(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private string channelId_ = "";
    /// <summary>
    /// The ID of the channel to leave.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelId {
      get { return channelId_; }
      set {
        channelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelLeave);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelLeave other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId.Length != 0) hash ^= ChannelId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChannelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChannelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelLeave other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId.Length != 0) {
        ChannelId = other.ChannelId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChannelId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ChannelId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A receipt reply from a channel message send operation.
  /// </summary>
  public sealed partial class ChannelMessageAck : pb::IMessage<ChannelMessageAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelMessageAck> _parser = new pb::MessageParser<ChannelMessageAck>(() => new ChannelMessageAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelMessageAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessageAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessageAck(ChannelMessageAck other) : this() {
      channelId_ = other.channelId_;
      messageId_ = other.messageId_;
      Code = other.Code;
      username_ = other.username_;
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      updateTime_ = other.updateTime_ != null ? other.updateTime_.Clone() : null;
      Persistent = other.Persistent;
      roomName_ = other.roomName_;
      groupId_ = other.groupId_;
      userIdOne_ = other.userIdOne_;
      userIdTwo_ = other.userIdTwo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessageAck Clone() {
      return new ChannelMessageAck(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private string channelId_ = "";
    /// <summary>
    /// The channel the message was sent to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelId {
      get { return channelId_; }
      set {
        channelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 2;
    private string messageId_ = "";
    /// <summary>
    /// The unique ID assigned to the message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 3;
    private static readonly pb::FieldCodec<int?> _single_code_codec = pb::FieldCodec.ForStructWrapper<int>(26);
    private int? code_;
    /// <summary>
    /// The code representing a message type or category.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int? Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }


    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 4;
    private string username_ = "";
    /// <summary>
    /// Username of the message sender.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// The UNIX time when the message was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
    /// <summary>
    /// The UNIX time when the message was last updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "persistent" field.</summary>
    public const int PersistentFieldNumber = 7;
    private static readonly pb::FieldCodec<bool?> _single_persistent_codec = pb::FieldCodec.ForStructWrapper<bool>(58);
    private bool? persistent_;
    /// <summary>
    /// True if the message was persisted to the channel's history, false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Persistent {
      get { return persistent_; }
      set {
        persistent_ = value;
      }
    }


    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 8;
    private string roomName_ = "";
    /// <summary>
    /// The name of the chat room, or an empty string if this message was not sent through a chat room.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 9;
    private string groupId_ = "";
    /// <summary>
    /// The ID of the group, or an empty string if this message was not sent through a group channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id_one" field.</summary>
    public const int UserIdOneFieldNumber = 10;
    private string userIdOne_ = "";
    /// <summary>
    /// The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserIdOne {
      get { return userIdOne_; }
      set {
        userIdOne_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id_two" field.</summary>
    public const int UserIdTwoFieldNumber = 11;
    private string userIdTwo_ = "";
    /// <summary>
    /// The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserIdTwo {
      get { return userIdTwo_; }
      set {
        userIdTwo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelMessageAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelMessageAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      if (MessageId != other.MessageId) return false;
      if (Code != other.Code) return false;
      if (Username != other.Username) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
      if (Persistent != other.Persistent) return false;
      if (RoomName != other.RoomName) return false;
      if (GroupId != other.GroupId) return false;
      if (UserIdOne != other.UserIdOne) return false;
      if (UserIdTwo != other.UserIdTwo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId.Length != 0) hash ^= ChannelId.GetHashCode();
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (code_ != null) hash ^= Code.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
      if (persistent_ != null) hash ^= Persistent.GetHashCode();
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (UserIdOne.Length != 0) hash ^= UserIdOne.GetHashCode();
      if (UserIdTwo.Length != 0) hash ^= UserIdTwo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChannelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelId);
      }
      if (MessageId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MessageId);
      }
      if (code_ != null) {
        _single_code_codec.WriteTagAndValue(output, Code);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Username);
      }
      if (createTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(UpdateTime);
      }
      if (persistent_ != null) {
        _single_persistent_codec.WriteTagAndValue(output, Persistent);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RoomName);
      }
      if (GroupId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(GroupId);
      }
      if (UserIdOne.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UserIdOne);
      }
      if (UserIdTwo.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(UserIdTwo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChannelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelId);
      }
      if (MessageId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MessageId);
      }
      if (code_ != null) {
        _single_code_codec.WriteTagAndValue(ref output, Code);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Username);
      }
      if (createTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(UpdateTime);
      }
      if (persistent_ != null) {
        _single_persistent_codec.WriteTagAndValue(ref output, Persistent);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RoomName);
      }
      if (GroupId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(GroupId);
      }
      if (UserIdOne.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UserIdOne);
      }
      if (UserIdTwo.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(UserIdTwo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelId);
      }
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (code_ != null) {
        size += _single_code_codec.CalculateSizeWithTag(Code);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (updateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
      }
      if (persistent_ != null) {
        size += _single_persistent_codec.CalculateSizeWithTag(Persistent);
      }
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (UserIdOne.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserIdOne);
      }
      if (UserIdTwo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserIdTwo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelMessageAck other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId.Length != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.code_ != null) {
        if (code_ == null || other.Code != 0) {
          Code = other.Code;
        }
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.updateTime_ != null) {
        if (updateTime_ == null) {
          UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
      }
      if (other.persistent_ != null) {
        if (persistent_ == null || other.Persistent != false) {
          Persistent = other.Persistent;
        }
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      if (other.UserIdOne.Length != 0) {
        UserIdOne = other.UserIdOne;
      }
      if (other.UserIdTwo.Length != 0) {
        UserIdTwo = other.UserIdTwo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChannelId = input.ReadString();
            break;
          }
          case 18: {
            MessageId = input.ReadString();
            break;
          }
          case 26: {
            int? value = _single_code_codec.Read(input);
            if (code_ == null || value != 0) {
              Code = value;
            }
            break;
          }
          case 34: {
            Username = input.ReadString();
            break;
          }
          case 42: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 50: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
          case 58: {
            bool? value = _single_persistent_codec.Read(input);
            if (persistent_ == null || value != false) {
              Persistent = value;
            }
            break;
          }
          case 66: {
            RoomName = input.ReadString();
            break;
          }
          case 74: {
            GroupId = input.ReadString();
            break;
          }
          case 82: {
            UserIdOne = input.ReadString();
            break;
          }
          case 90: {
            UserIdTwo = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ChannelId = input.ReadString();
            break;
          }
          case 18: {
            MessageId = input.ReadString();
            break;
          }
          case 26: {
            int? value = _single_code_codec.Read(ref input);
            if (code_ == null || value != 0) {
              Code = value;
            }
            break;
          }
          case 34: {
            Username = input.ReadString();
            break;
          }
          case 42: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 50: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
          case 58: {
            bool? value = _single_persistent_codec.Read(ref input);
            if (persistent_ == null || value != false) {
              Persistent = value;
            }
            break;
          }
          case 66: {
            RoomName = input.ReadString();
            break;
          }
          case 74: {
            GroupId = input.ReadString();
            break;
          }
          case 82: {
            UserIdOne = input.ReadString();
            break;
          }
          case 90: {
            UserIdTwo = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Send a message to a realtime channel.
  /// </summary>
  public sealed partial class ChannelMessageSend : pb::IMessage<ChannelMessageSend>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelMessageSend> _parser = new pb::MessageParser<ChannelMessageSend>(() => new ChannelMessageSend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelMessageSend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessageSend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessageSend(ChannelMessageSend other) : this() {
      channelId_ = other.channelId_;
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessageSend Clone() {
      return new ChannelMessageSend(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private string channelId_ = "";
    /// <summary>
    /// The channel to sent to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelId {
      get { return channelId_; }
      set {
        channelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    /// <summary>
    /// Message content.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelMessageSend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelMessageSend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId.Length != 0) hash ^= ChannelId.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChannelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelId);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChannelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelId);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelId);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelMessageSend other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId.Length != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChannelId = input.ReadString();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ChannelId = input.ReadString();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Update a message previously sent to a realtime channel.
  /// </summary>
  public sealed partial class ChannelMessageUpdate : pb::IMessage<ChannelMessageUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelMessageUpdate> _parser = new pb::MessageParser<ChannelMessageUpdate>(() => new ChannelMessageUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelMessageUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessageUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessageUpdate(ChannelMessageUpdate other) : this() {
      channelId_ = other.channelId_;
      messageId_ = other.messageId_;
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessageUpdate Clone() {
      return new ChannelMessageUpdate(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private string channelId_ = "";
    /// <summary>
    /// The channel the message was sent to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelId {
      get { return channelId_; }
      set {
        channelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 2;
    private string messageId_ = "";
    /// <summary>
    /// The ID assigned to the message to update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    /// <summary>
    /// New message content.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelMessageUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelMessageUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      if (MessageId != other.MessageId) return false;
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId.Length != 0) hash ^= ChannelId.GetHashCode();
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChannelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelId);
      }
      if (MessageId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MessageId);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChannelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelId);
      }
      if (MessageId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MessageId);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelId);
      }
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelMessageUpdate other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId.Length != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChannelId = input.ReadString();
            break;
          }
          case 18: {
            MessageId = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ChannelId = input.ReadString();
            break;
          }
          case 18: {
            MessageId = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Remove a message previously sent to a realtime channel.
  /// </summary>
  public sealed partial class ChannelMessageRemove : pb::IMessage<ChannelMessageRemove>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelMessageRemove> _parser = new pb::MessageParser<ChannelMessageRemove>(() => new ChannelMessageRemove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelMessageRemove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessageRemove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessageRemove(ChannelMessageRemove other) : this() {
      channelId_ = other.channelId_;
      messageId_ = other.messageId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelMessageRemove Clone() {
      return new ChannelMessageRemove(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private string channelId_ = "";
    /// <summary>
    /// The channel the message was sent to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelId {
      get { return channelId_; }
      set {
        channelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 2;
    private string messageId_ = "";
    /// <summary>
    /// The ID assigned to the message to update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelMessageRemove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelMessageRemove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      if (MessageId != other.MessageId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId.Length != 0) hash ^= ChannelId.GetHashCode();
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChannelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelId);
      }
      if (MessageId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MessageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChannelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelId);
      }
      if (MessageId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MessageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelId);
      }
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelMessageRemove other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId.Length != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChannelId = input.ReadString();
            break;
          }
          case 18: {
            MessageId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ChannelId = input.ReadString();
            break;
          }
          case 18: {
            MessageId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A set of joins and leaves on a particular channel.
  /// </summary>
  public sealed partial class ChannelPresenceEvent : pb::IMessage<ChannelPresenceEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelPresenceEvent> _parser = new pb::MessageParser<ChannelPresenceEvent>(() => new ChannelPresenceEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelPresenceEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelPresenceEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelPresenceEvent(ChannelPresenceEvent other) : this() {
      channelId_ = other.channelId_;
      joins_ = other.joins_.Clone();
      leaves_ = other.leaves_.Clone();
      roomName_ = other.roomName_;
      groupId_ = other.groupId_;
      userIdOne_ = other.userIdOne_;
      userIdTwo_ = other.userIdTwo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelPresenceEvent Clone() {
      return new ChannelPresenceEvent(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private string channelId_ = "";
    /// <summary>
    /// The channel identifier this event is for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelId {
      get { return channelId_; }
      set {
        channelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "joins" field.</summary>
    public const int JoinsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_joins_codec
        = pb::FieldCodec.ForMessage(18, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> joins_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    /// <summary>
    /// Presences joining the channel as part of this event, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Joins {
      get { return joins_; }
    }

    /// <summary>Field number for the "leaves" field.</summary>
    public const int LeavesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_leaves_codec
        = pb::FieldCodec.ForMessage(26, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> leaves_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    /// <summary>
    /// Presences leaving the channel as part of this event, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Leaves {
      get { return leaves_; }
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 4;
    private string roomName_ = "";
    /// <summary>
    /// The name of the chat room, or an empty string if this message was not sent through a chat room.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 5;
    private string groupId_ = "";
    /// <summary>
    /// The ID of the group, or an empty string if this message was not sent through a group channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupId {
      get { return groupId_; }
      set {
        groupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id_one" field.</summary>
    public const int UserIdOneFieldNumber = 6;
    private string userIdOne_ = "";
    /// <summary>
    /// The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserIdOne {
      get { return userIdOne_; }
      set {
        userIdOne_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id_two" field.</summary>
    public const int UserIdTwoFieldNumber = 7;
    private string userIdTwo_ = "";
    /// <summary>
    /// The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserIdTwo {
      get { return userIdTwo_; }
      set {
        userIdTwo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelPresenceEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelPresenceEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      if(!joins_.Equals(other.joins_)) return false;
      if(!leaves_.Equals(other.leaves_)) return false;
      if (RoomName != other.RoomName) return false;
      if (GroupId != other.GroupId) return false;
      if (UserIdOne != other.UserIdOne) return false;
      if (UserIdTwo != other.UserIdTwo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId.Length != 0) hash ^= ChannelId.GetHashCode();
      hash ^= joins_.GetHashCode();
      hash ^= leaves_.GetHashCode();
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (GroupId.Length != 0) hash ^= GroupId.GetHashCode();
      if (UserIdOne.Length != 0) hash ^= UserIdOne.GetHashCode();
      if (UserIdTwo.Length != 0) hash ^= UserIdTwo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChannelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelId);
      }
      joins_.WriteTo(output, _repeated_joins_codec);
      leaves_.WriteTo(output, _repeated_leaves_codec);
      if (RoomName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RoomName);
      }
      if (GroupId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GroupId);
      }
      if (UserIdOne.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UserIdOne);
      }
      if (UserIdTwo.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UserIdTwo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChannelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelId);
      }
      joins_.WriteTo(ref output, _repeated_joins_codec);
      leaves_.WriteTo(ref output, _repeated_leaves_codec);
      if (RoomName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RoomName);
      }
      if (GroupId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GroupId);
      }
      if (UserIdOne.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UserIdOne);
      }
      if (UserIdTwo.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UserIdTwo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelId);
      }
      size += joins_.CalculateSize(_repeated_joins_codec);
      size += leaves_.CalculateSize(_repeated_leaves_codec);
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (GroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupId);
      }
      if (UserIdOne.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserIdOne);
      }
      if (UserIdTwo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserIdTwo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelPresenceEvent other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId.Length != 0) {
        ChannelId = other.ChannelId;
      }
      joins_.Add(other.joins_);
      leaves_.Add(other.leaves_);
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.GroupId.Length != 0) {
        GroupId = other.GroupId;
      }
      if (other.UserIdOne.Length != 0) {
        UserIdOne = other.UserIdOne;
      }
      if (other.UserIdTwo.Length != 0) {
        UserIdTwo = other.UserIdTwo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChannelId = input.ReadString();
            break;
          }
          case 18: {
            joins_.AddEntriesFrom(input, _repeated_joins_codec);
            break;
          }
          case 26: {
            leaves_.AddEntriesFrom(input, _repeated_leaves_codec);
            break;
          }
          case 34: {
            RoomName = input.ReadString();
            break;
          }
          case 42: {
            GroupId = input.ReadString();
            break;
          }
          case 50: {
            UserIdOne = input.ReadString();
            break;
          }
          case 58: {
            UserIdTwo = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ChannelId = input.ReadString();
            break;
          }
          case 18: {
            joins_.AddEntriesFrom(ref input, _repeated_joins_codec);
            break;
          }
          case 26: {
            leaves_.AddEntriesFrom(ref input, _repeated_leaves_codec);
            break;
          }
          case 34: {
            RoomName = input.ReadString();
            break;
          }
          case 42: {
            GroupId = input.ReadString();
            break;
          }
          case 50: {
            UserIdOne = input.ReadString();
            break;
          }
          case 58: {
            UserIdTwo = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A logical error which may occur on the server.
  /// </summary>
  public sealed partial class Error : pb::IMessage<Error>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      code_ = other.code_;
      message_ = other.message_;
      context_ = other.context_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    /// The error code which should be one of "Error.Code" enums.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    /// <summary>
    /// A message in English to help developers debug the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_context_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 26);
    private readonly pbc::MapField<string, string> context_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Additional error details which may be different for each response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Context {
      get { return context_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Message != other.Message) return false;
      if (!Context.Equals(other.Context)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      hash ^= Context.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      context_.WriteTo(output, _map_context_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      context_.WriteTo(ref output, _map_context_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += context_.CalculateSize(_map_context_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      context_.Add(other.context_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            context_.AddEntriesFrom(input, _map_context_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            context_.AddEntriesFrom(ref input, _map_context_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Error message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// The selection of possible error codes.
      /// </summary>
      public enum Code {
        /// <summary>
        /// An unexpected result from the server.
        /// </summary>
        [pbr::OriginalName("RUNTIME_EXCEPTION")] RuntimeException = 0,
        /// <summary>
        /// The server received a message which is not recognised.
        /// </summary>
        [pbr::OriginalName("UNRECOGNIZED_PAYLOAD")] UnrecognizedPayload = 1,
        /// <summary>
        /// A message was expected but contains no content.
        /// </summary>
        [pbr::OriginalName("MISSING_PAYLOAD")] MissingPayload = 2,
        /// <summary>
        /// Fields in the message have an invalid format.
        /// </summary>
        [pbr::OriginalName("BAD_INPUT")] BadInput = 3,
        /// <summary>
        /// The match id was not found.
        /// </summary>
        [pbr::OriginalName("MATCH_NOT_FOUND")] MatchNotFound = 4,
        /// <summary>
        /// The match join was rejected.
        /// </summary>
        [pbr::OriginalName("MATCH_JOIN_REJECTED")] MatchJoinRejected = 5,
        /// <summary>
        /// The runtime function does not exist on the server.
        /// </summary>
        [pbr::OriginalName("RUNTIME_FUNCTION_NOT_FOUND")] RuntimeFunctionNotFound = 6,
        /// <summary>
        /// The runtime function executed with an error.
        /// </summary>
        [pbr::OriginalName("RUNTIME_FUNCTION_EXCEPTION")] RuntimeFunctionException = 7,
      }

    }
    #endregion

  }

  /// <summary>
  /// A realtime match.
  /// </summary>
  public sealed partial class Match : pb::IMessage<Match>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Match> _parser = new pb::MessageParser<Match>(() => new Match());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Match> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match(Match other) : this() {
      matchId_ = other.matchId_;
      authoritative_ = other.authoritative_;
      Label = other.Label;
      size_ = other.size_;
      presences_ = other.presences_.Clone();
      self_ = other.self_ != null ? other.self_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match Clone() {
      return new Match(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    /// <summary>
    /// The match unique ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "authoritative" field.</summary>
    public const int AuthoritativeFieldNumber = 2;
    private bool authoritative_;
    /// <summary>
    /// True if it's an server-managed authoritative match, false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Authoritative {
      get { return authoritative_; }
      set {
        authoritative_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _single_label_codec = pb::FieldCodec.ForClassWrapper<string>(26);
    private string label_;
    /// <summary>
    /// Match label, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = value;
      }
    }


    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 4;
    private int size_;
    /// <summary>
    /// The number of users currently in the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "presences" field.</summary>
    public const int PresencesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_presences_codec
        = pb::FieldCodec.ForMessage(42, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> presences_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    /// <summary>
    /// The users currently in the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Presences {
      get { return presences_; }
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 6;
    private global::Nakama.UserPresence self_;
    /// <summary>
    /// A reference to the current user's presence in the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.UserPresence Self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Match);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Match other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (Authoritative != other.Authoritative) return false;
      if (Label != other.Label) return false;
      if (Size != other.Size) return false;
      if(!presences_.Equals(other.presences_)) return false;
      if (!object.Equals(Self, other.Self)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (Authoritative != false) hash ^= Authoritative.GetHashCode();
      if (label_ != null) hash ^= Label.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      hash ^= presences_.GetHashCode();
      if (self_ != null) hash ^= Self.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (Authoritative != false) {
        output.WriteRawTag(16);
        output.WriteBool(Authoritative);
      }
      if (label_ != null) {
        _single_label_codec.WriteTagAndValue(output, Label);
      }
      if (Size != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Size);
      }
      presences_.WriteTo(output, _repeated_presences_codec);
      if (self_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Self);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (Authoritative != false) {
        output.WriteRawTag(16);
        output.WriteBool(Authoritative);
      }
      if (label_ != null) {
        _single_label_codec.WriteTagAndValue(ref output, Label);
      }
      if (Size != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Size);
      }
      presences_.WriteTo(ref output, _repeated_presences_codec);
      if (self_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Self);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (Authoritative != false) {
        size += 1 + 1;
      }
      if (label_ != null) {
        size += _single_label_codec.CalculateSizeWithTag(Label);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      size += presences_.CalculateSize(_repeated_presences_codec);
      if (self_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Match other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.Authoritative != false) {
        Authoritative = other.Authoritative;
      }
      if (other.label_ != null) {
        if (label_ == null || other.Label != "") {
          Label = other.Label;
        }
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      presences_.Add(other.presences_);
      if (other.self_ != null) {
        if (self_ == null) {
          Self = new global::Nakama.UserPresence();
        }
        Self.MergeFrom(other.Self);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 16: {
            Authoritative = input.ReadBool();
            break;
          }
          case 26: {
            string value = _single_label_codec.Read(input);
            if (label_ == null || value != "") {
              Label = value;
            }
            break;
          }
          case 32: {
            Size = input.ReadInt32();
            break;
          }
          case 42: {
            presences_.AddEntriesFrom(input, _repeated_presences_codec);
            break;
          }
          case 50: {
            if (self_ == null) {
              Self = new global::Nakama.UserPresence();
            }
            input.ReadMessage(Self);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 16: {
            Authoritative = input.ReadBool();
            break;
          }
          case 26: {
            string value = _single_label_codec.Read(ref input);
            if (label_ == null || value != "") {
              Label = value;
            }
            break;
          }
          case 32: {
            Size = input.ReadInt32();
            break;
          }
          case 42: {
            presences_.AddEntriesFrom(ref input, _repeated_presences_codec);
            break;
          }
          case 50: {
            if (self_ == null) {
              Self = new global::Nakama.UserPresence();
            }
            input.ReadMessage(Self);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Create a new realtime match.
  /// </summary>
  public sealed partial class MatchCreate : pb::IMessage<MatchCreate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchCreate> _parser = new pb::MessageParser<MatchCreate>(() => new MatchCreate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchCreate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchCreate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchCreate(MatchCreate other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchCreate Clone() {
      return new MatchCreate(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchCreate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchCreate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchCreate other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Realtime match data received from the server.
  /// </summary>
  public sealed partial class MatchData : pb::IMessage<MatchData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchData> _parser = new pb::MessageParser<MatchData>(() => new MatchData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchData(MatchData other) : this() {
      matchId_ = other.matchId_;
      presence_ = other.presence_ != null ? other.presence_.Clone() : null;
      opCode_ = other.opCode_;
      data_ = other.data_;
      reliable_ = other.reliable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchData Clone() {
      return new MatchData(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    /// <summary>
    /// The match unique ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "presence" field.</summary>
    public const int PresenceFieldNumber = 2;
    private global::Nakama.UserPresence presence_;
    /// <summary>
    /// A reference to the user presence that sent this data, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.UserPresence Presence {
      get { return presence_; }
      set {
        presence_ = value;
      }
    }

    /// <summary>Field number for the "op_code" field.</summary>
    public const int OpCodeFieldNumber = 3;
    private long opCode_;
    /// <summary>
    /// Op code value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpCode {
      get { return opCode_; }
      set {
        opCode_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// Data payload, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reliable" field.</summary>
    public const int ReliableFieldNumber = 5;
    private bool reliable_;
    /// <summary>
    /// True if this data was delivered reliably, false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reliable {
      get { return reliable_; }
      set {
        reliable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (!object.Equals(Presence, other.Presence)) return false;
      if (OpCode != other.OpCode) return false;
      if (Data != other.Data) return false;
      if (Reliable != other.Reliable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (presence_ != null) hash ^= Presence.GetHashCode();
      if (OpCode != 0L) hash ^= OpCode.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Reliable != false) hash ^= Reliable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (presence_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Presence);
      }
      if (OpCode != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(OpCode);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (Reliable != false) {
        output.WriteRawTag(40);
        output.WriteBool(Reliable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (presence_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Presence);
      }
      if (OpCode != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(OpCode);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (Reliable != false) {
        output.WriteRawTag(40);
        output.WriteBool(Reliable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (presence_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Presence);
      }
      if (OpCode != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpCode);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Reliable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchData other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.presence_ != null) {
        if (presence_ == null) {
          Presence = new global::Nakama.UserPresence();
        }
        Presence.MergeFrom(other.Presence);
      }
      if (other.OpCode != 0L) {
        OpCode = other.OpCode;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Reliable != false) {
        Reliable = other.Reliable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            if (presence_ == null) {
              Presence = new global::Nakama.UserPresence();
            }
            input.ReadMessage(Presence);
            break;
          }
          case 24: {
            OpCode = input.ReadInt64();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
          case 40: {
            Reliable = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            if (presence_ == null) {
              Presence = new global::Nakama.UserPresence();
            }
            input.ReadMessage(Presence);
            break;
          }
          case 24: {
            OpCode = input.ReadInt64();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
          case 40: {
            Reliable = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Send realtime match data to the server.
  /// </summary>
  public sealed partial class MatchDataSend : pb::IMessage<MatchDataSend>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchDataSend> _parser = new pb::MessageParser<MatchDataSend>(() => new MatchDataSend());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchDataSend> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchDataSend() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchDataSend(MatchDataSend other) : this() {
      matchId_ = other.matchId_;
      opCode_ = other.opCode_;
      data_ = other.data_;
      presences_ = other.presences_.Clone();
      reliable_ = other.reliable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchDataSend Clone() {
      return new MatchDataSend(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    /// <summary>
    /// The match unique ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "op_code" field.</summary>
    public const int OpCodeFieldNumber = 2;
    private long opCode_;
    /// <summary>
    /// Op code value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OpCode {
      get { return opCode_; }
      set {
        opCode_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// Data payload, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "presences" field.</summary>
    public const int PresencesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_presences_codec
        = pb::FieldCodec.ForMessage(34, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> presences_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    /// <summary>
    /// List of presences in the match to deliver to, if filtering is required. Otherwise deliver to everyone in the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Presences {
      get { return presences_; }
    }

    /// <summary>Field number for the "reliable" field.</summary>
    public const int ReliableFieldNumber = 5;
    private bool reliable_;
    /// <summary>
    /// True if the data should be sent reliably, false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reliable {
      get { return reliable_; }
      set {
        reliable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchDataSend);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchDataSend other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (OpCode != other.OpCode) return false;
      if (Data != other.Data) return false;
      if(!presences_.Equals(other.presences_)) return false;
      if (Reliable != other.Reliable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (OpCode != 0L) hash ^= OpCode.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      hash ^= presences_.GetHashCode();
      if (Reliable != false) hash ^= Reliable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (OpCode != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OpCode);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      presences_.WriteTo(output, _repeated_presences_codec);
      if (Reliable != false) {
        output.WriteRawTag(40);
        output.WriteBool(Reliable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (OpCode != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OpCode);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      presences_.WriteTo(ref output, _repeated_presences_codec);
      if (Reliable != false) {
        output.WriteRawTag(40);
        output.WriteBool(Reliable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (OpCode != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpCode);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      size += presences_.CalculateSize(_repeated_presences_codec);
      if (Reliable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchDataSend other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.OpCode != 0L) {
        OpCode = other.OpCode;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      presences_.Add(other.presences_);
      if (other.Reliable != false) {
        Reliable = other.Reliable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 16: {
            OpCode = input.ReadInt64();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
          case 34: {
            presences_.AddEntriesFrom(input, _repeated_presences_codec);
            break;
          }
          case 40: {
            Reliable = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 16: {
            OpCode = input.ReadInt64();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
          case 34: {
            presences_.AddEntriesFrom(ref input, _repeated_presences_codec);
            break;
          }
          case 40: {
            Reliable = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Join an existing realtime match.
  /// </summary>
  public sealed partial class MatchJoin : pb::IMessage<MatchJoin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchJoin> _parser = new pb::MessageParser<MatchJoin>(() => new MatchJoin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchJoin(MatchJoin other) : this() {
      metadata_ = other.metadata_.Clone();
      switch (other.IdCase) {
        case IdOneofCase.MatchId:
          MatchId = other.MatchId;
          break;
        case IdOneofCase.Token:
          Token = other.Token;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchJoin Clone() {
      return new MatchJoin(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    /// <summary>
    /// The match unique ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return idCase_ == IdOneofCase.MatchId ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.MatchId;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    /// <summary>
    /// A matchmaking result token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return idCase_ == IdOneofCase.Token ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Token;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_metadata_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 26);
    private readonly pbc::MapField<string, string> metadata_ = new pbc::MapField<string, string>();
    /// <summary>
    /// An optional set of key-value metadata pairs to be passed to the match handler, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Metadata {
      get { return metadata_; }
    }

    private object id_;
    /// <summary>Enum of possible cases for the "id" oneof.</summary>
    public enum IdOneofCase {
      None = 0,
      MatchId = 1,
      Token = 2,
    }
    private IdOneofCase idCase_ = IdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofCase IdCase {
      get { return idCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      idCase_ = IdOneofCase.None;
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (Token != other.Token) return false;
      if (!Metadata.Equals(other.Metadata)) return false;
      if (IdCase != other.IdCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (idCase_ == IdOneofCase.MatchId) hash ^= MatchId.GetHashCode();
      if (idCase_ == IdOneofCase.Token) hash ^= Token.GetHashCode();
      hash ^= Metadata.GetHashCode();
      hash ^= (int) idCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (idCase_ == IdOneofCase.MatchId) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (idCase_ == IdOneofCase.Token) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      metadata_.WriteTo(output, _map_metadata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (idCase_ == IdOneofCase.MatchId) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (idCase_ == IdOneofCase.Token) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      metadata_.WriteTo(ref output, _map_metadata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (idCase_ == IdOneofCase.MatchId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (idCase_ == IdOneofCase.Token) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      size += metadata_.CalculateSize(_map_metadata_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchJoin other) {
      if (other == null) {
        return;
      }
      metadata_.Add(other.metadata_);
      switch (other.IdCase) {
        case IdOneofCase.MatchId:
          MatchId = other.MatchId;
          break;
        case IdOneofCase.Token:
          Token = other.Token;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 26: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 26: {
            metadata_.AddEntriesFrom(ref input, _map_metadata_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Leave a realtime match.
  /// </summary>
  public sealed partial class MatchLeave : pb::IMessage<MatchLeave>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchLeave> _parser = new pb::MessageParser<MatchLeave>(() => new MatchLeave());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchLeave> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchLeave() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchLeave(MatchLeave other) : this() {
      matchId_ = other.matchId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchLeave Clone() {
      return new MatchLeave(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    /// <summary>
    /// The match unique ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchLeave);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchLeave other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchLeave other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A set of joins and leaves on a particular realtime match.
  /// </summary>
  public sealed partial class MatchPresenceEvent : pb::IMessage<MatchPresenceEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchPresenceEvent> _parser = new pb::MessageParser<MatchPresenceEvent>(() => new MatchPresenceEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchPresenceEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPresenceEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPresenceEvent(MatchPresenceEvent other) : this() {
      matchId_ = other.matchId_;
      joins_ = other.joins_.Clone();
      leaves_ = other.leaves_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchPresenceEvent Clone() {
      return new MatchPresenceEvent(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    /// <summary>
    /// The match unique ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "joins" field.</summary>
    public const int JoinsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_joins_codec
        = pb::FieldCodec.ForMessage(18, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> joins_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    /// <summary>
    /// User presences that have just joined the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Joins {
      get { return joins_; }
    }

    /// <summary>Field number for the "leaves" field.</summary>
    public const int LeavesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_leaves_codec
        = pb::FieldCodec.ForMessage(26, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> leaves_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    /// <summary>
    /// User presences that have just left the match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Leaves {
      get { return leaves_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchPresenceEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchPresenceEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if(!joins_.Equals(other.joins_)) return false;
      if(!leaves_.Equals(other.leaves_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      hash ^= joins_.GetHashCode();
      hash ^= leaves_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      joins_.WriteTo(output, _repeated_joins_codec);
      leaves_.WriteTo(output, _repeated_leaves_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      joins_.WriteTo(ref output, _repeated_joins_codec);
      leaves_.WriteTo(ref output, _repeated_leaves_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      size += joins_.CalculateSize(_repeated_joins_codec);
      size += leaves_.CalculateSize(_repeated_leaves_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchPresenceEvent other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      joins_.Add(other.joins_);
      leaves_.Add(other.leaves_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            joins_.AddEntriesFrom(input, _repeated_joins_codec);
            break;
          }
          case 26: {
            leaves_.AddEntriesFrom(input, _repeated_leaves_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 18: {
            joins_.AddEntriesFrom(ref input, _repeated_joins_codec);
            break;
          }
          case 26: {
            leaves_.AddEntriesFrom(ref input, _repeated_leaves_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Start a new matchmaking process.
  /// </summary>
  public sealed partial class MatchmakerAdd : pb::IMessage<MatchmakerAdd>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchmakerAdd> _parser = new pb::MessageParser<MatchmakerAdd>(() => new MatchmakerAdd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchmakerAdd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakerAdd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakerAdd(MatchmakerAdd other) : this() {
      minCount_ = other.minCount_;
      maxCount_ = other.maxCount_;
      query_ = other.query_;
      stringProperties_ = other.stringProperties_.Clone();
      numericProperties_ = other.numericProperties_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakerAdd Clone() {
      return new MatchmakerAdd(this);
    }

    /// <summary>Field number for the "min_count" field.</summary>
    public const int MinCountFieldNumber = 1;
    private int minCount_;
    /// <summary>
    /// Minimum total user count to match together.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinCount {
      get { return minCount_; }
      set {
        minCount_ = value;
      }
    }

    /// <summary>Field number for the "max_count" field.</summary>
    public const int MaxCountFieldNumber = 2;
    private int maxCount_;
    /// <summary>
    /// Maximum total user count to match together.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCount {
      get { return maxCount_; }
      set {
        maxCount_ = value;
      }
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 3;
    private string query_ = "";
    /// <summary>
    /// Filter query used to identify suitable users.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "string_properties" field.</summary>
    public const int StringPropertiesFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_stringProperties_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 34);
    private readonly pbc::MapField<string, string> stringProperties_ = new pbc::MapField<string, string>();
    /// <summary>
    /// String properties.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> StringProperties {
      get { return stringProperties_; }
    }

    /// <summary>Field number for the "numeric_properties" field.</summary>
    public const int NumericPropertiesFieldNumber = 5;
    private static readonly pbc::MapField<string, double>.Codec _map_numericProperties_codec
        = new pbc::MapField<string, double>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForDouble(17, 0D), 42);
    private readonly pbc::MapField<string, double> numericProperties_ = new pbc::MapField<string, double>();
    /// <summary>
    /// Numeric properties.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, double> NumericProperties {
      get { return numericProperties_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchmakerAdd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchmakerAdd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinCount != other.MinCount) return false;
      if (MaxCount != other.MaxCount) return false;
      if (Query != other.Query) return false;
      if (!StringProperties.Equals(other.StringProperties)) return false;
      if (!NumericProperties.Equals(other.NumericProperties)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinCount != 0) hash ^= MinCount.GetHashCode();
      if (MaxCount != 0) hash ^= MaxCount.GetHashCode();
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      hash ^= StringProperties.GetHashCode();
      hash ^= NumericProperties.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MinCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinCount);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxCount);
      }
      if (Query.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Query);
      }
      stringProperties_.WriteTo(output, _map_stringProperties_codec);
      numericProperties_.WriteTo(output, _map_numericProperties_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MinCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinCount);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxCount);
      }
      if (Query.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Query);
      }
      stringProperties_.WriteTo(ref output, _map_stringProperties_codec);
      numericProperties_.WriteTo(ref output, _map_numericProperties_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinCount);
      }
      if (MaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCount);
      }
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      size += stringProperties_.CalculateSize(_map_stringProperties_codec);
      size += numericProperties_.CalculateSize(_map_numericProperties_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchmakerAdd other) {
      if (other == null) {
        return;
      }
      if (other.MinCount != 0) {
        MinCount = other.MinCount;
      }
      if (other.MaxCount != 0) {
        MaxCount = other.MaxCount;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      stringProperties_.Add(other.stringProperties_);
      numericProperties_.Add(other.numericProperties_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinCount = input.ReadInt32();
            break;
          }
          case 16: {
            MaxCount = input.ReadInt32();
            break;
          }
          case 26: {
            Query = input.ReadString();
            break;
          }
          case 34: {
            stringProperties_.AddEntriesFrom(input, _map_stringProperties_codec);
            break;
          }
          case 42: {
            numericProperties_.AddEntriesFrom(input, _map_numericProperties_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MinCount = input.ReadInt32();
            break;
          }
          case 16: {
            MaxCount = input.ReadInt32();
            break;
          }
          case 26: {
            Query = input.ReadString();
            break;
          }
          case 34: {
            stringProperties_.AddEntriesFrom(ref input, _map_stringProperties_codec);
            break;
          }
          case 42: {
            numericProperties_.AddEntriesFrom(ref input, _map_numericProperties_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A successful matchmaking result.
  /// </summary>
  public sealed partial class MatchmakerMatched : pb::IMessage<MatchmakerMatched>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchmakerMatched> _parser = new pb::MessageParser<MatchmakerMatched>(() => new MatchmakerMatched());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchmakerMatched> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakerMatched() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakerMatched(MatchmakerMatched other) : this() {
      ticket_ = other.ticket_;
      users_ = other.users_.Clone();
      self_ = other.self_ != null ? other.self_.Clone() : null;
      switch (other.IdCase) {
        case IdOneofCase.MatchId:
          MatchId = other.MatchId;
          break;
        case IdOneofCase.Token:
          Token = other.Token;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakerMatched Clone() {
      return new MatchmakerMatched(this);
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 1;
    private string ticket_ = "";
    /// <summary>
    /// The matchmaking ticket that has completed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ticket {
      get { return ticket_; }
      set {
        ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 2;
    /// <summary>
    /// Match ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return idCase_ == IdOneofCase.MatchId ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.MatchId;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    /// <summary>
    /// Match join token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return idCase_ == IdOneofCase.Token ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.Token;
      }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Nakama.MatchmakerMatched.Types.MatchmakerUser> _repeated_users_codec
        = pb::FieldCodec.ForMessage(34, global::Nakama.MatchmakerMatched.Types.MatchmakerUser.Parser);
    private readonly pbc::RepeatedField<global::Nakama.MatchmakerMatched.Types.MatchmakerUser> users_ = new pbc::RepeatedField<global::Nakama.MatchmakerMatched.Types.MatchmakerUser>();
    /// <summary>
    /// The users that have been matched together, and information about their matchmaking data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.MatchmakerMatched.Types.MatchmakerUser> Users {
      get { return users_; }
    }

    /// <summary>Field number for the "self" field.</summary>
    public const int SelfFieldNumber = 5;
    private global::Nakama.MatchmakerMatched.Types.MatchmakerUser self_;
    /// <summary>
    /// A reference to the current user and their properties.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.MatchmakerMatched.Types.MatchmakerUser Self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    private object id_;
    /// <summary>Enum of possible cases for the "id" oneof.</summary>
    public enum IdOneofCase {
      None = 0,
      MatchId = 2,
      Token = 3,
    }
    private IdOneofCase idCase_ = IdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofCase IdCase {
      get { return idCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      idCase_ = IdOneofCase.None;
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchmakerMatched);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchmakerMatched other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ticket != other.Ticket) return false;
      if (MatchId != other.MatchId) return false;
      if (Token != other.Token) return false;
      if(!users_.Equals(other.users_)) return false;
      if (!object.Equals(Self, other.Self)) return false;
      if (IdCase != other.IdCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ticket.Length != 0) hash ^= Ticket.GetHashCode();
      if (idCase_ == IdOneofCase.MatchId) hash ^= MatchId.GetHashCode();
      if (idCase_ == IdOneofCase.Token) hash ^= Token.GetHashCode();
      hash ^= users_.GetHashCode();
      if (self_ != null) hash ^= Self.GetHashCode();
      hash ^= (int) idCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Ticket.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ticket);
      }
      if (idCase_ == IdOneofCase.MatchId) {
        output.WriteRawTag(18);
        output.WriteString(MatchId);
      }
      if (idCase_ == IdOneofCase.Token) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      users_.WriteTo(output, _repeated_users_codec);
      if (self_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Self);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Ticket.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ticket);
      }
      if (idCase_ == IdOneofCase.MatchId) {
        output.WriteRawTag(18);
        output.WriteString(MatchId);
      }
      if (idCase_ == IdOneofCase.Token) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      users_.WriteTo(ref output, _repeated_users_codec);
      if (self_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Self);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ticket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticket);
      }
      if (idCase_ == IdOneofCase.MatchId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (idCase_ == IdOneofCase.Token) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      size += users_.CalculateSize(_repeated_users_codec);
      if (self_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Self);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchmakerMatched other) {
      if (other == null) {
        return;
      }
      if (other.Ticket.Length != 0) {
        Ticket = other.Ticket;
      }
      users_.Add(other.users_);
      if (other.self_ != null) {
        if (self_ == null) {
          Self = new global::Nakama.MatchmakerMatched.Types.MatchmakerUser();
        }
        Self.MergeFrom(other.Self);
      }
      switch (other.IdCase) {
        case IdOneofCase.MatchId:
          MatchId = other.MatchId;
          break;
        case IdOneofCase.Token:
          Token = other.Token;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ticket = input.ReadString();
            break;
          }
          case 18: {
            MatchId = input.ReadString();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 34: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
          case 42: {
            if (self_ == null) {
              Self = new global::Nakama.MatchmakerMatched.Types.MatchmakerUser();
            }
            input.ReadMessage(Self);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Ticket = input.ReadString();
            break;
          }
          case 18: {
            MatchId = input.ReadString();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 34: {
            users_.AddEntriesFrom(ref input, _repeated_users_codec);
            break;
          }
          case 42: {
            if (self_ == null) {
              Self = new global::Nakama.MatchmakerMatched.Types.MatchmakerUser();
            }
            input.ReadMessage(Self);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MatchmakerMatched message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class MatchmakerUser : pb::IMessage<MatchmakerUser>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MatchmakerUser> _parser = new pb::MessageParser<MatchmakerUser>(() => new MatchmakerUser());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MatchmakerUser> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nakama.MatchmakerMatched.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchmakerUser() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchmakerUser(MatchmakerUser other) : this() {
          presence_ = other.presence_ != null ? other.presence_.Clone() : null;
          stringProperties_ = other.stringProperties_.Clone();
          numericProperties_ = other.numericProperties_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MatchmakerUser Clone() {
          return new MatchmakerUser(this);
        }

        /// <summary>Field number for the "presence" field.</summary>
        public const int PresenceFieldNumber = 1;
        private global::Nakama.UserPresence presence_;
        /// <summary>
        /// User info.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Nakama.UserPresence Presence {
          get { return presence_; }
          set {
            presence_ = value;
          }
        }

        /// <summary>Field number for the "string_properties" field.</summary>
        public const int StringPropertiesFieldNumber = 5;
        private static readonly pbc::MapField<string, string>.Codec _map_stringProperties_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 42);
        private readonly pbc::MapField<string, string> stringProperties_ = new pbc::MapField<string, string>();
        /// <summary>
        /// String properties.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> StringProperties {
          get { return stringProperties_; }
        }

        /// <summary>Field number for the "numeric_properties" field.</summary>
        public const int NumericPropertiesFieldNumber = 6;
        private static readonly pbc::MapField<string, double>.Codec _map_numericProperties_codec
            = new pbc::MapField<string, double>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForDouble(17, 0D), 50);
        private readonly pbc::MapField<string, double> numericProperties_ = new pbc::MapField<string, double>();
        /// <summary>
        /// Numeric properties.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, double> NumericProperties {
          get { return numericProperties_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MatchmakerUser);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MatchmakerUser other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Presence, other.Presence)) return false;
          if (!StringProperties.Equals(other.StringProperties)) return false;
          if (!NumericProperties.Equals(other.NumericProperties)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (presence_ != null) hash ^= Presence.GetHashCode();
          hash ^= StringProperties.GetHashCode();
          hash ^= NumericProperties.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (presence_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Presence);
          }
          stringProperties_.WriteTo(output, _map_stringProperties_codec);
          numericProperties_.WriteTo(output, _map_numericProperties_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (presence_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Presence);
          }
          stringProperties_.WriteTo(ref output, _map_stringProperties_codec);
          numericProperties_.WriteTo(ref output, _map_numericProperties_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (presence_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Presence);
          }
          size += stringProperties_.CalculateSize(_map_stringProperties_codec);
          size += numericProperties_.CalculateSize(_map_numericProperties_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MatchmakerUser other) {
          if (other == null) {
            return;
          }
          if (other.presence_ != null) {
            if (presence_ == null) {
              Presence = new global::Nakama.UserPresence();
            }
            Presence.MergeFrom(other.Presence);
          }
          stringProperties_.Add(other.stringProperties_);
          numericProperties_.Add(other.numericProperties_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (presence_ == null) {
                  Presence = new global::Nakama.UserPresence();
                }
                input.ReadMessage(Presence);
                break;
              }
              case 42: {
                stringProperties_.AddEntriesFrom(input, _map_stringProperties_codec);
                break;
              }
              case 50: {
                numericProperties_.AddEntriesFrom(input, _map_numericProperties_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (presence_ == null) {
                  Presence = new global::Nakama.UserPresence();
                }
                input.ReadMessage(Presence);
                break;
              }
              case 42: {
                stringProperties_.AddEntriesFrom(ref input, _map_stringProperties_codec);
                break;
              }
              case 50: {
                numericProperties_.AddEntriesFrom(ref input, _map_numericProperties_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Cancel an existing ongoing matchmaking process.
  /// </summary>
  public sealed partial class MatchmakerRemove : pb::IMessage<MatchmakerRemove>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchmakerRemove> _parser = new pb::MessageParser<MatchmakerRemove>(() => new MatchmakerRemove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchmakerRemove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakerRemove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakerRemove(MatchmakerRemove other) : this() {
      ticket_ = other.ticket_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakerRemove Clone() {
      return new MatchmakerRemove(this);
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 1;
    private string ticket_ = "";
    /// <summary>
    /// The ticket to cancel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ticket {
      get { return ticket_; }
      set {
        ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchmakerRemove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchmakerRemove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ticket != other.Ticket) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ticket.Length != 0) hash ^= Ticket.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Ticket.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Ticket.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ticket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchmakerRemove other) {
      if (other == null) {
        return;
      }
      if (other.Ticket.Length != 0) {
        Ticket = other.Ticket;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ticket = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Ticket = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A ticket representing a new matchmaking process.
  /// </summary>
  public sealed partial class MatchmakerTicket : pb::IMessage<MatchmakerTicket>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchmakerTicket> _parser = new pb::MessageParser<MatchmakerTicket>(() => new MatchmakerTicket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchmakerTicket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakerTicket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakerTicket(MatchmakerTicket other) : this() {
      ticket_ = other.ticket_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchmakerTicket Clone() {
      return new MatchmakerTicket(this);
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 1;
    private string ticket_ = "";
    /// <summary>
    /// The ticket that can be used to cancel matchmaking.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ticket {
      get { return ticket_; }
      set {
        ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchmakerTicket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchmakerTicket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ticket != other.Ticket) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ticket.Length != 0) hash ^= Ticket.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Ticket.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Ticket.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ticket);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ticket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticket);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchmakerTicket other) {
      if (other == null) {
        return;
      }
      if (other.Ticket.Length != 0) {
        Ticket = other.Ticket;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ticket = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Ticket = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A collection of zero or more notifications.
  /// </summary>
  public sealed partial class Notifications : pb::IMessage<Notifications>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Notifications> _parser = new pb::MessageParser<Notifications>(() => new Notifications());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notifications> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notifications() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notifications(Notifications other) : this() {
      notifications_ = other.notifications_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notifications Clone() {
      return new Notifications(this);
    }

    /// <summary>Field number for the "notifications" field.</summary>
    public const int Notifications_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.Notification> _repeated_notifications_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.Notification.Parser);
    private readonly pbc::RepeatedField<global::Nakama.Notification> notifications_ = new pbc::RepeatedField<global::Nakama.Notification>();
    /// <summary>
    /// Collection of notifications.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.Notification> Notifications_ {
      get { return notifications_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notifications);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notifications other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!notifications_.Equals(other.notifications_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= notifications_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      notifications_.WriteTo(output, _repeated_notifications_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      notifications_.WriteTo(ref output, _repeated_notifications_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += notifications_.CalculateSize(_repeated_notifications_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notifications other) {
      if (other == null) {
        return;
      }
      notifications_.Add(other.notifications_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            notifications_.AddEntriesFrom(input, _repeated_notifications_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            notifications_.AddEntriesFrom(ref input, _repeated_notifications_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Application-level heartbeat and connection check.
  /// </summary>
  public sealed partial class Ping : pb::IMessage<Ping>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Ping> _parser = new pb::MessageParser<Ping>(() => new Ping());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping(Ping other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ping Clone() {
      return new Ping(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ping other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Application-level heartbeat and connection check response.
  /// </summary>
  public sealed partial class Pong : pb::IMessage<Pong>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Pong> _parser = new pb::MessageParser<Pong>(() => new Pong());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pong> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pong() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pong(Pong other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pong Clone() {
      return new Pong(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pong);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pong other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pong other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A snapshot of statuses for some set of users.
  /// </summary>
  public sealed partial class Status : pb::IMessage<Status>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Status> _parser = new pb::MessageParser<Status>(() => new Status());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Status> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status(Status other) : this() {
      presences_ = other.presences_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status Clone() {
      return new Status(this);
    }

    /// <summary>Field number for the "presences" field.</summary>
    public const int PresencesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_presences_codec
        = pb::FieldCodec.ForMessage(10, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> presences_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    /// <summary>
    /// User statuses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Presences {
      get { return presences_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Status);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Status other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!presences_.Equals(other.presences_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= presences_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      presences_.WriteTo(output, _repeated_presences_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      presences_.WriteTo(ref output, _repeated_presences_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += presences_.CalculateSize(_repeated_presences_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Status other) {
      if (other == null) {
        return;
      }
      presences_.Add(other.presences_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            presences_.AddEntriesFrom(input, _repeated_presences_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            presences_.AddEntriesFrom(ref input, _repeated_presences_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Start receiving status updates for some set of users.
  /// </summary>
  public sealed partial class StatusFollow : pb::IMessage<StatusFollow>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StatusFollow> _parser = new pb::MessageParser<StatusFollow>(() => new StatusFollow());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusFollow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusFollow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusFollow(StatusFollow other) : this() {
      userIds_ = other.userIds_.Clone();
      usernames_ = other.usernames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusFollow Clone() {
      return new StatusFollow(this);
    }

    /// <summary>Field number for the "user_ids" field.</summary>
    public const int UserIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_userIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> userIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// User IDs to follow.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UserIds {
      get { return userIds_; }
    }

    /// <summary>Field number for the "usernames" field.</summary>
    public const int UsernamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_usernames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> usernames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Usernames to follow.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Usernames {
      get { return usernames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusFollow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusFollow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userIds_.Equals(other.userIds_)) return false;
      if(!usernames_.Equals(other.usernames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userIds_.GetHashCode();
      hash ^= usernames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      userIds_.WriteTo(output, _repeated_userIds_codec);
      usernames_.WriteTo(output, _repeated_usernames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      userIds_.WriteTo(ref output, _repeated_userIds_codec);
      usernames_.WriteTo(ref output, _repeated_usernames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      size += usernames_.CalculateSize(_repeated_usernames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusFollow other) {
      if (other == null) {
        return;
      }
      userIds_.Add(other.userIds_);
      usernames_.Add(other.usernames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
          case 18: {
            usernames_.AddEntriesFrom(input, _repeated_usernames_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            userIds_.AddEntriesFrom(ref input, _repeated_userIds_codec);
            break;
          }
          case 18: {
            usernames_.AddEntriesFrom(ref input, _repeated_usernames_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A batch of status updates for a given user.
  /// </summary>
  public sealed partial class StatusPresenceEvent : pb::IMessage<StatusPresenceEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StatusPresenceEvent> _parser = new pb::MessageParser<StatusPresenceEvent>(() => new StatusPresenceEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusPresenceEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusPresenceEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusPresenceEvent(StatusPresenceEvent other) : this() {
      joins_ = other.joins_.Clone();
      leaves_ = other.leaves_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusPresenceEvent Clone() {
      return new StatusPresenceEvent(this);
    }

    /// <summary>Field number for the "joins" field.</summary>
    public const int JoinsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_joins_codec
        = pb::FieldCodec.ForMessage(18, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> joins_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    /// <summary>
    /// New statuses for the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Joins {
      get { return joins_; }
    }

    /// <summary>Field number for the "leaves" field.</summary>
    public const int LeavesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_leaves_codec
        = pb::FieldCodec.ForMessage(26, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> leaves_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    /// <summary>
    /// Previous statuses for the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Leaves {
      get { return leaves_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusPresenceEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusPresenceEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!joins_.Equals(other.joins_)) return false;
      if(!leaves_.Equals(other.leaves_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= joins_.GetHashCode();
      hash ^= leaves_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      joins_.WriteTo(output, _repeated_joins_codec);
      leaves_.WriteTo(output, _repeated_leaves_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      joins_.WriteTo(ref output, _repeated_joins_codec);
      leaves_.WriteTo(ref output, _repeated_leaves_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += joins_.CalculateSize(_repeated_joins_codec);
      size += leaves_.CalculateSize(_repeated_leaves_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusPresenceEvent other) {
      if (other == null) {
        return;
      }
      joins_.Add(other.joins_);
      leaves_.Add(other.leaves_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            joins_.AddEntriesFrom(input, _repeated_joins_codec);
            break;
          }
          case 26: {
            leaves_.AddEntriesFrom(input, _repeated_leaves_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            joins_.AddEntriesFrom(ref input, _repeated_joins_codec);
            break;
          }
          case 26: {
            leaves_.AddEntriesFrom(ref input, _repeated_leaves_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Stop receiving status updates for some set of users.
  /// </summary>
  public sealed partial class StatusUnfollow : pb::IMessage<StatusUnfollow>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StatusUnfollow> _parser = new pb::MessageParser<StatusUnfollow>(() => new StatusUnfollow());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusUnfollow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusUnfollow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusUnfollow(StatusUnfollow other) : this() {
      userIds_ = other.userIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusUnfollow Clone() {
      return new StatusUnfollow(this);
    }

    /// <summary>Field number for the "user_ids" field.</summary>
    public const int UserIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_userIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> userIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Users to unfollow.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> UserIds {
      get { return userIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusUnfollow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusUnfollow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!userIds_.Equals(other.userIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= userIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      userIds_.WriteTo(output, _repeated_userIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      userIds_.WriteTo(ref output, _repeated_userIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += userIds_.CalculateSize(_repeated_userIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusUnfollow other) {
      if (other == null) {
        return;
      }
      userIds_.Add(other.userIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            userIds_.AddEntriesFrom(input, _repeated_userIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            userIds_.AddEntriesFrom(ref input, _repeated_userIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Set the user's own status.
  /// </summary>
  public sealed partial class StatusUpdate : pb::IMessage<StatusUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StatusUpdate> _parser = new pb::MessageParser<StatusUpdate>(() => new StatusUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusUpdate(StatusUpdate other) : this() {
      Status = other.Status;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusUpdate Clone() {
      return new StatusUpdate(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _single_status_codec = pb::FieldCodec.ForClassWrapper<string>(10);
    private string status_;
    /// <summary>
    /// Status string to set, if not present the user will appear offline.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (status_ != null) {
        _single_status_codec.WriteTagAndValue(output, Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (status_ != null) {
        _single_status_codec.WriteTagAndValue(ref output, Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += _single_status_codec.CalculateSizeWithTag(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusUpdate other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null || other.Status != "") {
          Status = other.Status;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            string value = _single_status_codec.Read(input);
            if (status_ == null || value != "") {
              Status = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            string value = _single_status_codec.Read(ref input);
            if (status_ == null || value != "") {
              Status = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents identifying information for a stream.
  /// </summary>
  public sealed partial class Stream : pb::IMessage<Stream>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Stream> _parser = new pb::MessageParser<Stream>(() => new Stream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Stream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stream(Stream other) : this() {
      mode_ = other.mode_;
      subject_ = other.subject_;
      subcontext_ = other.subcontext_;
      label_ = other.label_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stream Clone() {
      return new Stream(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private int mode_;
    /// <summary>
    /// Mode identifies the type of stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 2;
    private string subject_ = "";
    /// <summary>
    /// Subject is the primary identifier, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subject {
      get { return subject_; }
      set {
        subject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subcontext" field.</summary>
    public const int SubcontextFieldNumber = 3;
    private string subcontext_ = "";
    /// <summary>
    /// Subcontext is a secondary identifier, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subcontext {
      get { return subcontext_; }
      set {
        subcontext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 4;
    private string label_ = "";
    /// <summary>
    /// The label is an arbitrary identifying string, if the stream has one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Stream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Stream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if (Subject != other.Subject) return false;
      if (Subcontext != other.Subcontext) return false;
      if (Label != other.Label) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (Subject.Length != 0) hash ^= Subject.GetHashCode();
      if (Subcontext.Length != 0) hash ^= Subcontext.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Mode);
      }
      if (Subject.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Subject);
      }
      if (Subcontext.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Subcontext);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Label);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Mode);
      }
      if (Subject.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Subject);
      }
      if (Subcontext.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Subcontext);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Label);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
      }
      if (Subject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
      }
      if (Subcontext.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subcontext);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Stream other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.Subject.Length != 0) {
        Subject = other.Subject;
      }
      if (other.Subcontext.Length != 0) {
        Subcontext = other.Subcontext;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mode = input.ReadInt32();
            break;
          }
          case 18: {
            Subject = input.ReadString();
            break;
          }
          case 26: {
            Subcontext = input.ReadString();
            break;
          }
          case 34: {
            Label = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Mode = input.ReadInt32();
            break;
          }
          case 18: {
            Subject = input.ReadString();
            break;
          }
          case 26: {
            Subcontext = input.ReadString();
            break;
          }
          case 34: {
            Label = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A data message delivered over a stream.
  /// </summary>
  public sealed partial class StreamData : pb::IMessage<StreamData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StreamData> _parser = new pb::MessageParser<StreamData>(() => new StreamData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamData(StreamData other) : this() {
      stream_ = other.stream_ != null ? other.stream_.Clone() : null;
      sender_ = other.sender_ != null ? other.sender_.Clone() : null;
      data_ = other.data_;
      reliable_ = other.reliable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamData Clone() {
      return new StreamData(this);
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 1;
    private global::Nakama.Stream stream_;
    /// <summary>
    /// The stream this data message relates to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Stream Stream {
      get { return stream_; }
      set {
        stream_ = value;
      }
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 2;
    private global::Nakama.UserPresence sender_;
    /// <summary>
    /// The sender, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.UserPresence Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private string data_ = "";
    /// <summary>
    /// Arbitrary contents of the data message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reliable" field.</summary>
    public const int ReliableFieldNumber = 4;
    private bool reliable_;
    /// <summary>
    /// True if this data was delivered reliably, false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reliable {
      get { return reliable_; }
      set {
        reliable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Stream, other.Stream)) return false;
      if (!object.Equals(Sender, other.Sender)) return false;
      if (Data != other.Data) return false;
      if (Reliable != other.Reliable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stream_ != null) hash ^= Stream.GetHashCode();
      if (sender_ != null) hash ^= Sender.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Reliable != false) hash ^= Reliable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (stream_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stream);
      }
      if (sender_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Sender);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Data);
      }
      if (Reliable != false) {
        output.WriteRawTag(32);
        output.WriteBool(Reliable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (stream_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stream);
      }
      if (sender_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Sender);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Data);
      }
      if (Reliable != false) {
        output.WriteRawTag(32);
        output.WriteBool(Reliable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stream_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stream);
      }
      if (sender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sender);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (Reliable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamData other) {
      if (other == null) {
        return;
      }
      if (other.stream_ != null) {
        if (stream_ == null) {
          Stream = new global::Nakama.Stream();
        }
        Stream.MergeFrom(other.Stream);
      }
      if (other.sender_ != null) {
        if (sender_ == null) {
          Sender = new global::Nakama.UserPresence();
        }
        Sender.MergeFrom(other.Sender);
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Reliable != false) {
        Reliable = other.Reliable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (stream_ == null) {
              Stream = new global::Nakama.Stream();
            }
            input.ReadMessage(Stream);
            break;
          }
          case 18: {
            if (sender_ == null) {
              Sender = new global::Nakama.UserPresence();
            }
            input.ReadMessage(Sender);
            break;
          }
          case 26: {
            Data = input.ReadString();
            break;
          }
          case 32: {
            Reliable = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (stream_ == null) {
              Stream = new global::Nakama.Stream();
            }
            input.ReadMessage(Stream);
            break;
          }
          case 18: {
            if (sender_ == null) {
              Sender = new global::Nakama.UserPresence();
            }
            input.ReadMessage(Sender);
            break;
          }
          case 26: {
            Data = input.ReadString();
            break;
          }
          case 32: {
            Reliable = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A set of joins and leaves on a particular stream.
  /// </summary>
  public sealed partial class StreamPresenceEvent : pb::IMessage<StreamPresenceEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StreamPresenceEvent> _parser = new pb::MessageParser<StreamPresenceEvent>(() => new StreamPresenceEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamPresenceEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamPresenceEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamPresenceEvent(StreamPresenceEvent other) : this() {
      stream_ = other.stream_ != null ? other.stream_.Clone() : null;
      joins_ = other.joins_.Clone();
      leaves_ = other.leaves_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamPresenceEvent Clone() {
      return new StreamPresenceEvent(this);
    }

    /// <summary>Field number for the "stream" field.</summary>
    public const int StreamFieldNumber = 1;
    private global::Nakama.Stream stream_;
    /// <summary>
    /// The stream this event relates to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Nakama.Stream Stream {
      get { return stream_; }
      set {
        stream_ = value;
      }
    }

    /// <summary>Field number for the "joins" field.</summary>
    public const int JoinsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_joins_codec
        = pb::FieldCodec.ForMessage(18, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> joins_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    /// <summary>
    /// Presences joining the stream as part of this event, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Joins {
      get { return joins_; }
    }

    /// <summary>Field number for the "leaves" field.</summary>
    public const int LeavesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Nakama.UserPresence> _repeated_leaves_codec
        = pb::FieldCodec.ForMessage(26, global::Nakama.UserPresence.Parser);
    private readonly pbc::RepeatedField<global::Nakama.UserPresence> leaves_ = new pbc::RepeatedField<global::Nakama.UserPresence>();
    /// <summary>
    /// Presences leaving the stream as part of this event, if any.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Nakama.UserPresence> Leaves {
      get { return leaves_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamPresenceEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamPresenceEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Stream, other.Stream)) return false;
      if(!joins_.Equals(other.joins_)) return false;
      if(!leaves_.Equals(other.leaves_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stream_ != null) hash ^= Stream.GetHashCode();
      hash ^= joins_.GetHashCode();
      hash ^= leaves_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (stream_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stream);
      }
      joins_.WriteTo(output, _repeated_joins_codec);
      leaves_.WriteTo(output, _repeated_leaves_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (stream_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stream);
      }
      joins_.WriteTo(ref output, _repeated_joins_codec);
      leaves_.WriteTo(ref output, _repeated_leaves_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stream_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stream);
      }
      size += joins_.CalculateSize(_repeated_joins_codec);
      size += leaves_.CalculateSize(_repeated_leaves_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamPresenceEvent other) {
      if (other == null) {
        return;
      }
      if (other.stream_ != null) {
        if (stream_ == null) {
          Stream = new global::Nakama.Stream();
        }
        Stream.MergeFrom(other.Stream);
      }
      joins_.Add(other.joins_);
      leaves_.Add(other.leaves_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (stream_ == null) {
              Stream = new global::Nakama.Stream();
            }
            input.ReadMessage(Stream);
            break;
          }
          case 18: {
            joins_.AddEntriesFrom(input, _repeated_joins_codec);
            break;
          }
          case 26: {
            leaves_.AddEntriesFrom(input, _repeated_leaves_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (stream_ == null) {
              Stream = new global::Nakama.Stream();
            }
            input.ReadMessage(Stream);
            break;
          }
          case 18: {
            joins_.AddEntriesFrom(ref input, _repeated_joins_codec);
            break;
          }
          case 26: {
            leaves_.AddEntriesFrom(ref input, _repeated_leaves_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A user session associated to a stream, usually through a list operation or a join/leave event.
  /// </summary>
  public sealed partial class UserPresence : pb::IMessage<UserPresence>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserPresence> _parser = new pb::MessageParser<UserPresence>(() => new UserPresence());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserPresence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nakama.RealtimeReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPresence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPresence(UserPresence other) : this() {
      userId_ = other.userId_;
      sessionId_ = other.sessionId_;
      username_ = other.username_;
      persistence_ = other.persistence_;
      Status = other.Status;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserPresence Clone() {
      return new UserPresence(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    /// <summary>
    /// The user this presence belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 2;
    private string sessionId_ = "";
    /// <summary>
    /// A unique session ID identifying the particular connection, because the user may have many.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 3;
    private string username_ = "";
    /// <summary>
    /// The username for display purposes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "persistence" field.</summary>
    public const int PersistenceFieldNumber = 4;
    private bool persistence_;
    /// <summary>
    /// Whether this presence generates persistent data/messages, if applicable for the stream type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Persistence {
      get { return persistence_; }
      set {
        persistence_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_status_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string status_;
    /// <summary>
    /// A user-set status message for this stream, if applicable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserPresence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserPresence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (SessionId != other.SessionId) return false;
      if (Username != other.Username) return false;
      if (Persistence != other.Persistence) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Persistence != false) hash ^= Persistence.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (SessionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionId);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (Persistence != false) {
        output.WriteRawTag(32);
        output.WriteBool(Persistence);
      }
      if (status_ != null) {
        _single_status_codec.WriteTagAndValue(output, Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (SessionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionId);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (Persistence != false) {
        output.WriteRawTag(32);
        output.WriteBool(Persistence);
      }
      if (status_ != null) {
        _single_status_codec.WriteTagAndValue(ref output, Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Persistence != false) {
        size += 1 + 1;
      }
      if (status_ != null) {
        size += _single_status_codec.CalculateSizeWithTag(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserPresence other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Persistence != false) {
        Persistence = other.Persistence;
      }
      if (other.status_ != null) {
        if (status_ == null || other.Status != "") {
          Status = other.Status;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            SessionId = input.ReadString();
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
          case 32: {
            Persistence = input.ReadBool();
            break;
          }
          case 42: {
            string value = _single_status_codec.Read(input);
            if (status_ == null || value != "") {
              Status = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            SessionId = input.ReadString();
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
          case 32: {
            Persistence = input.ReadBool();
            break;
          }
          case 42: {
            string value = _single_status_codec.Read(ref input);
            if (status_ == null || value != "") {
              Status = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
